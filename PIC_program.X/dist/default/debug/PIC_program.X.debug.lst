

Microchip Technology PIC LITE Macro Assembler V1.44 build -154322312 
                                                                                               Fri Feb 23 15:44:30 2018

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	16F1823
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	stringtext1,global,class=STRCODE,delta=2
     5                           	psect	stringtext2,global,class=STRCODE,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2
    14                           	psect	text4,local,class=CODE,merge=1,delta=2
    15                           	psect	text5,local,class=CODE,merge=1,delta=2
    16                           	psect	text6,local,class=CODE,merge=1,delta=2
    17                           	psect	text7,local,class=CODE,merge=1,delta=2
    18                           	psect	text8,local,class=CODE,merge=1,delta=2
    19                           	dabs	1,0x7E,2
    20  0000                     
    21                           ; Version 1.44
    22                           ; Generated 14/09/2017 GMT
    23                           ; 
    24                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    25                           ; All rights reserved.
    26                           ; 
    27                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    28                           ; 
    29                           ; Redistribution and use in source and binary forms, with or without modification, are
    30                           ; permitted provided that the following conditions are met:
    31                           ; 
    32                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    33                           ;        conditions and the following disclaimer.
    34                           ; 
    35                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    36                           ;        of conditions and the following disclaimer in the documentation and/or other
    37                           ;        materials provided with the distribution.
    38                           ; 
    39                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    40                           ;        software without specific prior written permission.
    41                           ; 
    42                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    43                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    44                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    45                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    46                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    47                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    48                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    49                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    50                           ; 
    51                           ; 
    52                           ; Code-generator required, PIC16F1823 Definitions
    53                           ; 
    54                           ; SFR Addresses
    55  0000                     	;# 
    56  0001                     	;# 
    57  0002                     	;# 
    58  0003                     	;# 
    59  0004                     	;# 
    60  0005                     	;# 
    61  0006                     	;# 
    62  0007                     	;# 
    63  0008                     	;# 
    64  0009                     	;# 
    65  000A                     	;# 
    66  000B                     	;# 
    67  000C                     	;# 
    68  000E                     	;# 
    69  0011                     	;# 
    70  0012                     	;# 
    71  0015                     	;# 
    72  0016                     	;# 
    73  0016                     	;# 
    74  0017                     	;# 
    75  0018                     	;# 
    76  0019                     	;# 
    77  001A                     	;# 
    78  001B                     	;# 
    79  001C                     	;# 
    80  001E                     	;# 
    81  001F                     	;# 
    82  008C                     	;# 
    83  008E                     	;# 
    84  0091                     	;# 
    85  0092                     	;# 
    86  0095                     	;# 
    87  0096                     	;# 
    88  0097                     	;# 
    89  0098                     	;# 
    90  0099                     	;# 
    91  009A                     	;# 
    92  009B                     	;# 
    93  009B                     	;# 
    94  009C                     	;# 
    95  009D                     	;# 
    96  009E                     	;# 
    97  010C                     	;# 
    98  010E                     	;# 
    99  0111                     	;# 
   100  0112                     	;# 
   101  0113                     	;# 
   102  0114                     	;# 
   103  0115                     	;# 
   104  0116                     	;# 
   105  0117                     	;# 
   106  0118                     	;# 
   107  0119                     	;# 
   108  011A                     	;# 
   109  011B                     	;# 
   110  011D                     	;# 
   111  011D                     	;# 
   112  018C                     	;# 
   113  018E                     	;# 
   114  0191                     	;# 
   115  0191                     	;# 
   116  0192                     	;# 
   117  0193                     	;# 
   118  0193                     	;# 
   119  0193                     	;# 
   120  0194                     	;# 
   121  0195                     	;# 
   122  0196                     	;# 
   123  0199                     	;# 
   124  019A                     	;# 
   125  019B                     	;# 
   126  019B                     	;# 
   127  019B                     	;# 
   128  019B                     	;# 
   129  019C                     	;# 
   130  019C                     	;# 
   131  019D                     	;# 
   132  019E                     	;# 
   133  019F                     	;# 
   134  020C                     	;# 
   135  020E                     	;# 
   136  0211                     	;# 
   137  0211                     	;# 
   138  0212                     	;# 
   139  0212                     	;# 
   140  0213                     	;# 
   141  0213                     	;# 
   142  0214                     	;# 
   143  0214                     	;# 
   144  0215                     	;# 
   145  0215                     	;# 
   146  0215                     	;# 
   147  0216                     	;# 
   148  0216                     	;# 
   149  0217                     	;# 
   150  0217                     	;# 
   151  0291                     	;# 
   152  0291                     	;# 
   153  0292                     	;# 
   154  0293                     	;# 
   155  0294                     	;# 
   156  0295                     	;# 
   157  0295                     	;# 
   158  0296                     	;# 
   159  0391                     	;# 
   160  0392                     	;# 
   161  0393                     	;# 
   162  039A                     	;# 
   163  039C                     	;# 
   164  039D                     	;# 
   165  039E                     	;# 
   166  039F                     	;# 
   167  0FE4                     	;# 
   168  0FE5                     	;# 
   169  0FE6                     	;# 
   170  0FE7                     	;# 
   171  0FE8                     	;# 
   172  0FE9                     	;# 
   173  0FEA                     	;# 
   174  0FEB                     	;# 
   175  0FED                     	;# 
   176  0FEE                     	;# 
   177  0FEF                     	;# 
   178  000B                     _INTCON	set	11
   179  000E                     _PORTC	set	14
   180  000C                     _PORTA	set	12
   181  005F                     _GIE	set	95
   182  008C                     _TXIF	set	140
   183  0099                     _OSCCON	set	153
   184  009B                     _ADRESL	set	155
   185  009C                     _ADRESH	set	156
   186  009E                     _ADCON1bits	set	158
   187  009D                     _ADCON0bits	set	157
   188  008E                     _TRISC	set	142
   189  008C                     _TRISA	set	140
   190  0095                     _OPTION_REG	set	149
   191  04D4                     _HFIOFR	set	1236
   192  0460                     _TRISA0	set	1120
   193  048C                     _TXIE	set	1164
   194  04E9                     _GO_nDONE	set	1257
   195  04E8                     _ADON	set	1256
   196  048E                     _ADIE	set	1166
   197  04F7                     _ADFM	set	1271
   198  0117                     _FVRCON	set	279
   199  010E                     _LATC	set	270
   200  010C                     _LATA	set	268
   201  08EA                     _TXCKSEL	set	2282
   202  019B                     _SPBRG	set	411
   203  019F                     _BAUDCONbits	set	415
   204  019D                     _RCSTAbits	set	413
   205  019E                     _TXSTAbits	set	414
   206  019A                     _TXREG	set	410
   207  018E                     _ANSELC	set	398
   208  018C                     _ANSELA	set	396
   209  0CF1                     _TRMT	set	3313
   210                           
   211                           	psect	stringtext1
   212  070B                     __pstringtext1:	
   213  070B                     STR_1:	
   214  070B  3456               	retlw	86	;'V'
   215  070C  3472               	retlw	114	;'r'
   216  070D  3465               	retlw	101	;'e'
   217  070E  3461               	retlw	97	;'a'
   218  070F  3464               	retlw	100	;'d'
   219  0710  343A               	retlw	58	;':'
   220  0711  3420               	retlw	32	;' '
   221  0712  3400               	retlw	0
   222                           
   223                           	psect	stringtext2
   224  0000                     __pstringtext2:	
   225                           
   226                           ; #config settings
   227  0000                     
   228                           	psect	cinit
   229  07FB                     start_initialization:	
   230  07FB                     __initialization:	
   231                           
   232                           ; Clear objects allocated to COMMON
   233  07FB  01FD               	clrf	__pbssCOMMON& (0+127)
   234                           
   235                           ; Clear objects allocated to BANK0
   236  07FC  0020               	movlb	0	; select bank0
   237  07FD  01A0               	clrf	__pbssBANK0& (0+127)
   238  07FE                     end_of_initialization:	
   239                           ;End of C runtime variable initialization code
   240                           
   241  07FE                     __end_of__initialization:	
   242  07FE  0020               	movlb	0
   243  07FF  2FBB               	ljmp	_main	;jump to C main() function
   244                           
   245                           	psect	bssCOMMON
   246  007D                     __pbssCOMMON:	
   247  007D                     _portC:	
   248  007D                     	ds	1
   249                           
   250                           	psect	bssBANK0
   251  0020                     __pbssBANK0:	
   252  0020                     _portA:	
   253  0020                     	ds	1
   254                           
   255                           	psect	cstackCOMMON
   256  0070                     __pcstackCOMMON:	
   257  0070                     ?_InitialisePorts:	
   258  0070                     ??_InitialisePorts:	
   259                           ; 1 bytes @ 0x0
   260                           
   261  0070                     ?_PIN6:	
   262                           ; 1 bytes @ 0x0
   263                           
   264  0070                     ??_PIN6:	
   265                           ; 1 bytes @ 0x0
   266                           
   267  0070                     ?_PIN5:	
   268                           ; 1 bytes @ 0x0
   269                           
   270  0070                     ??_PIN5:	
   271                           ; 1 bytes @ 0x0
   272                           
   273  0070                     ?_InitialiseADC:	
   274                           ; 1 bytes @ 0x0
   275                           
   276  0070                     ??_InitialiseADC:	
   277                           ; 1 bytes @ 0x0
   278                           
   279  0070                     ?_putch:	
   280                           ; 1 bytes @ 0x0
   281                           
   282  0070                     ??_putch:	
   283                           ; 1 bytes @ 0x0
   284                           
   285  0070                     ?_InitUSART:	
   286                           ; 1 bytes @ 0x0
   287                           
   288  0070                     ??_InitUSART:	
   289                           ; 1 bytes @ 0x0
   290                           
   291  0070                     ?_ReadADC:	
   292                           ; 1 bytes @ 0x0
   293                           
   294  0070                     ?_main:	
   295                           ; 2 bytes @ 0x0
   296                           
   297  0070                     putch@c:	
   298                           ; 2 bytes @ 0x0
   299                           
   300                           
   301                           ; 1 bytes @ 0x0
   302  0070                     	ds	1
   303  0071                     ?_printf:	
   304  0071                     PIN6@OnOff:	
   305                           ; 2 bytes @ 0x1
   306                           
   307  0071                     PIN5@OnOff:	
   308                           ; 1 bytes @ 0x1
   309                           
   310  0071                     printf@f:	
   311                           ; 1 bytes @ 0x1
   312                           
   313                           
   314                           ; 2 bytes @ 0x1
   315  0071                     	ds	1
   316  0072                     ??_ReadADC:	
   317                           
   318                           ; 1 bytes @ 0x2
   319  0072                     	ds	1
   320  0073                     ??_printf:	
   321                           
   322                           ; 1 bytes @ 0x3
   323  0073                     	ds	1
   324  0074                     ReadADC@adcData:	
   325                           
   326                           ; 2 bytes @ 0x4
   327  0074                     	ds	2
   328  0076                     printf@ap:	
   329                           
   330                           ; 1 bytes @ 0x6
   331  0076                     	ds	1
   332  0077                     printf@flag:	
   333                           
   334                           ; 1 bytes @ 0x7
   335  0077                     	ds	1
   336  0078                     printf@c:	
   337                           
   338                           ; 1 bytes @ 0x8
   339  0078                     	ds	1
   340  0079                     ??_main:	
   341                           
   342                           ; 1 bytes @ 0x9
   343  0079                     	ds	1
   344  007A                     main@chDelay:	
   345                           
   346                           ; 1 bytes @ 0xA
   347  007A                     	ds	1
   348  007B                     main@Vread:	
   349                           
   350                           ; 2 bytes @ 0xB
   351  007B                     	ds	2
   352                           
   353                           	psect	maintext
   354  07BB                     __pmaintext:	
   355 ;;
   356 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   357 ;;
   358 ;; *************** function _main *****************
   359 ;; Defined at:
   360 ;;		line 22 in file "newmain.c"
   361 ;; Parameters:    Size  Location     Type
   362 ;;		None
   363 ;; Auto vars:     Size  Location     Type
   364 ;;  Vread           2   11[COMMON] unsigned short 
   365 ;;  chDelay         1   10[COMMON] unsigned char 
   366 ;; Return value:  Size  Location     Type
   367 ;;                  2  112[None  ] int 
   368 ;; Registers used:
   369 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   370 ;; Tracked objects:
   371 ;;		On entry : B1F/0
   372 ;;		On exit  : 0/0
   373 ;;		Unchanged: 0/0
   374 ;; Data sizes:     COMMON   BANK0   BANK1
   375 ;;      Params:         0       0       0
   376 ;;      Locals:         3       0       0
   377 ;;      Temps:          1       0       0
   378 ;;      Totals:         4       0       0
   379 ;;Total ram usage:        4 bytes
   380 ;; Hardware stack levels required when called:    2
   381 ;; This function calls:
   382 ;;		_InitUSART
   383 ;;		_InitialiseADC
   384 ;;		_InitialisePorts
   385 ;;		_PIN5
   386 ;;		_PIN6
   387 ;;		_ReadADC
   388 ;;		_printf
   389 ;; This function is called by:
   390 ;;		Startup code after reset
   391 ;; This function uses a non-reentrant model
   392 ;;
   393                           
   394                           
   395                           ;psect for function _main
   396  07BB                     _main:	
   397                           
   398                           ;newmain.c: 25: OSCCON = 0b01011000;
   399                           
   400                           ;incstack = 0
   401                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   402  07BB  3058               	movlw	88
   403  07BC  0021               	movlb	1	; select bank1
   404  07BD  0099               	movwf	25	;volatile
   405  07BE                     l113:	
   406                           ;newmain.c: 36: while(HFIOFR==0){
   407                           
   408  07BE  1E1A               	btfss	26,4	;volatile
   409  07BF  2FBE               	goto	l113
   410                           
   411                           ;newmain.c: 37: }
   412                           ;newmain.c: 40: INTCON = 0b00000000;
   413  07C0  018B               	clrf	11	;volatile
   414                           
   415                           ;newmain.c: 41: GIE = 0;
   416  07C1  138B               	bcf	11,7	;volatile
   417                           
   418                           ;newmain.c: 43: InitUSART();
   419  07C2  2713               	fcall	_InitUSART
   420                           
   421                           ;newmain.c: 44: InitialisePorts();
   422  07C3  2750               	fcall	_InitialisePorts
   423                           
   424                           ;newmain.c: 45: InitialiseADC();
   425  07C4  273D               	fcall	_InitialiseADC
   426                           
   427                           ;newmain.c: 46: ADON=1;
   428  07C5  0021               	movlb	1	; select bank1
   429  07C6  141D               	bsf	29,0	;volatile
   430                           
   431                           ;newmain.c: 49: unsigned short Vread;
   432                           ;newmain.c: 51: char chDelay=500;
   433  07C7  30F4               	movlw	244
   434  07C8  00F9               	movwf	??_main
   435  07C9  0879               	movf	??_main,w
   436  07CA  00FA               	movwf	main@chDelay
   437  07CB                     l815:	
   438                           ;newmain.c: 59: while(1){
   439                           
   440                           
   441                           ;newmain.c: 63: Vread = ReadADC();
   442  07CB  2766               	fcall	_ReadADC
   443  07CC  0871               	movf	?_ReadADC+1,w
   444  07CD  00FC               	movwf	main@Vread+1
   445  07CE  0870               	movf	?_ReadADC,w
   446  07CF  00FB               	movwf	main@Vread
   447                           
   448                           ;newmain.c: 64: printf("Vread: ");
   449  07D0  300B               	movlw	low (STR_1| (0+32768))
   450  07D1  00F1               	movwf	printf@f
   451  07D2  3087               	movlw	high (STR_1| (0+32768))
   452  07D3  00F2               	movwf	printf@f+1
   453  07D4  2786               	fcall	_printf
   454                           
   455                           ;newmain.c: 65: printf(Vread);
   456  07D5  087C               	movf	main@Vread+1,w
   457  07D6  00F2               	movwf	printf@f+1
   458  07D7  087B               	movf	main@Vread,w
   459  07D8  00F1               	movwf	printf@f
   460  07D9  2786               	fcall	_printf
   461                           
   462                           ;newmain.c: 66: _delay((unsigned long)((500)*(1000000/4000.0)));
   463  07DA  30A3               	movlw	163
   464  07DB  00F9               	movwf	??_main
   465  07DC  3055               	movlw	85
   466  07DD                     u177:	
   467  07DD  0B89               	decfsz	9,f
   468  07DE  2FDD               	goto	u177
   469  07DF  0BF9               	decfsz	??_main,f
   470  07E0  2FDD               	goto	u177
   471  07E1  0000               	nop
   472                           
   473                           ;newmain.c: 72: if(Vread>1022){
   474  07E2  3003               	movlw	3
   475  07E3  027C               	subwf	main@Vread+1,w
   476  07E4  30FF               	movlw	255
   477  07E5  1903               	skipnz
   478  07E6  027B               	subwf	main@Vread,w
   479  07E7  1C03               	skipc
   480  07E8  2FED               	goto	l827
   481                           
   482                           ;newmain.c: 74: PIN5(0);
   483  07E9  3000               	movlw	0
   484  07EA  2721               	fcall	_PIN5
   485                           
   486                           ;newmain.c: 75: PIN6(1);
   487  07EB  3001               	movlw	1
   488  07EC  2FF7               	goto	L1
   489  07ED                     l827:	
   490                           ;newmain.c: 77: }
   491                           
   492                           
   493                           ;newmain.c: 78: else if (Vread<1){
   494  07ED  087B               	movf	main@Vread,w
   495  07EE  047C               	iorwf	main@Vread+1,w
   496  07EF  1D03               	btfss	3,2
   497  07F0  2FF6               	goto	l831
   498                           
   499                           ;newmain.c: 80: PIN6(0);
   500  07F1  3000               	movlw	0
   501  07F2  272F               	fcall	_PIN6
   502                           
   503                           ;newmain.c: 81: PIN5(1);
   504  07F3  3001               	movlw	1
   505  07F4  2721               	fcall	_PIN5
   506                           
   507                           ;newmain.c: 82: }
   508  07F5  2FF8               	goto	l118
   509  07F6                     l831:	
   510                           
   511                           ;newmain.c: 83: else
   512                           ;newmain.c: 84: PIN6(0);
   513  07F6  3000               	movlw	0
   514  07F7                     L1:	
   515  07F7  272F               	fcall	_PIN6
   516  07F8                     l118:	
   517                           
   518                           ;newmain.c: 85: PIN5(0);
   519  07F8  3000               	movlw	0
   520  07F9  2721               	fcall	_PIN5
   521  07FA  2FCB               	goto	l815
   522  07FB                     __end_of_main:	
   523                           ;newmain.c: 86: }
   524                           ;newmain.c: 88: return (0);
   525                           ;	Return value of _main is never used
   526                           
   527                           
   528                           	psect	text1
   529  0786                     __ptext1:	
   530 ;; *************** function _printf *****************
   531 ;; Defined at:
   532 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\doprnt.c"
   533 ;; Parameters:    Size  Location     Type
   534 ;;  f               2    1[COMMON] PTR const unsigned char 
   535 ;;		 -> ROM(2048), STR_1(8), 
   536 ;; Auto vars:     Size  Location     Type
   537 ;;  tmpval          4    0        struct .
   538 ;;  cp              2    0        PTR const unsigned char 
   539 ;;  len             2    0        unsigned int 
   540 ;;  val             2    0        unsigned int 
   541 ;;  c               1    8[COMMON] char 
   542 ;;  flag            1    7[COMMON] unsigned char 
   543 ;;  ap              1    6[COMMON] PTR void [1]
   544 ;;		 -> ?_printf(2), 
   545 ;;  prec            1    0        char 
   546 ;; Return value:  Size  Location     Type
   547 ;;                  2    1[COMMON] int 
   548 ;; Registers used:
   549 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   550 ;; Tracked objects:
   551 ;;		On entry : 0/0
   552 ;;		On exit  : 0/0
   553 ;;		Unchanged: 0/0
   554 ;; Data sizes:     COMMON   BANK0   BANK1
   555 ;;      Params:         2       0       0
   556 ;;      Locals:         3       0       0
   557 ;;      Temps:          3       0       0
   558 ;;      Totals:         8       0       0
   559 ;;Total ram usage:        8 bytes
   560 ;; Hardware stack levels used:    1
   561 ;; Hardware stack levels required when called:    1
   562 ;; This function calls:
   563 ;;		_putch
   564 ;; This function is called by:
   565 ;;		_main
   566 ;; This function uses a non-reentrant model
   567 ;;
   568                           
   569                           
   570                           ;psect for function _printf
   571  0786                     _printf:	
   572                           
   573                           ;doprnt.c: 466: va_list ap;
   574                           ;doprnt.c: 499: signed char c;
   575                           ;doprnt.c: 506: signed char prec;
   576                           ;doprnt.c: 508: unsigned char flag;
   577                           ;doprnt.c: 523: union {
   578                           ;doprnt.c: 524: unsigned long vd;
   579                           ;doprnt.c: 525: double integ;
   580                           ;doprnt.c: 526: } tmpval;
   581                           ;doprnt.c: 528: unsigned int val;
   582                           ;doprnt.c: 529: unsigned len;
   583                           ;doprnt.c: 530: const char * cp;
   584                           ;doprnt.c: 533: *ap = __va_start();
   585                           
   586                           ;incstack = 0
   587                           ; Regs used in _printf: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   588  0786  3073               	movlw	(low ((?_printf| 0+2)))& (0+255)
   589  0787  00F3               	movwf	??_printf
   590  0788  0873               	movf	??_printf,w
   591  0789  00F6               	movwf	printf@ap
   592  078A                     l789:	
   593                           ;doprnt.c: 1422: {
   594                           
   595                           ;doprnt.c: 536: while(c = *f++) {
   596                           
   597  078A  0872               	movf	printf@f+1,w
   598  078B  00F4               	movwf	??_printf+1
   599  078C  0871               	movf	printf@f,w
   600  078D  00F3               	movwf	??_printf
   601  078E  0AF1               	incf	printf@f,f
   602  078F  1903               	skipnz
   603  0790  0AF2               	incf	printf@f+1,f
   604  0791  0873               	movf	??_printf,w
   605  0792  0084               	movwf	4
   606  0793  0874               	movf	??_printf+1,w
   607  0794  0085               	movwf	5
   608  0795  0800               	movf	0,w	;code access
   609  0796  00F5               	movwf	??_printf+2
   610  0797  0875               	movf	??_printf+2,w
   611  0798  00F8               	movwf	printf@c
   612  0799  0878               	movf	printf@c,w
   613  079A  1903               	btfsc	3,2
   614  079B  0008               	return
   615                           
   616                           ;doprnt.c: 538: if(c != '%')
   617  079C  3025               	movlw	37
   618  079D  0678               	xorwf	printf@c,w
   619  079E  1903               	btfsc	3,2
   620  079F  2FA3               	goto	l781
   621                           
   622                           ;doprnt.c: 540: {
   623                           ;doprnt.c: 541: (putch(c) );
   624  07A0  0878               	movf	printf@c,w
   625  07A1  2704               	fcall	_putch
   626                           
   627                           ;doprnt.c: 542: continue;
   628  07A2  2F8A               	goto	l789
   629  07A3                     l781:	
   630                           
   631                           ;doprnt.c: 543: }
   632                           ;doprnt.c: 548: flag = 0;
   633  07A3  01F7               	clrf	printf@flag
   634                           
   635                           ;doprnt.c: 635: switch(c = *f++) {
   636  07A4  2FA8               	goto	l787
   637  07A5                     l783:	
   638                           ;doprnt.c: 802: default:
   639                           
   640                           ;doprnt.c: 638: goto alldone;
   641                           
   642                           ;doprnt.c: 637: case 0:
   643                           
   644                           
   645                           ;doprnt.c: 809: (putch(c) );
   646  07A5  0878               	movf	printf@c,w
   647  07A6  2704               	fcall	_putch
   648                           
   649                           ;doprnt.c: 822: }
   650                           
   651                           ;doprnt.c: 810: continue;
   652  07A7  2F8A               	goto	l789
   653  07A8                     l787:	
   654  07A8  0872               	movf	printf@f+1,w
   655  07A9  00F4               	movwf	??_printf+1
   656  07AA  0871               	movf	printf@f,w
   657  07AB  00F3               	movwf	??_printf
   658  07AC  0AF1               	incf	printf@f,f
   659  07AD  1903               	skipnz
   660  07AE  0AF2               	incf	printf@f+1,f
   661  07AF  0873               	movf	??_printf,w
   662  07B0  0084               	movwf	4
   663  07B1  0874               	movf	??_printf+1,w
   664  07B2  0085               	movwf	5
   665  07B3  0800               	movf	0,w	;code access
   666  07B4  00F8               	movwf	printf@c
   667                           
   668                           ; Switch size 1, requested type "space"
   669                           ; Number of cases is 1, Range of values is 0 to 0
   670                           ; switch strategies available:
   671                           ; Name         Instructions Cycles
   672                           ; simple_byte            4     3 (average)
   673                           ; direct_byte            8     6 (fixed)
   674                           ; jumptable            260     6 (fixed)
   675                           ;	Chosen strategy is simple_byte
   676  07B5  3A00               	xorlw	0	; case 0
   677  07B6  1903               	skipnz
   678  07B7  2FBA               	goto	l139
   679  07B8  2FA5               	goto	l783
   680  07B9  2F8A               	goto	l789
   681  07BA                     l139:	
   682                           ;doprnt.c: 1540: return 0;
   683                           ;	Return value of _printf is never used
   684                           
   685                           ;doprnt.c: 1469: }
   686                           ;doprnt.c: 1533: }
   687                           ;doprnt.c: 1535: alldone:
   688                           
   689  07BA  0008               	return
   690  07BB                     __end_of_printf:	
   691                           
   692                           	psect	text2
   693  0704                     __ptext2:	
   694 ;; *************** function _putch *****************
   695 ;; Defined at:
   696 ;;		line 38 in file "Usart.h"
   697 ;; Parameters:    Size  Location     Type
   698 ;;  c               1    wreg     unsigned char 
   699 ;; Auto vars:     Size  Location     Type
   700 ;;  c               1    0[COMMON] unsigned char 
   701 ;; Return value:  Size  Location     Type
   702 ;;                  1    wreg      void 
   703 ;; Registers used:
   704 ;;		wreg
   705 ;; Tracked objects:
   706 ;;		On entry : 0/0
   707 ;;		On exit  : 0/0
   708 ;;		Unchanged: 0/0
   709 ;; Data sizes:     COMMON   BANK0   BANK1
   710 ;;      Params:         0       0       0
   711 ;;      Locals:         1       0       0
   712 ;;      Temps:          0       0       0
   713 ;;      Totals:         1       0       0
   714 ;;Total ram usage:        1 bytes
   715 ;; Hardware stack levels used:    1
   716 ;; This function calls:
   717 ;;		Nothing
   718 ;; This function is called by:
   719 ;;		_printf
   720 ;; This function uses a non-reentrant model
   721 ;;
   722                           
   723                           
   724                           ;psect for function _putch
   725  0704                     _putch:	
   726                           
   727                           ;incstack = 0
   728                           ; Regs used in _putch: [wreg]
   729                           ;putch@c stored from wreg
   730  0704  00F0               	movwf	putch@c
   731  0705                     l96:	
   732                           ;Usart.h: 40: while(!TRMT);
   733                           
   734  0705  0023               	movlb	3	; select bank3
   735  0706  1C9E               	btfss	30,1	;volatile
   736  0707  2F05               	goto	l96
   737                           
   738                           ;Usart.h: 41: TXREG=c;
   739  0708  0870               	movf	putch@c,w
   740  0709  009A               	movwf	26	;volatile
   741  070A  0008               	return
   742  070B                     __end_of_putch:	
   743                           
   744                           	psect	text3
   745  0766                     __ptext3:	
   746 ;; *************** function _ReadADC *****************
   747 ;; Defined at:
   748 ;;		line 34 in file "ADC.h"
   749 ;; Parameters:    Size  Location     Type
   750 ;;		None
   751 ;; Auto vars:     Size  Location     Type
   752 ;;  adcData         2    4[COMMON] unsigned short 
   753 ;; Return value:  Size  Location     Type
   754 ;;                  2    0[COMMON] unsigned short 
   755 ;; Registers used:
   756 ;;		wreg, status,2
   757 ;; Tracked objects:
   758 ;;		On entry : 0/0
   759 ;;		On exit  : 0/0
   760 ;;		Unchanged: 0/0
   761 ;; Data sizes:     COMMON   BANK0   BANK1
   762 ;;      Params:         2       0       0
   763 ;;      Locals:         2       0       0
   764 ;;      Temps:          2       0       0
   765 ;;      Totals:         6       0       0
   766 ;;Total ram usage:        6 bytes
   767 ;; Hardware stack levels used:    1
   768 ;; This function calls:
   769 ;;		Nothing
   770 ;; This function is called by:
   771 ;;		_main
   772 ;; This function uses a non-reentrant model
   773 ;;
   774                           
   775                           
   776                           ;psect for function _ReadADC
   777  0766                     _ReadADC:	
   778                           
   779                           ;ADC.h: 36: unsigned short adcData = 0;
   780                           
   781                           ;incstack = 0
   782                           ; Regs used in _ReadADC: [wreg+status,2]
   783  0766  01F4               	clrf	ReadADC@adcData
   784  0767  01F5               	clrf	ReadADC@adcData+1
   785                           
   786                           ;ADC.h: 38: GO_nDONE = 1;
   787  0768  0021               	movlb	1	; select bank1
   788  0769  149D               	bsf	29,1	;volatile
   789  076A                     l90:	
   790                           ;ADC.h: 39: while (GO_nDONE){
   791                           
   792  076A  189D               	btfsc	29,1	;volatile
   793  076B  2F6A               	goto	l90
   794                           
   795                           ;ADC.h: 40: }
   796                           ;ADC.h: 43: adcData = (ADRESH & 0x03);
   797  076C  081C               	movf	28,w	;volatile
   798  076D  3903               	andlw	3
   799  076E  00F2               	movwf	??_ReadADC
   800  076F  01F3               	clrf	??_ReadADC+1
   801  0770  0872               	movf	??_ReadADC,w
   802  0771  00F4               	movwf	ReadADC@adcData
   803  0772  0873               	movf	??_ReadADC+1,w
   804  0773  00F5               	movwf	ReadADC@adcData+1
   805                           
   806                           ;ADC.h: 44: adcData<<=8;
   807  0774  3008               	movlw	8
   808  0775                     u115:	
   809  0775  35F4               	lslf	ReadADC@adcData,f
   810  0776  0DF5               	rlf	ReadADC@adcData+1,f
   811  0777  0B89               	decfsz	9,f
   812  0778  2F75               	goto	u115
   813                           
   814                           ;ADC.h: 45: adcData+=ADRESL;
   815  0779  081B               	movf	27,w	;volatile
   816  077A  00F2               	movwf	??_ReadADC
   817  077B  01F3               	clrf	??_ReadADC+1
   818  077C  0872               	movf	??_ReadADC,w
   819  077D  07F4               	addwf	ReadADC@adcData,f
   820  077E  0873               	movf	??_ReadADC+1,w
   821  077F  3DF5               	addwfc	ReadADC@adcData+1,f
   822                           
   823                           ;ADC.h: 47: GO_nDONE = 0;
   824  0780  109D               	bcf	29,1	;volatile
   825                           
   826                           ;ADC.h: 50: return adcData;
   827  0781  0875               	movf	ReadADC@adcData+1,w
   828  0782  00F1               	movwf	?_ReadADC+1
   829  0783  0874               	movf	ReadADC@adcData,w
   830  0784  00F0               	movwf	?_ReadADC
   831  0785  0008               	return
   832  0786                     __end_of_ReadADC:	
   833                           
   834                           	psect	text4
   835  072F                     __ptext4:	
   836 ;; *************** function _PIN6 *****************
   837 ;; Defined at:
   838 ;;		line 111 in file "IO_Controls.h"
   839 ;; Parameters:    Size  Location     Type
   840 ;;  OnOff           1    wreg     unsigned char 
   841 ;; Auto vars:     Size  Location     Type
   842 ;;  OnOff           1    1[COMMON] unsigned char 
   843 ;; Return value:  Size  Location     Type
   844 ;;                  1    wreg      void 
   845 ;; Registers used:
   846 ;;		wreg, status,2
   847 ;; Tracked objects:
   848 ;;		On entry : 0/0
   849 ;;		On exit  : 0/0
   850 ;;		Unchanged: 0/0
   851 ;; Data sizes:     COMMON   BANK0   BANK1
   852 ;;      Params:         0       0       0
   853 ;;      Locals:         1       0       0
   854 ;;      Temps:          1       0       0
   855 ;;      Totals:         2       0       0
   856 ;;Total ram usage:        2 bytes
   857 ;; Hardware stack levels used:    1
   858 ;; This function calls:
   859 ;;		Nothing
   860 ;; This function is called by:
   861 ;;		_main
   862 ;; This function uses a non-reentrant model
   863 ;;
   864                           
   865                           
   866                           ;psect for function _PIN6
   867  072F                     _PIN6:	
   868                           
   869                           ;incstack = 0
   870                           ; Regs used in _PIN6: [wreg+status,2]
   871                           ;PIN6@OnOff stored from wreg
   872  072F  00F1               	movwf	PIN6@OnOff
   873                           
   874                           ;IO_Controls.h: 113: portC.portCByte = PORTC;
   875  0730  0020               	movlb	0	; select bank0
   876  0731  080E               	movf	14,w	;volatile
   877  0732  00F0               	movwf	??_PIN6
   878  0733  0870               	movf	??_PIN6,w
   879  0734  00FD               	movwf	_portC
   880                           
   881                           ;IO_Controls.h: 114: portC.bits.Pin6 = OnOff;
   882  0735  0871               	movf	PIN6@OnOff,w
   883  0736  3901               	andlw	1
   884  0737  127D               	bcf	_portC,4
   885  0738  1D03               	skipz
   886  0739  167D               	bsf	_portC,4
   887                           
   888                           ;IO_Controls.h: 115: PORTC=portC.portCByte;
   889  073A  087D               	movf	_portC,w
   890  073B  008E               	movwf	14	;volatile
   891  073C  0008               	return
   892  073D                     __end_of_PIN6:	
   893                           ;IO_Controls.h: 116: return;
   894                           
   895                           
   896                           	psect	text5
   897  0721                     __ptext5:	
   898 ;; *************** function _PIN5 *****************
   899 ;; Defined at:
   900 ;;		line 119 in file "IO_Controls.h"
   901 ;; Parameters:    Size  Location     Type
   902 ;;  OnOff           1    wreg     unsigned char 
   903 ;; Auto vars:     Size  Location     Type
   904 ;;  OnOff           1    1[COMMON] unsigned char 
   905 ;; Return value:  Size  Location     Type
   906 ;;                  1    wreg      void 
   907 ;; Registers used:
   908 ;;		wreg, status,2
   909 ;; Tracked objects:
   910 ;;		On entry : 0/0
   911 ;;		On exit  : 0/0
   912 ;;		Unchanged: 0/0
   913 ;; Data sizes:     COMMON   BANK0   BANK1
   914 ;;      Params:         0       0       0
   915 ;;      Locals:         1       0       0
   916 ;;      Temps:          1       0       0
   917 ;;      Totals:         2       0       0
   918 ;;Total ram usage:        2 bytes
   919 ;; Hardware stack levels used:    1
   920 ;; This function calls:
   921 ;;		Nothing
   922 ;; This function is called by:
   923 ;;		_main
   924 ;; This function uses a non-reentrant model
   925 ;;
   926                           
   927                           
   928                           ;psect for function _PIN5
   929  0721                     _PIN5:	
   930                           
   931                           ;incstack = 0
   932                           ; Regs used in _PIN5: [wreg+status,2]
   933                           ;PIN5@OnOff stored from wreg
   934  0721  00F1               	movwf	PIN5@OnOff
   935                           
   936                           ;IO_Controls.h: 121: portC.portCByte = PORTC;
   937  0722  0020               	movlb	0	; select bank0
   938  0723  080E               	movf	14,w	;volatile
   939  0724  00F0               	movwf	??_PIN5
   940  0725  0870               	movf	??_PIN5,w
   941  0726  00FD               	movwf	_portC
   942                           
   943                           ;IO_Controls.h: 122: portC.bits.Pin5 = OnOff;
   944  0727  0871               	movf	PIN5@OnOff,w
   945  0728  3901               	andlw	1
   946  0729  12FD               	bcf	_portC,5
   947  072A  1D03               	skipz
   948  072B  16FD               	bsf	_portC,5
   949                           
   950                           ;IO_Controls.h: 123: PORTC=portC.portCByte;
   951  072C  087D               	movf	_portC,w
   952  072D  008E               	movwf	14	;volatile
   953  072E  0008               	return
   954  072F                     __end_of_PIN5:	
   955                           ;IO_Controls.h: 124: return;
   956                           
   957                           
   958                           	psect	text6
   959  0750                     __ptext6:	
   960 ;; *************** function _InitialisePorts *****************
   961 ;; Defined at:
   962 ;;		line 51 in file "IO_Controls.h"
   963 ;; Parameters:    Size  Location     Type
   964 ;;		None
   965 ;; Auto vars:     Size  Location     Type
   966 ;;		None
   967 ;; Return value:  Size  Location     Type
   968 ;;                  1    wreg      void 
   969 ;; Registers used:
   970 ;;		wreg, status,2
   971 ;; Tracked objects:
   972 ;;		On entry : 0/0
   973 ;;		On exit  : 0/0
   974 ;;		Unchanged: 0/0
   975 ;; Data sizes:     COMMON   BANK0   BANK1
   976 ;;      Params:         0       0       0
   977 ;;      Locals:         0       0       0
   978 ;;      Temps:          0       0       0
   979 ;;      Totals:         0       0       0
   980 ;;Total ram usage:        0 bytes
   981 ;; Hardware stack levels used:    1
   982 ;; This function calls:
   983 ;;		Nothing
   984 ;; This function is called by:
   985 ;;		_main
   986 ;; This function uses a non-reentrant model
   987 ;;
   988                           
   989                           
   990                           ;psect for function _InitialisePorts
   991  0750                     _InitialisePorts:	
   992                           
   993                           ;IO_Controls.h: 53: OPTION_REG = 0b10000000;
   994                           
   995                           ;incstack = 0
   996                           ; Regs used in _InitialisePorts: [wreg+status,2]
   997  0750  3080               	movlw	128
   998  0751  0021               	movlb	1	; select bank1
   999  0752  0095               	movwf	21	;volatile
  1000                           
  1001                           ;IO_Controls.h: 70: portA.portAByte = 0;
  1002  0753  0020               	movlb	0	; select bank0
  1003  0754  01A0               	clrf	_portA
  1004                           
  1005                           ;IO_Controls.h: 71: LATA = 0;
  1006  0755  0022               	movlb	2	; select bank2
  1007  0756  018C               	clrf	12	;volatile
  1008                           
  1009                           ;IO_Controls.h: 72: TRISA = 0b00011000;
  1010  0757  3018               	movlw	24
  1011  0758  0021               	movlb	1	; select bank1
  1012  0759  008C               	movwf	12	;volatile
  1013                           
  1014                           ;IO_Controls.h: 74: ANSELA = 0b00000000;
  1015  075A  0023               	movlb	3	; select bank3
  1016  075B  018C               	clrf	12	;volatile
  1017                           
  1018                           ;IO_Controls.h: 88: portC.portCByte = 0;
  1019  075C  01FD               	clrf	_portC
  1020                           
  1021                           ;IO_Controls.h: 89: LATC = 0;
  1022  075D  0022               	movlb	2	; select bank2
  1023  075E  018E               	clrf	14	;volatile
  1024                           
  1025                           ;IO_Controls.h: 90: TRISC = 0b00001000;
  1026  075F  3008               	movlw	8
  1027  0760  0021               	movlb	1	; select bank1
  1028  0761  008E               	movwf	14	;volatile
  1029                           
  1030                           ;IO_Controls.h: 92: ANSELC = 0b00001000;
  1031  0762  3008               	movlw	8
  1032  0763  0023               	movlb	3	; select bank3
  1033  0764  008E               	movwf	14	;volatile
  1034  0765  0008               	return
  1035  0766                     __end_of_InitialisePorts:	
  1036                           ;IO_Controls.h: 98: return;
  1037                           
  1038                           
  1039                           	psect	text7
  1040  073D                     __ptext7:	
  1041 ;; *************** function _InitialiseADC *****************
  1042 ;; Defined at:
  1043 ;;		line 16 in file "ADC.h"
  1044 ;; Parameters:    Size  Location     Type
  1045 ;;		None
  1046 ;; Auto vars:     Size  Location     Type
  1047 ;;		None
  1048 ;; Return value:  Size  Location     Type
  1049 ;;                  1    wreg      void 
  1050 ;; Registers used:
  1051 ;;		wreg, status,2, status,0
  1052 ;; Tracked objects:
  1053 ;;		On entry : 0/0
  1054 ;;		On exit  : 0/0
  1055 ;;		Unchanged: 0/0
  1056 ;; Data sizes:     COMMON   BANK0   BANK1
  1057 ;;      Params:         0       0       0
  1058 ;;      Locals:         0       0       0
  1059 ;;      Temps:          0       0       0
  1060 ;;      Totals:         0       0       0
  1061 ;;Total ram usage:        0 bytes
  1062 ;; Hardware stack levels used:    1
  1063 ;; This function calls:
  1064 ;;		Nothing
  1065 ;; This function is called by:
  1066 ;;		_main
  1067 ;; This function uses a non-reentrant model
  1068 ;;
  1069                           
  1070                           
  1071                           ;psect for function _InitialiseADC
  1072  073D                     _InitialiseADC:	
  1073                           
  1074                           ;ADC.h: 18: ADCON0bits.CHS = 0b0111;
  1075                           
  1076                           ;incstack = 0
  1077                           ; Regs used in _InitialiseADC: [wreg+status,2+status,0]
  1078  073D  0021               	movlb	1	; select bank1
  1079  073E  081D               	movf	29,w	;volatile
  1080  073F  3983               	andlw	-125
  1081  0740  381C               	iorlw	28
  1082  0741  009D               	movwf	29	;volatile
  1083                           
  1084                           ;ADC.h: 20: ADFM = 1;
  1085  0742  179E               	bsf	30,7	;volatile
  1086                           
  1087                           ;ADC.h: 21: ADCON1bits.ADCS = 0b000;
  1088  0743  308F               	movlw	-113
  1089  0744  059E               	andwf	30,f	;volatile
  1090                           
  1091                           ;ADC.h: 23: ADCON1bits.ADPREF = 0b011;
  1092  0745  3003               	movlw	3
  1093  0746  049E               	iorwf	30,f	;volatile
  1094                           
  1095                           ;ADC.h: 25: FVRCON = 0b11000010;
  1096  0747  30C2               	movlw	194
  1097  0748  0022               	movlb	2	; select bank2
  1098  0749  0097               	movwf	23	;volatile
  1099                           
  1100                           ;ADC.h: 27: _delay((unsigned long)((10)*(1000000/4000000.0)));
  1101  074A  3200               	nop2	;2 cycle nop
  1102                           
  1103                           ;ADC.h: 28: ADIE=0;
  1104  074B  0021               	movlb	1	; select bank1
  1105  074C  1311               	bcf	17,6	;volatile
  1106                           
  1107                           ;ADC.h: 29: ADON=0;
  1108  074D  101D               	bcf	29,0	;volatile
  1109                           
  1110                           ;ADC.h: 30: GO_nDONE=0;
  1111  074E  109D               	bcf	29,1	;volatile
  1112  074F  0008               	return
  1113  0750                     __end_of_InitialiseADC:	
  1114                           ;ADC.h: 31: return;
  1115                           
  1116                           
  1117                           	psect	text8
  1118  0713                     __ptext8:	
  1119 ;; *************** function _InitUSART *****************
  1120 ;; Defined at:
  1121 ;;		line 43 in file "Usart.h"
  1122 ;; Parameters:    Size  Location     Type
  1123 ;;		None
  1124 ;; Auto vars:     Size  Location     Type
  1125 ;;		None
  1126 ;; Return value:  Size  Location     Type
  1127 ;;                  1    wreg      void 
  1128 ;; Registers used:
  1129 ;;		wreg
  1130 ;; Tracked objects:
  1131 ;;		On entry : 0/0
  1132 ;;		On exit  : 0/0
  1133 ;;		Unchanged: 0/0
  1134 ;; Data sizes:     COMMON   BANK0   BANK1
  1135 ;;      Params:         0       0       0
  1136 ;;      Locals:         0       0       0
  1137 ;;      Temps:          0       0       0
  1138 ;;      Totals:         0       0       0
  1139 ;;Total ram usage:        0 bytes
  1140 ;; Hardware stack levels used:    1
  1141 ;; This function calls:
  1142 ;;		Nothing
  1143 ;; This function is called by:
  1144 ;;		_main
  1145 ;; This function uses a non-reentrant model
  1146 ;;
  1147                           
  1148                           
  1149                           ;psect for function _InitUSART
  1150  0713                     _InitUSART:	
  1151                           
  1152                           ;Usart.h: 46: TXIE=0;
  1153                           
  1154                           ;incstack = 0
  1155                           ; Regs used in _InitUSART: [wreg]
  1156  0713  0021               	movlb	1	; select bank1
  1157  0714  1211               	bcf	17,4	;volatile
  1158                           
  1159                           ;Usart.h: 48: TRISA0 =0;
  1160  0715  100C               	bcf	12,0	;volatile
  1161                           
  1162                           ;Usart.h: 49: TXCKSEL =1;
  1163  0716  0022               	movlb	2	; select bank2
  1164  0717  151D               	bsf	29,2	;volatile
  1165                           
  1166                           ;Usart.h: 50: TXSTAbits.TXEN=1;
  1167  0718  0023               	movlb	3	; select bank3
  1168  0719  169E               	bsf	30,5	;volatile
  1169                           
  1170                           ;Usart.h: 51: RCSTAbits.SPEN =1;
  1171  071A  179D               	bsf	29,7	;volatile
  1172                           
  1173                           ;Usart.h: 54: TXSTAbits.SYNC=0;
  1174  071B  121E               	bcf	30,4	;volatile
  1175                           
  1176                           ;Usart.h: 55: TXSTAbits.BRGH=1;
  1177  071C  151E               	bsf	30,2	;volatile
  1178                           
  1179                           ;Usart.h: 56: BAUDCONbits.BRG16=0;
  1180  071D  119F               	bcf	31,3	;volatile
  1181                           
  1182                           ;Usart.h: 57: SPBRG = 5;
  1183  071E  3005               	movlw	5
  1184  071F  009B               	movwf	27	;volatile
  1185  0720  0008               	return
  1186  0721                     __end_of_InitUSART:	
  1187                           ;Usart.h: 59: return;
  1188                           
  1189  007E                     btemp	set	126	;btemp
  1190  007E                     wtemp0	set	126


Data Sizes:
    Strings     8
    Constant    0
    Data        0
    BSS         2
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      14
    BANK0            80      0       1
    BANK1            16      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 2048
		 -> ROM(CODE[2048]), STR_1(CODE[8]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(COMMON[2]), 


Critical Paths under _main in COMMON

    _main->_printf
    _printf->_putch

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0     381
                                              9 COMMON     4     4      0
                          _InitUSART
                      _InitialiseADC
                    _InitialisePorts
                               _PIN5
                               _PIN6
                            _ReadADC
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              19    17      2     257
                                              1 COMMON     8     6      2
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      15
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ReadADC                                              6     4      2      26
                                              0 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (1) _PIN6                                                 2     2      0      15
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _PIN5                                                 2     2      0      15
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _InitialisePorts                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InitialiseADC                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InitUSART                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _InitUSART
   _InitialiseADC
   _InitialisePorts
   _PIN5
   _PIN6
   _ReadADC
   _printf
     _putch

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              60      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      D       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0       F       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50      0       1       6        1.3%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            10      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               10      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
DATA                 0      0       F       9        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Fri Feb 23 15:44:30 2018

             __CFG_CP$OFF 0000                        l90 076A                        l96 0705  
                     l113 07BE                       l118 07F8                       l139 07BA  
                     l831 07F6                       l815 07CB                       l827 07ED  
                     l781 07A3                       l783 07A5                       l787 07A8  
                     l789 078A                       _GIE 005F                       u115 0775  
                     u177 07DD              __CFG_CPD$OFF 0000               main@chDelay 007A  
            __CFG_BORV$LO 0000                       wreg 0009              __CFG_LVP$OFF 0000  
                    _ADIE 048E                      _ADFM 04F7                      _ADON 04E8  
                    STR_1 070B                      _LATA 010C                      _LATC 010E  
                    _PIN5 0721                      _PIN6 072F                      _TRMT 0CF1  
                    _TXIE 048C                      _TXIF 008C              __CFG_WRT$OFF 0000  
                    _main 07BB                      fsr0h 0005                      indf0 0000  
                    fsr0l 0004                      btemp 007E             __CFG_BOREN$ON 0000  
                    start 0002             __CFG_IESO$OFF 0000    __size_of_InitialiseADC 0013  
         __end_of_ReadADC 0786                     ?_PIN5 0070                     ?_PIN6 0070  
                   ?_main 0070             __CFG_WDTE$OFF 0000                     _SPBRG 019B  
                   _PORTA 000C                     _PORTC 000E                     _TRISA 008C  
                   _TRISC 008E                     _TXREG 019A             __CFG_PWRTE$ON 0000  
          __CFG_FCMEN$OFF 0000                     _portA 0020                     _portC 007D  
                   _putch 0704                     status 0003                     wtemp0 007E  
            __end_of_PIN5 072F              __end_of_PIN6 073D            __CFG_MCLRE$OFF 0000  
         __initialization 07FB              __end_of_main 07FB            ReadADC@adcData 0074  
                  ??_PIN5 0070                    ??_PIN6 0070                    ??_main 0079  
          __CFG_PLLEN$OFF 0000             _InitialiseADC 073D                    _ADRESH 009C  
                  _ADRESL 009B                    _ANSELA 018C                    ?_putch 0070  
                  _ANSELC 018E                    _HFIOFR 04D4        __size_of_InitUSART 000E  
                  _INTCON 000B                    _FVRCON 0117                    _OSCCON 0099  
                  _TRISA0 0460                 ??_ReadADC 0072            __CFG_STVREN$ON 0000  
                  _printf 0786            ?_InitialiseADC 0070                    putch@c 0070  
 __end_of__initialization 07FE            __pcstackCOMMON 0070  __size_of_InitialisePorts 0016  
           __end_of_putch 070B         __end_of_InitUSART 0721                 PIN5@OnOff 0071  
               PIN6@OnOff 0071                   ??_putch 0070                __pbssBANK0 0020  
              __pmaintext 07BB                   ?_printf 0071           ??_InitialiseADC 0070  
                 _TXCKSEL 08EA                   _ReadADC 0766                   __ptext1 0786  
                 __ptext2 0704                   __ptext3 0766                   __ptext4 072F  
                 __ptext5 0721                   __ptext6 0750                   __ptext7 073D  
                 __ptext8 0713           __size_of_printf 0035         ??_InitialisePorts 0070  
    end_of_initialization 07FE                 _RCSTAbits 019D                   printf@c 0078  
                 printf@f 0071          __CFG_FOSC$INTOSC 0000                 _TXSTAbits 019E  
             _BAUDCONbits 019F            __end_of_printf 07BB                 _InitUSART 0713  
     start_initialization 07FB                  ??_printf 0073                ?_InitUSART 0070  
             __pbssCOMMON 007D                 ___latbits 0000                  ?_ReadADC 0070  
         _InitialisePorts 0750     __end_of_InitialiseADC 0750            __size_of_putch 0007  
                _GO_nDONE 04E9                _ADCON0bits 009D                _ADCON1bits 009E  
               main@Vread 007B                printf@flag 0077               ??_InitUSART 0070  
 __end_of_InitialisePorts 0766          __size_of_ReadADC 0020             __size_of_PIN5 000E  
           __size_of_PIN6 000E             __size_of_main 0040          ?_InitialisePorts 0070  
       __CFG_CLKOUTEN$OFF 0000                  printf@ap 0076             __pstringtext1 070B  
           __pstringtext2 0000                _OPTION_REG 0095  
