

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Wed May 02 23:55:12 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F1824
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	stringtext1,global,class=STRCODE,delta=2
     5                           	psect	stringtext2,global,class=STRCODE,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    15                           	psect	text1,local,class=CODE,merge=1,delta=2
    16                           	psect	text2,local,class=CODE,merge=1,delta=2
    17                           	psect	text3,local,class=CODE,merge=1,delta=2
    18                           	psect	text4,local,class=CODE,merge=1,delta=2
    19                           	psect	text5,local,class=CODE,merge=1,delta=2
    20                           	psect	text6,local,class=CODE,merge=1,delta=2
    21                           	psect	text7,local,class=CODE,merge=1,delta=2
    22                           	psect	text8,local,class=CODE,merge=1,delta=2
    23                           	psect	text9,local,class=CODE,merge=1,delta=2,group=2
    24                           	psect	text10,local,class=CODE,merge=1,delta=2,group=2
    25                           	psect	text11,local,class=CODE,merge=1,delta=2,group=2
    26                           	psect	text12,local,class=CODE,merge=1,delta=2,group=2
    27                           	psect	text13,local,class=CODE,merge=1,delta=2,group=2
    28                           	psect	text14,local,class=CODE,merge=1,delta=2
    29                           	psect	text15,local,class=CODE,merge=1,delta=2
    30                           	psect	text16,local,class=CODE,merge=1,delta=2
    31                           	psect	text17,local,class=CODE,merge=1,delta=2
    32                           	psect	text18,local,class=CODE,merge=1,delta=2,group=2
    33                           	psect	text19,local,class=CODE,merge=1,delta=2,group=2
    34                           	psect	text20,local,class=CODE,merge=1,delta=2,group=2
    35                           	psect	text21,local,class=CODE,merge=1,delta=2,group=2
    36                           	psect	text22,local,class=CODE,merge=1,delta=2,group=2
    37                           	psect	text23,local,class=CODE,merge=1,delta=2,group=2
    38                           	psect	text24,local,class=CODE,merge=1,delta=2,group=2
    39                           	psect	text25,local,class=CODE,merge=1,delta=2,group=2
    40                           	psect	text26,local,class=CODE,merge=1,delta=2
    41                           	psect	text27,local,class=CODE,merge=1,delta=2
    42                           	psect	text28,local,class=CODE,merge=1,delta=2
    43                           	psect	text29,local,class=CODE,merge=1,delta=2
    44                           	psect	text30,local,class=CODE,merge=1,delta=2
    45                           	psect	text31,local,class=CODE,merge=1,delta=2
    46                           	psect	text32,local,class=CODE,merge=1,delta=2
    47                           	psect	text33,local,class=CODE,merge=1,delta=2
    48                           	psect	text34,local,class=CODE,merge=1,delta=2
    49                           	psect	text35,local,class=CODE,merge=1,delta=2
    50                           	psect	text36,local,class=CODE,merge=1,delta=2
    51                           	psect	text37,local,class=CODE,merge=1,delta=2
    52                           	psect	intentry,global,class=CODE,delta=2
    53                           	psect	text39,local,class=CODE,merge=1,delta=2
    54                           	psect	text40,local,class=CODE,merge=1,delta=2
    55                           	psect	text41,local,class=CODE,merge=1,delta=2
    56                           	psect	text42,local,class=CODE,merge=1,delta=2
    57                           	dabs	1,0x7E,2
    58  0000                     
    59                           ; Version 1.45
    60                           ; Generated 16/11/2017 GMT
    61                           ; 
    62                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    63                           ; All rights reserved.
    64                           ; 
    65                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    66                           ; 
    67                           ; Redistribution and use in source and binary forms, with or without modification, are
    68                           ; permitted provided that the following conditions are met:
    69                           ; 
    70                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    71                           ;        conditions and the following disclaimer.
    72                           ; 
    73                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    74                           ;        of conditions and the following disclaimer in the documentation and/or other
    75                           ;        materials provided with the distribution.
    76                           ; 
    77                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    78                           ;        software without specific prior written permission.
    79                           ; 
    80                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    81                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    82                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    83                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    84                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    85                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    86                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    87                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    88                           ; 
    89                           ; 
    90                           ; Code-generator required, PIC16F1824 Definitions
    91                           ; 
    92                           ; SFR Addresses
    93  0000                     	;# 
    94  0001                     	;# 
    95  0002                     	;# 
    96  0003                     	;# 
    97  0004                     	;# 
    98  0005                     	;# 
    99  0006                     	;# 
   100  0007                     	;# 
   101  0008                     	;# 
   102  0009                     	;# 
   103  000A                     	;# 
   104  000B                     	;# 
   105  000C                     	;# 
   106  000E                     	;# 
   107  0011                     	;# 
   108  0012                     	;# 
   109  0013                     	;# 
   110  0015                     	;# 
   111  0016                     	;# 
   112  0016                     	;# 
   113  0017                     	;# 
   114  0018                     	;# 
   115  0019                     	;# 
   116  001A                     	;# 
   117  001B                     	;# 
   118  001C                     	;# 
   119  001E                     	;# 
   120  001F                     	;# 
   121  008C                     	;# 
   122  008E                     	;# 
   123  0091                     	;# 
   124  0092                     	;# 
   125  0093                     	;# 
   126  0095                     	;# 
   127  0096                     	;# 
   128  0097                     	;# 
   129  0098                     	;# 
   130  0099                     	;# 
   131  009A                     	;# 
   132  009B                     	;# 
   133  009B                     	;# 
   134  009C                     	;# 
   135  009D                     	;# 
   136  009E                     	;# 
   137  010C                     	;# 
   138  010E                     	;# 
   139  0111                     	;# 
   140  0112                     	;# 
   141  0113                     	;# 
   142  0114                     	;# 
   143  0115                     	;# 
   144  0116                     	;# 
   145  0117                     	;# 
   146  0118                     	;# 
   147  0119                     	;# 
   148  011A                     	;# 
   149  011B                     	;# 
   150  011D                     	;# 
   151  011E                     	;# 
   152  018C                     	;# 
   153  018E                     	;# 
   154  0191                     	;# 
   155  0191                     	;# 
   156  0192                     	;# 
   157  0193                     	;# 
   158  0193                     	;# 
   159  0193                     	;# 
   160  0194                     	;# 
   161  0195                     	;# 
   162  0196                     	;# 
   163  0199                     	;# 
   164  019A                     	;# 
   165  019B                     	;# 
   166  019B                     	;# 
   167  019B                     	;# 
   168  019B                     	;# 
   169  019C                     	;# 
   170  019C                     	;# 
   171  019D                     	;# 
   172  019E                     	;# 
   173  019F                     	;# 
   174  020C                     	;# 
   175  020E                     	;# 
   176  0211                     	;# 
   177  0211                     	;# 
   178  0212                     	;# 
   179  0212                     	;# 
   180  0213                     	;# 
   181  0213                     	;# 
   182  0214                     	;# 
   183  0214                     	;# 
   184  0215                     	;# 
   185  0215                     	;# 
   186  0215                     	;# 
   187  0215                     	;# 
   188  0216                     	;# 
   189  0216                     	;# 
   190  0217                     	;# 
   191  0217                     	;# 
   192  0291                     	;# 
   193  0291                     	;# 
   194  0292                     	;# 
   195  0293                     	;# 
   196  0294                     	;# 
   197  0295                     	;# 
   198  0295                     	;# 
   199  0296                     	;# 
   200  0298                     	;# 
   201  0298                     	;# 
   202  0299                     	;# 
   203  029A                     	;# 
   204  029B                     	;# 
   205  029C                     	;# 
   206  029D                     	;# 
   207  029E                     	;# 
   208  029E                     	;# 
   209  0311                     	;# 
   210  0311                     	;# 
   211  0312                     	;# 
   212  0313                     	;# 
   213  0318                     	;# 
   214  0318                     	;# 
   215  0319                     	;# 
   216  031A                     	;# 
   217  038C                     	;# 
   218  038E                     	;# 
   219  0391                     	;# 
   220  0392                     	;# 
   221  0393                     	;# 
   222  039A                     	;# 
   223  039C                     	;# 
   224  039D                     	;# 
   225  039E                     	;# 
   226  039F                     	;# 
   227  0415                     	;# 
   228  0416                     	;# 
   229  0417                     	;# 
   230  041C                     	;# 
   231  041D                     	;# 
   232  041E                     	;# 
   233  0FE4                     	;# 
   234  0FE5                     	;# 
   235  0FE6                     	;# 
   236  0FE7                     	;# 
   237  0FE8                     	;# 
   238  0FE9                     	;# 
   239  0FEA                     	;# 
   240  0FEB                     	;# 
   241  0FED                     	;# 
   242  0FEE                     	;# 
   243  0FEF                     	;# 
   244  0000                     	;# 
   245  0001                     	;# 
   246  0002                     	;# 
   247  0003                     	;# 
   248  0004                     	;# 
   249  0005                     	;# 
   250  0006                     	;# 
   251  0007                     	;# 
   252  0008                     	;# 
   253  0009                     	;# 
   254  000A                     	;# 
   255  000B                     	;# 
   256  000C                     	;# 
   257  000E                     	;# 
   258  0011                     	;# 
   259  0012                     	;# 
   260  0013                     	;# 
   261  0015                     	;# 
   262  0016                     	;# 
   263  0016                     	;# 
   264  0017                     	;# 
   265  0018                     	;# 
   266  0019                     	;# 
   267  001A                     	;# 
   268  001B                     	;# 
   269  001C                     	;# 
   270  001E                     	;# 
   271  001F                     	;# 
   272  008C                     	;# 
   273  008E                     	;# 
   274  0091                     	;# 
   275  0092                     	;# 
   276  0093                     	;# 
   277  0095                     	;# 
   278  0096                     	;# 
   279  0097                     	;# 
   280  0098                     	;# 
   281  0099                     	;# 
   282  009A                     	;# 
   283  009B                     	;# 
   284  009B                     	;# 
   285  009C                     	;# 
   286  009D                     	;# 
   287  009E                     	;# 
   288  010C                     	;# 
   289  010E                     	;# 
   290  0111                     	;# 
   291  0112                     	;# 
   292  0113                     	;# 
   293  0114                     	;# 
   294  0115                     	;# 
   295  0116                     	;# 
   296  0117                     	;# 
   297  0118                     	;# 
   298  0119                     	;# 
   299  011A                     	;# 
   300  011B                     	;# 
   301  011D                     	;# 
   302  011E                     	;# 
   303  018C                     	;# 
   304  018E                     	;# 
   305  0191                     	;# 
   306  0191                     	;# 
   307  0192                     	;# 
   308  0193                     	;# 
   309  0193                     	;# 
   310  0193                     	;# 
   311  0194                     	;# 
   312  0195                     	;# 
   313  0196                     	;# 
   314  0199                     	;# 
   315  019A                     	;# 
   316  019B                     	;# 
   317  019B                     	;# 
   318  019B                     	;# 
   319  019B                     	;# 
   320  019C                     	;# 
   321  019C                     	;# 
   322  019D                     	;# 
   323  019E                     	;# 
   324  019F                     	;# 
   325  020C                     	;# 
   326  020E                     	;# 
   327  0211                     	;# 
   328  0211                     	;# 
   329  0212                     	;# 
   330  0212                     	;# 
   331  0213                     	;# 
   332  0213                     	;# 
   333  0214                     	;# 
   334  0214                     	;# 
   335  0215                     	;# 
   336  0215                     	;# 
   337  0215                     	;# 
   338  0215                     	;# 
   339  0216                     	;# 
   340  0216                     	;# 
   341  0217                     	;# 
   342  0217                     	;# 
   343  0291                     	;# 
   344  0291                     	;# 
   345  0292                     	;# 
   346  0293                     	;# 
   347  0294                     	;# 
   348  0295                     	;# 
   349  0295                     	;# 
   350  0296                     	;# 
   351  0298                     	;# 
   352  0298                     	;# 
   353  0299                     	;# 
   354  029A                     	;# 
   355  029B                     	;# 
   356  029C                     	;# 
   357  029D                     	;# 
   358  029E                     	;# 
   359  029E                     	;# 
   360  0311                     	;# 
   361  0311                     	;# 
   362  0312                     	;# 
   363  0313                     	;# 
   364  0318                     	;# 
   365  0318                     	;# 
   366  0319                     	;# 
   367  031A                     	;# 
   368  038C                     	;# 
   369  038E                     	;# 
   370  0391                     	;# 
   371  0392                     	;# 
   372  0393                     	;# 
   373  039A                     	;# 
   374  039C                     	;# 
   375  039D                     	;# 
   376  039E                     	;# 
   377  039F                     	;# 
   378  0415                     	;# 
   379  0416                     	;# 
   380  0417                     	;# 
   381  041C                     	;# 
   382  041D                     	;# 
   383  041E                     	;# 
   384  0FE4                     	;# 
   385  0FE5                     	;# 
   386  0FE6                     	;# 
   387  0FE7                     	;# 
   388  0FE8                     	;# 
   389  0FE9                     	;# 
   390  0FEA                     	;# 
   391  0FEB                     	;# 
   392  0FED                     	;# 
   393  0FEE                     	;# 
   394  0FEF                     	;# 
   395  0000                     	;# 
   396  0001                     	;# 
   397  0002                     	;# 
   398  0003                     	;# 
   399  0004                     	;# 
   400  0005                     	;# 
   401  0006                     	;# 
   402  0007                     	;# 
   403  0008                     	;# 
   404  0009                     	;# 
   405  000A                     	;# 
   406  000B                     	;# 
   407  000C                     	;# 
   408  000E                     	;# 
   409  0011                     	;# 
   410  0012                     	;# 
   411  0013                     	;# 
   412  0015                     	;# 
   413  0016                     	;# 
   414  0016                     	;# 
   415  0017                     	;# 
   416  0018                     	;# 
   417  0019                     	;# 
   418  001A                     	;# 
   419  001B                     	;# 
   420  001C                     	;# 
   421  001E                     	;# 
   422  001F                     	;# 
   423  008C                     	;# 
   424  008E                     	;# 
   425  0091                     	;# 
   426  0092                     	;# 
   427  0093                     	;# 
   428  0095                     	;# 
   429  0096                     	;# 
   430  0097                     	;# 
   431  0098                     	;# 
   432  0099                     	;# 
   433  009A                     	;# 
   434  009B                     	;# 
   435  009B                     	;# 
   436  009C                     	;# 
   437  009D                     	;# 
   438  009E                     	;# 
   439  010C                     	;# 
   440  010E                     	;# 
   441  0111                     	;# 
   442  0112                     	;# 
   443  0113                     	;# 
   444  0114                     	;# 
   445  0115                     	;# 
   446  0116                     	;# 
   447  0117                     	;# 
   448  0118                     	;# 
   449  0119                     	;# 
   450  011A                     	;# 
   451  011B                     	;# 
   452  011D                     	;# 
   453  011E                     	;# 
   454  018C                     	;# 
   455  018E                     	;# 
   456  0191                     	;# 
   457  0191                     	;# 
   458  0192                     	;# 
   459  0193                     	;# 
   460  0193                     	;# 
   461  0193                     	;# 
   462  0194                     	;# 
   463  0195                     	;# 
   464  0196                     	;# 
   465  0199                     	;# 
   466  019A                     	;# 
   467  019B                     	;# 
   468  019B                     	;# 
   469  019B                     	;# 
   470  019B                     	;# 
   471  019C                     	;# 
   472  019C                     	;# 
   473  019D                     	;# 
   474  019E                     	;# 
   475  019F                     	;# 
   476  020C                     	;# 
   477  020E                     	;# 
   478  0211                     	;# 
   479  0211                     	;# 
   480  0212                     	;# 
   481  0212                     	;# 
   482  0213                     	;# 
   483  0213                     	;# 
   484  0214                     	;# 
   485  0214                     	;# 
   486  0215                     	;# 
   487  0215                     	;# 
   488  0215                     	;# 
   489  0215                     	;# 
   490  0216                     	;# 
   491  0216                     	;# 
   492  0217                     	;# 
   493  0217                     	;# 
   494  0291                     	;# 
   495  0291                     	;# 
   496  0292                     	;# 
   497  0293                     	;# 
   498  0294                     	;# 
   499  0295                     	;# 
   500  0295                     	;# 
   501  0296                     	;# 
   502  0298                     	;# 
   503  0298                     	;# 
   504  0299                     	;# 
   505  029A                     	;# 
   506  029B                     	;# 
   507  029C                     	;# 
   508  029D                     	;# 
   509  029E                     	;# 
   510  029E                     	;# 
   511  0311                     	;# 
   512  0311                     	;# 
   513  0312                     	;# 
   514  0313                     	;# 
   515  0318                     	;# 
   516  0318                     	;# 
   517  0319                     	;# 
   518  031A                     	;# 
   519  038C                     	;# 
   520  038E                     	;# 
   521  0391                     	;# 
   522  0392                     	;# 
   523  0393                     	;# 
   524  039A                     	;# 
   525  039C                     	;# 
   526  039D                     	;# 
   527  039E                     	;# 
   528  039F                     	;# 
   529  0415                     	;# 
   530  0416                     	;# 
   531  0417                     	;# 
   532  041C                     	;# 
   533  041D                     	;# 
   534  041E                     	;# 
   535  0FE4                     	;# 
   536  0FE5                     	;# 
   537  0FE6                     	;# 
   538  0FE7                     	;# 
   539  0FE8                     	;# 
   540  0FE9                     	;# 
   541  0FEA                     	;# 
   542  0FEB                     	;# 
   543  0FED                     	;# 
   544  0FEE                     	;# 
   545  0FEF                     	;# 
   546  0000                     	;# 
   547  0001                     	;# 
   548  0002                     	;# 
   549  0003                     	;# 
   550  0004                     	;# 
   551  0005                     	;# 
   552  0006                     	;# 
   553  0007                     	;# 
   554  0008                     	;# 
   555  0009                     	;# 
   556  000A                     	;# 
   557  000B                     	;# 
   558  000C                     	;# 
   559  000E                     	;# 
   560  0011                     	;# 
   561  0012                     	;# 
   562  0013                     	;# 
   563  0015                     	;# 
   564  0016                     	;# 
   565  0016                     	;# 
   566  0017                     	;# 
   567  0018                     	;# 
   568  0019                     	;# 
   569  001A                     	;# 
   570  001B                     	;# 
   571  001C                     	;# 
   572  001E                     	;# 
   573  001F                     	;# 
   574  008C                     	;# 
   575  008E                     	;# 
   576  0091                     	;# 
   577  0092                     	;# 
   578  0093                     	;# 
   579  0095                     	;# 
   580  0096                     	;# 
   581  0097                     	;# 
   582  0098                     	;# 
   583  0099                     	;# 
   584  009A                     	;# 
   585  009B                     	;# 
   586  009B                     	;# 
   587  009C                     	;# 
   588  009D                     	;# 
   589  009E                     	;# 
   590  010C                     	;# 
   591  010E                     	;# 
   592  0111                     	;# 
   593  0112                     	;# 
   594  0113                     	;# 
   595  0114                     	;# 
   596  0115                     	;# 
   597  0116                     	;# 
   598  0117                     	;# 
   599  0118                     	;# 
   600  0119                     	;# 
   601  011A                     	;# 
   602  011B                     	;# 
   603  011D                     	;# 
   604  011E                     	;# 
   605  018C                     	;# 
   606  018E                     	;# 
   607  0191                     	;# 
   608  0191                     	;# 
   609  0192                     	;# 
   610  0193                     	;# 
   611  0193                     	;# 
   612  0193                     	;# 
   613  0194                     	;# 
   614  0195                     	;# 
   615  0196                     	;# 
   616  0199                     	;# 
   617  019A                     	;# 
   618  019B                     	;# 
   619  019B                     	;# 
   620  019B                     	;# 
   621  019B                     	;# 
   622  019C                     	;# 
   623  019C                     	;# 
   624  019D                     	;# 
   625  019E                     	;# 
   626  019F                     	;# 
   627  020C                     	;# 
   628  020E                     	;# 
   629  0211                     	;# 
   630  0211                     	;# 
   631  0212                     	;# 
   632  0212                     	;# 
   633  0213                     	;# 
   634  0213                     	;# 
   635  0214                     	;# 
   636  0214                     	;# 
   637  0215                     	;# 
   638  0215                     	;# 
   639  0215                     	;# 
   640  0215                     	;# 
   641  0216                     	;# 
   642  0216                     	;# 
   643  0217                     	;# 
   644  0217                     	;# 
   645  0291                     	;# 
   646  0291                     	;# 
   647  0292                     	;# 
   648  0293                     	;# 
   649  0294                     	;# 
   650  0295                     	;# 
   651  0295                     	;# 
   652  0296                     	;# 
   653  0298                     	;# 
   654  0298                     	;# 
   655  0299                     	;# 
   656  029A                     	;# 
   657  029B                     	;# 
   658  029C                     	;# 
   659  029D                     	;# 
   660  029E                     	;# 
   661  029E                     	;# 
   662  0311                     	;# 
   663  0311                     	;# 
   664  0312                     	;# 
   665  0313                     	;# 
   666  0318                     	;# 
   667  0318                     	;# 
   668  0319                     	;# 
   669  031A                     	;# 
   670  038C                     	;# 
   671  038E                     	;# 
   672  0391                     	;# 
   673  0392                     	;# 
   674  0393                     	;# 
   675  039A                     	;# 
   676  039C                     	;# 
   677  039D                     	;# 
   678  039E                     	;# 
   679  039F                     	;# 
   680  0415                     	;# 
   681  0416                     	;# 
   682  0417                     	;# 
   683  041C                     	;# 
   684  041D                     	;# 
   685  041E                     	;# 
   686  0FE4                     	;# 
   687  0FE5                     	;# 
   688  0FE6                     	;# 
   689  0FE7                     	;# 
   690  0FE8                     	;# 
   691  0FE9                     	;# 
   692  0FEA                     	;# 
   693  0FEB                     	;# 
   694  0FED                     	;# 
   695  0FEE                     	;# 
   696  0FEF                     	;# 
   697  0000                     	;# 
   698  0001                     	;# 
   699  0002                     	;# 
   700  0003                     	;# 
   701  0004                     	;# 
   702  0005                     	;# 
   703  0006                     	;# 
   704  0007                     	;# 
   705  0008                     	;# 
   706  0009                     	;# 
   707  000A                     	;# 
   708  000B                     	;# 
   709  000C                     	;# 
   710  000E                     	;# 
   711  0011                     	;# 
   712  0012                     	;# 
   713  0013                     	;# 
   714  0015                     	;# 
   715  0016                     	;# 
   716  0016                     	;# 
   717  0017                     	;# 
   718  0018                     	;# 
   719  0019                     	;# 
   720  001A                     	;# 
   721  001B                     	;# 
   722  001C                     	;# 
   723  001E                     	;# 
   724  001F                     	;# 
   725  008C                     	;# 
   726  008E                     	;# 
   727  0091                     	;# 
   728  0092                     	;# 
   729  0093                     	;# 
   730  0095                     	;# 
   731  0096                     	;# 
   732  0097                     	;# 
   733  0098                     	;# 
   734  0099                     	;# 
   735  009A                     	;# 
   736  009B                     	;# 
   737  009B                     	;# 
   738  009C                     	;# 
   739  009D                     	;# 
   740  009E                     	;# 
   741  010C                     	;# 
   742  010E                     	;# 
   743  0111                     	;# 
   744  0112                     	;# 
   745  0113                     	;# 
   746  0114                     	;# 
   747  0115                     	;# 
   748  0116                     	;# 
   749  0117                     	;# 
   750  0118                     	;# 
   751  0119                     	;# 
   752  011A                     	;# 
   753  011B                     	;# 
   754  011D                     	;# 
   755  011E                     	;# 
   756  018C                     	;# 
   757  018E                     	;# 
   758  0191                     	;# 
   759  0191                     	;# 
   760  0192                     	;# 
   761  0193                     	;# 
   762  0193                     	;# 
   763  0193                     	;# 
   764  0194                     	;# 
   765  0195                     	;# 
   766  0196                     	;# 
   767  0199                     	;# 
   768  019A                     	;# 
   769  019B                     	;# 
   770  019B                     	;# 
   771  019B                     	;# 
   772  019B                     	;# 
   773  019C                     	;# 
   774  019C                     	;# 
   775  019D                     	;# 
   776  019E                     	;# 
   777  019F                     	;# 
   778  020C                     	;# 
   779  020E                     	;# 
   780  0211                     	;# 
   781  0211                     	;# 
   782  0212                     	;# 
   783  0212                     	;# 
   784  0213                     	;# 
   785  0213                     	;# 
   786  0214                     	;# 
   787  0214                     	;# 
   788  0215                     	;# 
   789  0215                     	;# 
   790  0215                     	;# 
   791  0215                     	;# 
   792  0216                     	;# 
   793  0216                     	;# 
   794  0217                     	;# 
   795  0217                     	;# 
   796  0291                     	;# 
   797  0291                     	;# 
   798  0292                     	;# 
   799  0293                     	;# 
   800  0294                     	;# 
   801  0295                     	;# 
   802  0295                     	;# 
   803  0296                     	;# 
   804  0298                     	;# 
   805  0298                     	;# 
   806  0299                     	;# 
   807  029A                     	;# 
   808  029B                     	;# 
   809  029C                     	;# 
   810  029D                     	;# 
   811  029E                     	;# 
   812  029E                     	;# 
   813  0311                     	;# 
   814  0311                     	;# 
   815  0312                     	;# 
   816  0313                     	;# 
   817  0318                     	;# 
   818  0318                     	;# 
   819  0319                     	;# 
   820  031A                     	;# 
   821  038C                     	;# 
   822  038E                     	;# 
   823  0391                     	;# 
   824  0392                     	;# 
   825  0393                     	;# 
   826  039A                     	;# 
   827  039C                     	;# 
   828  039D                     	;# 
   829  039E                     	;# 
   830  039F                     	;# 
   831  0415                     	;# 
   832  0416                     	;# 
   833  0417                     	;# 
   834  041C                     	;# 
   835  041D                     	;# 
   836  041E                     	;# 
   837  0FE4                     	;# 
   838  0FE5                     	;# 
   839  0FE6                     	;# 
   840  0FE7                     	;# 
   841  0FE8                     	;# 
   842  0FE9                     	;# 
   843  0FEA                     	;# 
   844  0FEB                     	;# 
   845  0FED                     	;# 
   846  0FEE                     	;# 
   847  0FEF                     	;# 
   848                           
   849                           	psect	stringtext1
   850  0800                     __pstringtext1:	
   851  0800                     _dpowers:	
   852  0800  3401               	retlw	1
   853  0801  3400               	retlw	0
   854  0802  340A               	retlw	10
   855  0803  3400               	retlw	0
   856  0804  3464               	retlw	100
   857  0805  3400               	retlw	0
   858  0806  34E8               	retlw	232
   859  0807  3403               	retlw	3
   860  0808  3410               	retlw	16
   861  0809  3427               	retlw	39
   862  080A                     __end_of_dpowers:	
   863  0016                     _TMR1L	set	22
   864  0017                     _TMR1H	set	23
   865  0019                     _T1GCON	set	25
   866  0018                     _T1CON	set	24
   867  000C                     _PORTA	set	12
   868  000E                     _PORTC	set	14
   869  0011                     _PIR1bits	set	17
   870  000C                     _PORTAbits	set	12
   871  0018                     _T1CONbits	set	24
   872  000B                     _INTCONbits	set	11
   873  000B                     _INTCON	set	11
   874  008C                     _TXIF	set	140
   875  00C0                     _TMR1ON	set	192
   876  008E                     _TRISC	set	142
   877  008C                     _TRISA	set	140
   878  0095                     _OPTION_REG	set	149
   879  008C                     _TRISAbits	set	140
   880  009B                     _ADRESL	set	155
   881  009C                     _ADRESH	set	156
   882  009E                     _ADCON1bits	set	158
   883  009D                     _ADCON0bits	set	157
   884  0091                     _PIE1bits	set	145
   885  0099                     _OSCCON	set	153
   886  04E9                     _GO_nDONE	set	1257
   887  048E                     _ADIE	set	1166
   888  04F7                     _ADFM	set	1271
   889  04E8                     _ADON	set	1256
   890  04D4                     _HFIOFR	set	1236
   891  010E                     _LATC	set	270
   892  010C                     _LATA	set	268
   893  011D                     _APFCON0bits	set	285
   894  0117                     _FVRCON	set	279
   895  018E                     _ANSELC	set	398
   896  018C                     _ANSELA	set	396
   897  019A                     _TXREG	set	410
   898  018C                     _ANSELAbits	set	396
   899  019B                     _SPBRG	set	411
   900  019F                     _BAUDCONbits	set	415
   901  019E                     _TXSTAbits	set	414
   902  0199                     _RCREG	set	409
   903  019D                     _RCSTAbits	set	413
   904  0CF1                     _TRMT	set	3313
   905  0391                     _IOCAPbits	set	913
   906  0393                     _IOCAFbits	set	915
   907  080A                     STR_1:	
   908  080A  3425               	retlw	37	;'%'
   909  080B  3464               	retlw	100	;'d'
   910  080C  340A               	retlw	10
   911  080D  3400               	retlw	0
   912                           
   913                           	psect	stringtext2
   914  0000                     __pstringtext2:	
   915                           
   916                           ; #config settings
   917  0000                     
   918                           	psect	cinit
   919  0074                     start_initialization:	
   920  0074                     __initialization:	
   921                           
   922                           ; Clear objects allocated to COMMON
   923  0074  01F0               	clrf	__pbssCOMMON& (0+127)
   924  0075  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
   925  0076  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
   926  0077  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
   927  0078  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
   928                           
   929                           ; Clear objects allocated to BANK0
   930  0079  3058               	movlw	low __pbssBANK0
   931  007A  0084               	movwf	4
   932  007B  3000               	movlw	high __pbssBANK0
   933  007C  0085               	movwf	5
   934  007D  3018               	movlw	24
   935  007E  318E  26B5  3180   	fcall	clear_ram0
   936                           
   937                           ; Clear objects allocated to BANK1
   938  0081  30A0               	movlw	low __pbssBANK1
   939  0082  0084               	movwf	4
   940  0083  3000               	movlw	high __pbssBANK1
   941  0084  0085               	movwf	5
   942  0085  302E               	movlw	46
   943  0086  318E  26B5         	fcall	clear_ram0
   944  0088                     end_of_initialization:	
   945                           ;End of C runtime variable initialization code
   946                           
   947  0088                     __end_of__initialization:	
   948  0088  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
   949  0089  0020               	movlb	0
   950  008A  3185  2DC3         	ljmp	_main	;jump to C main() function
   951                           
   952                           	psect	bssCOMMON
   953  0070                     __pbssCOMMON:	
   954  0070                     _ADC_Test:	
   955  0070                     	ds	2
   956  0072                     _ptr:	
   957  0072                     	ds	1
   958  0073                     _portC:	
   959  0073                     	ds	1
   960  0074                     _portA:	
   961  0074                     	ds	1
   962                           
   963                           	psect	bssBANK0
   964  0058                     __pbssBANK0:	
   965  0058                     _aveTmr1Val:	
   966  0058                     	ds	4
   967  005C                     _temp_time:	
   968  005C                     	ds	2
   969  005E                     _NegCycle:	
   970  005E                     	ds	2
   971  0060                     _PosCycle:	
   972  0060                     	ds	2
   973  0062                     _tmr1Start:	
   974  0062                     	ds	2
   975  0064                     _tmr1Samples:	
   976  0064                     	ds	2
   977  0066                     _tmr1StartFlag:	
   978  0066                     	ds	2
   979  0068                     _adcSample:	
   980  0068                     	ds	2
   981  006A                     _txByte:	
   982  006A                     	ds	1
   983  006B                     _rxByte:	
   984  006B                     	ds	1
   985  006C                     _PoW:	
   986  006C                     	ds	4
   987                           
   988                           	psect	bssBANK1
   989  00A0                     __pbssBANK1:	
   990  00A0                     _Tmr1Val_Ms:	
   991  00A0                     	ds	4
   992  00A4                     _tmr1Val:	
   993  00A4                     	ds	4
   994  00A8                     _time:	
   995  00A8                     	ds	2
   996  00AA                     _cycles:	
   997  00AA                     	ds	2
   998  00AC                     _rxFlag:	
   999  00AC                     	ds	2
  1000  00AE                     _SCR_On:	
  1001  00AE                     	ds	2
  1002  00B0                     _mainTest:	
  1003  00B0                     	ds	2
  1004  00B2                     _sampleVal:	
  1005  00B2                     	ds	2
  1006  00B4                     _intData:	
  1007  00B4                     	ds	2
  1008  00B6                     _previousADCsample:	
  1009  00B6                     	ds	2
  1010  00B8                     _adcData:	
  1011  00B8                     	ds	2
  1012  00BA                     _rxArray:	
  1013  00BA                     	ds	20
  1014                           
  1015                           	psect	clrtext
  1016  0EB5                     clear_ram0:	
  1017                           ;	Called with FSR0 containing the base address, and
  1018                           ;	WREG with the size to clear
  1019                           
  1020  0EB5  0064               	clrwdt	;clear the watchdog before getting into this loop
  1021  0EB6                     clrloop0:	
  1022  0EB6  0180               	clrf	0	;clear RAM location pointed to by FSR
  1023  0EB7  3101               	addfsr 0,1
  1024  0EB8  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1025  0EB9  2EB6               	goto	clrloop0	;have we reached the end yet?
  1026  0EBA  3400               	retlw	0	;all done for this memory range, return
  1027                           
  1028                           	psect	cstackBANK1
  1029  00CE                     __pcstackBANK1:	
  1030  00CE                     ??_main:	
  1031                           
  1032                           ; 1 bytes @ 0x0
  1033  00CE                     	ds	1
  1034  00CF                     main@i:	
  1035                           
  1036                           ; 2 bytes @ 0x1
  1037  00CF                     	ds	2
  1038                           
  1039                           	psect	cstackCOMMON
  1040  0075                     __pcstackCOMMON:	
  1041  0075                     ?_isdigit:	
  1042  0075                     ?_initPIC:	
  1043                           ; 1 bit 
  1044                           
  1045  0075                     ?_ToggleGLED:	
  1046                           ; 1 bytes @ 0x0
  1047                           
  1048  0075                     ?_pi3Connect:	
  1049                           ; 1 bytes @ 0x0
  1050                           
  1051  0075                     ?_verifyACSignal:	
  1052                           ; 1 bytes @ 0x0
  1053                           
  1054  0075                     ?_InitialisePorts:	
  1055                           ; 1 bytes @ 0x0
  1056                           
  1057  0075                     ?_Init_TMR1:	
  1058                           ; 1 bytes @ 0x0
  1059                           
  1060  0075                     ?_InitialiseADC:	
  1061                           ; 1 bytes @ 0x0
  1062                           
  1063  0075                     ?_InitUSART:	
  1064                           ; 1 bytes @ 0x0
  1065                           
  1066  0075                     ?_Fail_LED:	
  1067                           ; 1 bytes @ 0x0
  1068                           
  1069  0075                     ?_empty_RX_BUFF:	
  1070                           ; 1 bytes @ 0x0
  1071                           
  1072  0075                     ?_ADC_OPTO_Relay:	
  1073                           ; 1 bytes @ 0x0
  1074                           
  1075  0075                     ?_setupTestParameters:	
  1076                           ; 1 bytes @ 0x0
  1077                           
  1078  0075                     ?_PassLED:	
  1079                           ; 1 bytes @ 0x0
  1080                           
  1081  0075                     ?_UART_TX_String:	
  1082                           ; 1 bytes @ 0x0
  1083                           
  1084  0075                     ?_beginHighCurrentTest:	
  1085                           ; 1 bytes @ 0x0
  1086                           
  1087  0075                     ?_SCR_Relay:	
  1088                           ; 1 bytes @ 0x0
  1089                           
  1090  0075                     ?_SCR:	
  1091                           ; 1 bytes @ 0x0
  1092                           
  1093  0075                     ?_TMR1Reset:	
  1094                           ; 1 bytes @ 0x0
  1095                           
  1096  0075                     ?_UART_RX_String:	
  1097                           ; 1 bytes @ 0x0
  1098                           
  1099  0075                     ??_UART_RX_String:	
  1100                           ; 1 bytes @ 0x0
  1101                           
  1102  0075                     ?_ISR:	
  1103                           ; 1 bytes @ 0x0
  1104                           
  1105  0075                     ?_putch:	
  1106                           ; 1 bytes @ 0x0
  1107                           
  1108  0075                     ?i1_Fail_LED:	
  1109                           ; 1 bytes @ 0x0
  1110                           
  1111  0075                     ??i1_Fail_LED:	
  1112                           ; 1 bytes @ 0x0
  1113                           
  1114  0075                     ?i1_PassLED:	
  1115                           ; 1 bytes @ 0x0
  1116                           
  1117  0075                     ??i1_PassLED:	
  1118                           ; 1 bytes @ 0x0
  1119                           
  1120  0075                     ?_main:	
  1121                           ; 1 bytes @ 0x0
  1122                           
  1123  0075                     ?i1_Timer1:	
  1124                           ; 2 bytes @ 0x0
  1125                           
  1126                           
  1127                           ; 2 bytes @ 0x0
  1128  0075                     	ds	1
  1129  0076                     i1Fail_LED@OnOff:	
  1130  0076                     i1PassLED@OnOff:	
  1131                           ; 1 bytes @ 0x1
  1132                           
  1133                           
  1134                           ; 1 bytes @ 0x1
  1135  0076                     	ds	1
  1136  0077                     ??i1_Timer1:	
  1137                           
  1138                           ; 1 bytes @ 0x2
  1139  0077                     	ds	2
  1140  0079                     ??_ISR:	
  1141                           
  1142                           ; 1 bytes @ 0x4
  1143  0079                     	ds	1
  1144                           
  1145                           	psect	cstackBANK0
  1146  0020                     __pcstackBANK0:	
  1147  0020                     ?___ftge:	
  1148  0020                     ??_initPIC:	
  1149                           ; 1 bit 
  1150                           
  1151  0020                     ??_ToggleGLED:	
  1152                           ; 1 bytes @ 0x0
  1153                           
  1154  0020                     ??_InitialisePorts:	
  1155                           ; 1 bytes @ 0x0
  1156                           
  1157  0020                     ??_Init_TMR1:	
  1158                           ; 1 bytes @ 0x0
  1159                           
  1160  0020                     ??_InitialiseADC:	
  1161                           ; 1 bytes @ 0x0
  1162                           
  1163  0020                     ??_InitUSART:	
  1164                           ; 1 bytes @ 0x0
  1165                           
  1166  0020                     ??_Fail_LED:	
  1167                           ; 1 bytes @ 0x0
  1168                           
  1169  0020                     ??_empty_RX_BUFF:	
  1170                           ; 1 bytes @ 0x0
  1171                           
  1172  0020                     ?_UART_TX:	
  1173                           ; 1 bytes @ 0x0
  1174                           
  1175  0020                     ??_ADC_OPTO_Relay:	
  1176                           ; 1 bytes @ 0x0
  1177                           
  1178  0020                     ??_PassLED:	
  1179                           ; 1 bytes @ 0x0
  1180                           
  1181  0020                     ??_SCR_Relay:	
  1182                           ; 1 bytes @ 0x0
  1183                           
  1184  0020                     ??_SCR:	
  1185                           ; 1 bytes @ 0x0
  1186                           
  1187  0020                     ??_TMR1Reset:	
  1188                           ; 1 bytes @ 0x0
  1189                           
  1190  0020                     ??_isdigit:	
  1191                           ; 1 bytes @ 0x0
  1192                           
  1193  0020                     ??_putch:	
  1194                           ; 1 bytes @ 0x0
  1195                           
  1196  0020                     ?_ReadADC:	
  1197                           ; 1 bytes @ 0x0
  1198                           
  1199  0020                     ?_Timer1:	
  1200                           ; 2 bytes @ 0x0
  1201                           
  1202  0020                     ?_Timer1Read:	
  1203                           ; 2 bytes @ 0x0
  1204                           
  1205  0020                     ?___wmul:	
  1206                           ; 2 bytes @ 0x0
  1207                           
  1208  0020                     ?___lwdiv:	
  1209                           ; 2 bytes @ 0x0
  1210                           
  1211  0020                     ?___ftpack:	
  1212                           ; 2 bytes @ 0x0
  1213                           
  1214  0020                     ?___ftneg:	
  1215                           ; 3 bytes @ 0x0
  1216                           
  1217  0020                     ?___lmul:	
  1218                           ; 3 bytes @ 0x0
  1219                           
  1220  0020                     putch@c:	
  1221                           ; 4 bytes @ 0x0
  1222                           
  1223  0020                     _isdigit$1124:	
  1224                           ; 1 bytes @ 0x0
  1225                           
  1226  0020                     UART_TX@data:	
  1227                           ; 1 bytes @ 0x0
  1228                           
  1229  0020                     ___wmul@multiplier:	
  1230                           ; 2 bytes @ 0x0
  1231                           
  1232  0020                     ___lwdiv@divisor:	
  1233                           ; 2 bytes @ 0x0
  1234                           
  1235  0020                     ___ftpack@arg:	
  1236                           ; 2 bytes @ 0x0
  1237                           
  1238  0020                     ___ftge@ff1:	
  1239                           ; 3 bytes @ 0x0
  1240                           
  1241  0020                     ___ftneg@f1:	
  1242                           ; 3 bytes @ 0x0
  1243                           
  1244  0020                     ___lmul@multiplier:	
  1245                           ; 3 bytes @ 0x0
  1246                           
  1247                           
  1248                           ; 4 bytes @ 0x0
  1249  0020                     	ds	1
  1250  0021                     SCR@OnOff:	
  1251  0021                     ADC_OPTO_Relay@OnOff:	
  1252                           ; 1 bytes @ 0x1
  1253                           
  1254  0021                     SCR_Relay@OnOff:	
  1255                           ; 1 bytes @ 0x1
  1256                           
  1257  0021                     Fail_LED@OnOff:	
  1258                           ; 1 bytes @ 0x1
  1259                           
  1260  0021                     PassLED@OnOff:	
  1261                           ; 1 bytes @ 0x1
  1262                           
  1263  0021                     isdigit@c:	
  1264                           ; 1 bytes @ 0x1
  1265                           
  1266  0021                     empty_RX_BUFF@i:	
  1267                           ; 1 bytes @ 0x1
  1268                           
  1269                           
  1270                           ; 2 bytes @ 0x1
  1271  0021                     	ds	1
  1272  0022                     ??_UART_TX:	
  1273  0022                     ??_ReadADC:	
  1274                           ; 1 bytes @ 0x2
  1275                           
  1276  0022                     ??_Timer1:	
  1277                           ; 1 bytes @ 0x2
  1278                           
  1279  0022                     ??_UART_TX_String:	
  1280                           ; 1 bytes @ 0x2
  1281                           
  1282  0022                     ??_Timer1Read:	
  1283                           ; 1 bytes @ 0x2
  1284                           
  1285  0022                     ___wmul@multiplicand:	
  1286                           ; 1 bytes @ 0x2
  1287                           
  1288  0022                     ___lwdiv@dividend:	
  1289                           ; 2 bytes @ 0x2
  1290                           
  1291                           
  1292                           ; 2 bytes @ 0x2
  1293  0022                     	ds	1
  1294  0023                     ??_pi3Connect:	
  1295  0023                     ??___ftneg:	
  1296                           ; 1 bytes @ 0x3
  1297                           
  1298  0023                     ___ftpack@exp:	
  1299                           ; 1 bytes @ 0x3
  1300                           
  1301  0023                     ___ftge@ff2:	
  1302                           ; 1 bytes @ 0x3
  1303                           
  1304                           
  1305                           ; 3 bytes @ 0x3
  1306  0023                     	ds	1
  1307  0024                     ??_beginHighCurrentTest:	
  1308  0024                     ??___wmul:	
  1309                           ; 1 bytes @ 0x4
  1310                           
  1311  0024                     ??___lwdiv:	
  1312                           ; 1 bytes @ 0x4
  1313                           
  1314  0024                     ___ftpack@sign:	
  1315                           ; 1 bytes @ 0x4
  1316                           
  1317  0024                     ___wmul@product:	
  1318                           ; 1 bytes @ 0x4
  1319                           
  1320  0024                     ___lmul@multiplicand:	
  1321                           ; 2 bytes @ 0x4
  1322                           
  1323                           
  1324                           ; 4 bytes @ 0x4
  1325  0024                     	ds	1
  1326  0025                     ??___ftpack:	
  1327  0025                     pi3Connect@handshake:	
  1328                           ; 1 bytes @ 0x5
  1329                           
  1330  0025                     ___lwdiv@counter:	
  1331                           ; 1 bytes @ 0x5
  1332                           
  1333  0025                     UART_TX_String@i:	
  1334                           ; 1 bytes @ 0x5
  1335                           
  1336                           
  1337                           ; 2 bytes @ 0x5
  1338  0025                     	ds	1
  1339  0026                     ??___ftge:	
  1340  0026                     ?_atoi:	
  1341                           ; 1 bytes @ 0x6
  1342                           
  1343  0026                     ___lwdiv@quotient:	
  1344                           ; 2 bytes @ 0x6
  1345                           
  1346                           
  1347                           ; 2 bytes @ 0x6
  1348  0026                     	ds	1
  1349  0027                     UART_TX_String@string:	
  1350                           
  1351                           ; 1 bytes @ 0x7
  1352  0027                     	ds	1
  1353  0028                     ??_atoi:	
  1354  0028                     ??___lmul:	
  1355                           ; 1 bytes @ 0x8
  1356                           
  1357  0028                     ?___lwmod:	
  1358                           ; 1 bytes @ 0x8
  1359                           
  1360  0028                     ___lwmod@divisor:	
  1361                           ; 2 bytes @ 0x8
  1362                           
  1363  0028                     ___lmul@product:	
  1364                           ; 2 bytes @ 0x8
  1365                           
  1366                           
  1367                           ; 4 bytes @ 0x8
  1368  0028                     	ds	2
  1369  002A                     atoi@sign:	
  1370  002A                     ___lwmod@dividend:	
  1371                           ; 1 bytes @ 0xA
  1372                           
  1373                           
  1374                           ; 2 bytes @ 0xA
  1375  002A                     	ds	1
  1376  002B                     atoi@a:	
  1377                           
  1378                           ; 2 bytes @ 0xB
  1379  002B                     	ds	1
  1380  002C                     ??___lwmod:	
  1381  002C                     ?___lldiv:	
  1382                           ; 1 bytes @ 0xC
  1383                           
  1384  002C                     ___lldiv@divisor:	
  1385                           ; 4 bytes @ 0xC
  1386                           
  1387                           
  1388                           ; 4 bytes @ 0xC
  1389  002C                     	ds	1
  1390  002D                     atoi@s:	
  1391  002D                     ___lwmod@counter:	
  1392                           ; 1 bytes @ 0xD
  1393                           
  1394                           
  1395                           ; 1 bytes @ 0xD
  1396  002D                     	ds	1
  1397  002E                     ?_printf:	
  1398  002E                     printf@f:	
  1399                           ; 2 bytes @ 0xE
  1400                           
  1401                           
  1402                           ; 2 bytes @ 0xE
  1403  002E                     	ds	2
  1404  0030                     ___lldiv@dividend:	
  1405                           
  1406                           ; 4 bytes @ 0x10
  1407  0030                     	ds	4
  1408  0034                     ??_printf:	
  1409  0034                     ??___lldiv:	
  1410                           ; 1 bytes @ 0x14
  1411                           
  1412                           
  1413                           ; 1 bytes @ 0x14
  1414  0034                     	ds	1
  1415  0035                     ___lldiv@quotient:	
  1416                           
  1417                           ; 4 bytes @ 0x15
  1418  0035                     	ds	3
  1419  0038                     printf@ap:	
  1420                           
  1421                           ; 1 bytes @ 0x18
  1422  0038                     	ds	1
  1423  0039                     printf@flag:	
  1424  0039                     ___lldiv@counter:	
  1425                           ; 1 bytes @ 0x19
  1426                           
  1427                           
  1428                           ; 1 bytes @ 0x19
  1429  0039                     	ds	1
  1430  003A                     ??_setupTestParameters:	
  1431  003A                     ?___lltoft:	
  1432                           ; 1 bytes @ 0x1A
  1433                           
  1434  003A                     printf@prec:	
  1435                           ; 3 bytes @ 0x1A
  1436                           
  1437  003A                     ___lltoft@c:	
  1438                           ; 1 bytes @ 0x1A
  1439                           
  1440                           
  1441                           ; 4 bytes @ 0x1A
  1442  003A                     	ds	1
  1443  003B                     printf@val:	
  1444                           
  1445                           ; 2 bytes @ 0x1B
  1446  003B                     	ds	1
  1447  003C                     setupTestParameters@handshake3:	
  1448                           
  1449                           ; 1 bytes @ 0x1C
  1450  003C                     	ds	1
  1451  003D                     printf@c:	
  1452                           
  1453                           ; 1 bytes @ 0x1D
  1454  003D                     	ds	1
  1455  003E                     ??___lltoft:	
  1456                           
  1457                           ; 1 bytes @ 0x1E
  1458  003E                     	ds	1
  1459  003F                     ___lltoft@exp:	
  1460                           
  1461                           ; 1 bytes @ 0x1F
  1462  003F                     	ds	1
  1463  0040                     ?_fabs:	
  1464  0040                     fabs@d:	
  1465                           ; 3 bytes @ 0x20
  1466                           
  1467                           
  1468                           ; 3 bytes @ 0x20
  1469  0040                     	ds	3
  1470  0043                     ??_fabs:	
  1471  0043                     ?___fttol:	
  1472                           ; 1 bytes @ 0x23
  1473                           
  1474  0043                     ___fttol@f1:	
  1475                           ; 4 bytes @ 0x23
  1476                           
  1477                           
  1478                           ; 3 bytes @ 0x23
  1479  0043                     	ds	4
  1480  0047                     ??___fttol:	
  1481                           
  1482                           ; 1 bytes @ 0x27
  1483  0047                     	ds	4
  1484  004B                     ___fttol@sign1:	
  1485                           
  1486                           ; 1 bytes @ 0x2B
  1487  004B                     	ds	1
  1488  004C                     ___fttol@lval:	
  1489                           
  1490                           ; 4 bytes @ 0x2C
  1491  004C                     	ds	4
  1492  0050                     ___fttol@exp1:	
  1493                           
  1494                           ; 1 bytes @ 0x30
  1495  0050                     	ds	1
  1496  0051                     ??_verifyACSignal:	
  1497                           
  1498                           ; 1 bytes @ 0x31
  1499  0051                     	ds	4
  1500  0055                     verifyACSignal@i:	
  1501                           
  1502                           ; 2 bytes @ 0x35
  1503  0055                     	ds	2
  1504  0057                     verifyACSignal@handshake2:	
  1505                           
  1506                           ; 1 bytes @ 0x37
  1507  0057                     	ds	1
  1508                           
  1509                           	psect	maintext
  1510  05C3                     __pmaintext:	
  1511 ;;
  1512 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1513 ;;
  1514 ;; *************** function _main *****************
  1515 ;; Defined at:
  1516 ;;		line 39 in file "newmain.c"
  1517 ;; Parameters:    Size  Location     Type
  1518 ;;		None
  1519 ;; Auto vars:     Size  Location     Type
  1520 ;;  i               2    1[BANK1 ] int 
  1521 ;; Return value:  Size  Location     Type
  1522 ;;                  2  132[None  ] int 
  1523 ;; Registers used:
  1524 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1525 ;; Tracked objects:
  1526 ;;		On entry : B1F/0
  1527 ;;		On exit  : 0/0
  1528 ;;		Unchanged: 0/0
  1529 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1530 ;;      Params:         0       0       0       0
  1531 ;;      Locals:         0       0       2       0
  1532 ;;      Temps:          0       0       1       0
  1533 ;;      Totals:         0       0       3       0
  1534 ;;Total ram usage:        3 bytes
  1535 ;; Hardware stack levels required when called:    6
  1536 ;; This function calls:
  1537 ;;		_ToggleGLED
  1538 ;;		_initPIC
  1539 ;;		_pi3Connect
  1540 ;;		_verifyACSignal
  1541 ;; This function is called by:
  1542 ;;		Startup code after reset
  1543 ;; This function uses a non-reentrant model
  1544 ;;
  1545                           
  1546                           
  1547                           ;psect for function _main
  1548  05C3                     _main:	
  1549                           
  1550                           ;newmain.c: 42: initPIC();
  1551                           
  1552                           ;incstack = 0
  1553                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1554  05C3  318F  2771  3185   	fcall	_initPIC
  1555                           
  1556                           ;newmain.c: 44: for(int i = 0; i < 6; i++){
  1557  05C6  0021               	movlb	1	; select bank1
  1558  05C7  01CF               	clrf	main@i^(0+128)
  1559  05C8  01D0               	clrf	(main@i+1)^(0+128)
  1560  05C9  0850               	movf	(main@i+1)^(0+128),w
  1561  05CA  3A80               	xorlw	128
  1562  05CB  00CE               	movwf	??_main^(0+128)
  1563  05CC  3080               	movlw	128
  1564  05CD  024E               	subwf	??_main^(0+128),w
  1565  05CE  1D03               	skipz
  1566  05CF  2DD2               	goto	u3595
  1567  05D0  3006               	movlw	6
  1568  05D1  024F               	subwf	main@i^(0+128),w
  1569  05D2                     u3595:	
  1570  05D2  1803               	btfsc	3,0
  1571  05D3  2DF0               	goto	l3479
  1572  05D4                     l3471:	
  1573                           
  1574                           ;newmain.c: 46: ToggleGLED();
  1575  05D4  318E  26E5  3185   	fcall	_ToggleGLED
  1576                           
  1577                           ;newmain.c: 47: _delay((unsigned long)((100)*(4000000/4000.0)));
  1578  05D7  3082               	movlw	130
  1579  05D8  0021               	movlb	1	; select bank1
  1580  05D9  00CE               	movwf	??_main^(0+128)
  1581  05DA  30DD               	movlw	221
  1582  05DB                     u3617:	
  1583  05DB  0B89               	decfsz	9,f
  1584  05DC  2DDB               	goto	u3617
  1585  05DD  0BCE               	decfsz	??_main^(0+128),f
  1586  05DE  2DDB               	goto	u3617
  1587  05DF  3200               	nop2
  1588  05E0  3001               	movlw	1
  1589  05E1  0021               	movlb	1	; select bank1
  1590  05E2  07CF               	addwf	main@i^(0+128),f
  1591  05E3  3000               	movlw	0
  1592  05E4  3DD0               	addwfc	(main@i+1)^(0+128),f
  1593  05E5  0850               	movf	(main@i+1)^(0+128),w
  1594  05E6  3A80               	xorlw	128
  1595  05E7  00CE               	movwf	??_main^(0+128)
  1596  05E8  3080               	movlw	128
  1597  05E9  024E               	subwf	??_main^(0+128),w
  1598  05EA  1D03               	skipz
  1599  05EB  2DEE               	goto	u3605
  1600  05EC  3006               	movlw	6
  1601  05ED  024F               	subwf	main@i^(0+128),w
  1602  05EE                     u3605:	
  1603  05EE  1C03               	skipc
  1604  05EF  2DD4               	goto	l3471
  1605  05F0                     l3479:	
  1606                           
  1607                           ;newmain.c: 48: }
  1608                           ;newmain.c: 98: pi3Connect();
  1609  05F0  3186  263C  3185   	fcall	_pi3Connect
  1610                           
  1611                           ;newmain.c: 99: _delay((unsigned long)((10)*(4000000/4000.0)));
  1612  05F3  300D               	movlw	13
  1613  05F4  0021               	movlb	1	; select bank1
  1614  05F5  00CE               	movwf	??_main^(0+128)
  1615  05F6  30FB               	movlw	251
  1616  05F7                     u3627:	
  1617  05F7  0B89               	decfsz	9,f
  1618  05F8  2DF7               	goto	u3627
  1619  05F9  0BCE               	decfsz	??_main^(0+128),f
  1620  05FA  2DF7               	goto	u3627
  1621  05FB  3200               	nop2
  1622                           
  1623                           ;newmain.c: 100: verifyACSignal();
  1624  05FC  3180  208C         	fcall	_verifyACSignal
  1625                           
  1626                           ;newmain.c: 108: return (0);
  1627                           ;	Return value of _main is never used
  1628  05FE  3180  2872         	ljmp	start
  1629  0600                     __end_of_main:	
  1630                           
  1631                           	psect	text1
  1632  008C                     __ptext1:	
  1633 ;; *************** function _verifyACSignal *****************
  1634 ;; Defined at:
  1635 ;;		line 173 in file "newmain.c"
  1636 ;; Parameters:    Size  Location     Type
  1637 ;;		None
  1638 ;; Auto vars:     Size  Location     Type
  1639 ;;  i               2   53[BANK0 ] int 
  1640 ;;  handshake2      1   55[BANK0 ] unsigned char 
  1641 ;; Return value:  Size  Location     Type
  1642 ;;                  1    wreg      void 
  1643 ;; Registers used:
  1644 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1645 ;; Tracked objects:
  1646 ;;		On entry : 0/0
  1647 ;;		On exit  : 0/0
  1648 ;;		Unchanged: 0/0
  1649 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1650 ;;      Params:         0       0       0       0
  1651 ;;      Locals:         0       3       0       0
  1652 ;;      Temps:          0       4       0       0
  1653 ;;      Totals:         0       7       0       0
  1654 ;;Total ram usage:        7 bytes
  1655 ;; Hardware stack levels used:    1
  1656 ;; Hardware stack levels required when called:    5
  1657 ;; This function calls:
  1658 ;;		_ADC_OPTO_Relay
  1659 ;;		_ReadADC
  1660 ;;		_Timer1
  1661 ;;		_ToggleGLED
  1662 ;;		_UART_TX
  1663 ;;		___fttol
  1664 ;;		___lldiv
  1665 ;;		___lltoft
  1666 ;;		_empty_RX_BUFF
  1667 ;;		_fabs
  1668 ;;		_printf
  1669 ;;		_setupTestParameters
  1670 ;; This function is called by:
  1671 ;;		_main
  1672 ;; This function uses a non-reentrant model
  1673 ;;
  1674                           
  1675                           
  1676                           ;psect for function _verifyACSignal
  1677  008C                     _verifyACSignal:	
  1678                           
  1679                           ;newmain.c: 175: unsigned char handshake2 = '0';
  1680                           
  1681                           ;incstack = 0
  1682                           ; Regs used in _verifyACSignal: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1683  008C  3030               	movlw	48
  1684  008D  0020               	movlb	0	; select bank0
  1685  008E  00D1               	movwf	??_verifyACSignal
  1686  008F  0851               	movf	??_verifyACSignal,w
  1687  0090  00D7               	movwf	verifyACSignal@handshake2
  1688                           
  1689                           ;newmain.c: 176: ADC_Test = 1;
  1690  0091  3001               	movlw	1
  1691  0092  00F0               	movwf	_ADC_Test	;volatile
  1692  0093  3000               	movlw	0
  1693  0094  00F1               	movwf	_ADC_Test+1	;volatile
  1694                           
  1695                           ;newmain.c: 178: PIE1bits.RCIE = 1;
  1696  0095  0021               	movlb	1	; select bank1
  1697  0096  1691               	bsf	17,5	;volatile
  1698  0097                     l3369:	
  1699                           ;newmain.c: 181: while(handshake2 != '2'){
  1700                           
  1701  0097  3032               	movlw	50
  1702  0098  0020               	movlb	0	; select bank0
  1703  0099  0657               	xorwf	verifyACSignal@handshake2,w
  1704  009A  1903               	btfsc	3,2
  1705  009B  28A3               	goto	l3371
  1706                           
  1707                           ;newmain.c: 183: handshake2 = rxArray[0];
  1708  009C  0021               	movlb	1	; select bank1
  1709  009D  083A               	movf	_rxArray^(0+128),w
  1710  009E  0020               	movlb	0	; select bank0
  1711  009F  00D1               	movwf	??_verifyACSignal
  1712  00A0  0851               	movf	??_verifyACSignal,w
  1713  00A1  00D7               	movwf	verifyACSignal@handshake2
  1714  00A2  2897               	goto	l3369
  1715  00A3                     l3371:	
  1716                           
  1717                           ;newmain.c: 184: }
  1718                           ;newmain.c: 185: rxFlag = 0;
  1719  00A3  0021               	movlb	1	; select bank1
  1720  00A4  01AC               	clrf	_rxFlag^(0+128)
  1721  00A5  01AD               	clrf	(_rxFlag+1)^(0+128)
  1722                           
  1723                           ;newmain.c: 186: empty_RX_BUFF();
  1724  00A6  3187  275D  3180   	fcall	_empty_RX_BUFF
  1725                           
  1726                           ;newmain.c: 189: _delay((unsigned long)((10)*(4000000/4000.0)));
  1727  00A9  300D               	movlw	13
  1728  00AA  0020               	movlb	0	; select bank0
  1729  00AB  00D1               	movwf	??_verifyACSignal
  1730  00AC  30FB               	movlw	251
  1731  00AD                     u3637:	
  1732  00AD  0B89               	decfsz	9,f
  1733  00AE  28AD               	goto	u3637
  1734  00AF  0BD1               	decfsz	??_verifyACSignal,f
  1735  00B0  28AD               	goto	u3637
  1736  00B1  3200               	nop2
  1737                           
  1738                           ;newmain.c: 190: UART_TX(handshake2);
  1739  00B2  0020               	movlb	0	; select bank0
  1740  00B3  0857               	movf	verifyACSignal@handshake2,w
  1741  00B4  00D1               	movwf	??_verifyACSignal
  1742  00B5  01D2               	clrf	??_verifyACSignal+1
  1743  00B6  0851               	movf	??_verifyACSignal,w
  1744  00B7  00A0               	movwf	UART_TX@data
  1745  00B8  0852               	movf	??_verifyACSignal+1,w
  1746  00B9  00A1               	movwf	UART_TX@data+1
  1747  00BA  318E  26C4  3180   	fcall	_UART_TX
  1748                           
  1749                           ;newmain.c: 191: PIE1bits.RCIE = 0;
  1750  00BD  0021               	movlb	1	; select bank1
  1751  00BE  1291               	bcf	17,5	;volatile
  1752                           
  1753                           ;newmain.c: 192: ADON=1;
  1754  00BF  141D               	bsf	29,0	;volatile
  1755  00C0                     l153:	
  1756                           ;newmain.c: 194: while(!ADON){}
  1757                           
  1758  00C0  1C1D               	btfss	29,0	;volatile
  1759  00C1  28C0               	goto	l153
  1760                           
  1761                           ;newmain.c: 195: aveTmr1Val = 0;
  1762  00C2  3000               	movlw	0
  1763  00C3  0020               	movlb	0	; select bank0
  1764  00C4  00DB               	movwf	_aveTmr1Val+3
  1765  00C5  3000               	movlw	0
  1766  00C6  00DA               	movwf	_aveTmr1Val+2
  1767  00C7  3000               	movlw	0
  1768  00C8  00D9               	movwf	_aveTmr1Val+1
  1769  00C9  3000               	movlw	0
  1770  00CA  00D8               	movwf	_aveTmr1Val
  1771  00CB                     l3413:	
  1772                           ;newmain.c: 227: else{}
  1773                           
  1774                           ;newmain.c: 226: }
  1775                           
  1776                           ;newmain.c: 199: while(tmr1Samples < 100 ){
  1777                           
  1778  00CB  3000               	movlw	0
  1779  00CC  0265               	subwf	_tmr1Samples+1,w	;volatile
  1780  00CD  3064               	movlw	100
  1781  00CE  1903               	skipnz
  1782  00CF  0264               	subwf	_tmr1Samples,w	;volatile
  1783  00D0  1803               	btfsc	3,0
  1784  00D1  2934               	goto	l164
  1785                           
  1786                           ;newmain.c: 201: adcSample = ReadADC();
  1787  00D2  3187  2708  3180   	fcall	_ReadADC
  1788  00D5  0020               	movlb	0	; select bank0
  1789  00D6  0821               	movf	?_ReadADC+1,w
  1790  00D7  00E9               	movwf	_adcSample+1
  1791  00D8  0820               	movf	?_ReadADC,w
  1792  00D9  00E8               	movwf	_adcSample
  1793                           
  1794                           ;newmain.c: 203: if((adcSample > 512) && (tmr1Start == 0)) {
  1795  00DA  3002               	movlw	2
  1796  00DB  0269               	subwf	_adcSample+1,w
  1797  00DC  3001               	movlw	1
  1798  00DD  1903               	skipnz
  1799  00DE  0268               	subwf	_adcSample,w
  1800  00DF  1C03               	skipc
  1801  00E0  2926               	goto	l3407
  1802  00E1  0862               	movf	_tmr1Start,w	;volatile
  1803  00E2  0463               	iorwf	_tmr1Start+1,w	;volatile
  1804  00E3  1D03               	btfss	3,2
  1805  00E4  2926               	goto	l3407
  1806                           
  1807                           ;newmain.c: 205: if(tmr1StartFlag == 0) {
  1808  00E5  0866               	movf	_tmr1StartFlag,w	;volatile
  1809  00E6  0467               	iorwf	_tmr1StartFlag+1,w	;volatile
  1810  00E7  1D03               	btfss	3,2
  1811  00E8  28EF               	goto	l3397
  1812                           
  1813                           ;newmain.c: 207: T1CONbits.TMR1ON = 1;
  1814  00E9  1418               	bsf	24,0	;volatile
  1815                           
  1816                           ;newmain.c: 208: tmr1StartFlag = 1;
  1817  00EA  3001               	movlw	1
  1818  00EB  00E6               	movwf	_tmr1StartFlag	;volatile
  1819  00EC  3000               	movlw	0
  1820  00ED  00E7               	movwf	_tmr1StartFlag+1	;volatile
  1821                           
  1822                           ;newmain.c: 209: }
  1823  00EE  2921               	goto	l3405
  1824  00EF                     l3397:	
  1825                           
  1826                           ;newmain.c: 210: else {
  1827                           ;newmain.c: 212: tmr1Val = Timer1();
  1828  00EF  3187  27E4  3180   	fcall	_Timer1
  1829  00F2  0020               	movlb	0	; select bank0
  1830  00F3  0820               	movf	?_Timer1,w
  1831  00F4  0021               	movlb	1	; select bank1
  1832  00F5  00A4               	movwf	_tmr1Val^(0+128)
  1833  00F6  0020               	movlb	0	; select bank0
  1834  00F7  0821               	movf	?_Timer1+1,w
  1835  00F8  0021               	movlb	1	; select bank1
  1836  00F9  00A5               	movwf	(_tmr1Val^(0+128)+1)
  1837  00FA  01A6               	clrf	(_tmr1Val^(0+128)+2)
  1838  00FB  01A7               	clrf	(_tmr1Val^(0+128)+3)
  1839                           
  1840                           ;newmain.c: 213: aveTmr1Val = aveTmr1Val + tmr1Val;
  1841  00FC  0020               	movlb	0	; select bank0
  1842  00FD  0858               	movf	_aveTmr1Val,w
  1843  00FE  0021               	movlb	1	; select bank1
  1844  00FF  0724               	addwf	_tmr1Val^(0+128),w
  1845  0100  0020               	movlb	0	; select bank0
  1846  0101  00D1               	movwf	??_verifyACSignal
  1847  0102  0859               	movf	_aveTmr1Val+1,w
  1848  0103  0021               	movlb	1	; select bank1
  1849  0104  3D25               	addwfc	(_tmr1Val+1)^(0+128),w
  1850  0105  0020               	movlb	0	; select bank0
  1851  0106  00D2               	movwf	??_verifyACSignal+1
  1852  0107  085A               	movf	_aveTmr1Val+2,w
  1853  0108  0021               	movlb	1	; select bank1
  1854  0109  3D26               	addwfc	(_tmr1Val+2)^(0+128),w
  1855  010A  0020               	movlb	0	; select bank0
  1856  010B  00D3               	movwf	??_verifyACSignal+2
  1857  010C  085B               	movf	_aveTmr1Val+3,w
  1858  010D  0021               	movlb	1	; select bank1
  1859  010E  3D27               	addwfc	(_tmr1Val+3)^(0+128),w
  1860  010F  0020               	movlb	0	; select bank0
  1861  0110  00D4               	movwf	??_verifyACSignal+3
  1862  0111  0854               	movf	??_verifyACSignal+3,w
  1863  0112  00DB               	movwf	_aveTmr1Val+3
  1864  0113  0853               	movf	??_verifyACSignal+2,w
  1865  0114  00DA               	movwf	_aveTmr1Val+2
  1866  0115  0852               	movf	??_verifyACSignal+1,w
  1867  0116  00D9               	movwf	_aveTmr1Val+1
  1868  0117  0851               	movf	??_verifyACSignal,w
  1869  0118  00D8               	movwf	_aveTmr1Val
  1870                           
  1871                           ;newmain.c: 215: tmr1Samples = tmr1Samples + 1 ;
  1872  0119  0864               	movf	_tmr1Samples,w	;volatile
  1873  011A  3E01               	addlw	1
  1874  011B  00E4               	movwf	_tmr1Samples	;volatile
  1875  011C  3000               	movlw	0
  1876  011D  3D65               	addwfc	_tmr1Samples+1,w	;volatile
  1877  011E  00E5               	movwf	_tmr1Samples+1	;volatile
  1878                           
  1879                           ;newmain.c: 216: tmr1StartFlag = 0;
  1880  011F  01E6               	clrf	_tmr1StartFlag	;volatile
  1881  0120  01E7               	clrf	_tmr1StartFlag+1	;volatile
  1882  0121                     l3405:	
  1883                           
  1884                           ;newmain.c: 217: }
  1885                           ;newmain.c: 220: tmr1Start = 1;
  1886  0121  3001               	movlw	1
  1887  0122  00E2               	movwf	_tmr1Start	;volatile
  1888  0123  3000               	movlw	0
  1889  0124  00E3               	movwf	_tmr1Start+1	;volatile
  1890                           
  1891                           ;newmain.c: 221: }
  1892  0125  28CB               	goto	l3413
  1893  0126                     l3407:	
  1894                           
  1895                           ;newmain.c: 222: else if((adcSample < 128) && (tmr1Start == 1)) {
  1896  0126  3000               	movlw	0
  1897  0127  0269               	subwf	_adcSample+1,w
  1898  0128  3080               	movlw	128
  1899  0129  1903               	skipnz
  1900  012A  0268               	subwf	_adcSample,w
  1901  012B  1803               	skipnc
  1902  012C  28CB               	goto	l3413
  1903  012D  0362               	decf	_tmr1Start,w	;volatile
  1904  012E  0463               	iorwf	_tmr1Start+1,w	;volatile
  1905  012F  1D03               	btfss	3,2
  1906  0130  28CB               	goto	l3413
  1907                           
  1908                           ;newmain.c: 225: tmr1Start = 0;
  1909  0131  01E2               	clrf	_tmr1Start	;volatile
  1910  0132  01E3               	clrf	_tmr1Start+1	;volatile
  1911  0133  28CB               	goto	l3413
  1912  0134                     l164:	
  1913                           
  1914                           ;newmain.c: 228: }
  1915                           ;newmain.c: 230: ADON=0;
  1916  0134  0021               	movlb	1	; select bank1
  1917  0135  101D               	bcf	29,0	;volatile
  1918                           
  1919                           ;newmain.c: 231: tmr1Samples = 0;
  1920  0136  0020               	movlb	0	; select bank0
  1921  0137  01E4               	clrf	_tmr1Samples	;volatile
  1922  0138  01E5               	clrf	_tmr1Samples+1	;volatile
  1923                           
  1924                           ;newmain.c: 232: tmr1Val = 0;
  1925  0139  3000               	movlw	0
  1926  013A  0021               	movlb	1	; select bank1
  1927  013B  00A7               	movwf	(_tmr1Val+3)^(0+128)
  1928  013C  3000               	movlw	0
  1929  013D  00A6               	movwf	(_tmr1Val+2)^(0+128)
  1930  013E  3000               	movlw	0
  1931  013F  00A5               	movwf	(_tmr1Val+1)^(0+128)
  1932  0140  3000               	movlw	0
  1933  0141  00A4               	movwf	_tmr1Val^(0+128)
  1934                           
  1935                           ;newmain.c: 233: aveTmr1Val = fabs((double)(aveTmr1Val/100));
  1936  0142  0020               	movlb	0	; select bank0
  1937  0143  085B               	movf	_aveTmr1Val+3,w
  1938  0144  00B3               	movwf	___lldiv@dividend+3
  1939  0145  085A               	movf	_aveTmr1Val+2,w
  1940  0146  00B2               	movwf	___lldiv@dividend+2
  1941  0147  0859               	movf	_aveTmr1Val+1,w
  1942  0148  00B1               	movwf	___lldiv@dividend+1
  1943  0149  0858               	movf	_aveTmr1Val,w
  1944  014A  00B0               	movwf	___lldiv@dividend
  1945  014B  3000               	movlw	0
  1946  014C  00AF               	movwf	___lldiv@divisor+3
  1947  014D  3000               	movlw	0
  1948  014E  00AE               	movwf	___lldiv@divisor+2
  1949  014F  3000               	movlw	0
  1950  0150  00AD               	movwf	___lldiv@divisor+1
  1951  0151  3064               	movlw	100
  1952  0152  00AC               	movwf	___lldiv@divisor
  1953  0153  3185  2570  3180   	fcall	___lldiv
  1954  0156  0020               	movlb	0	; select bank0
  1955  0157  082F               	movf	?___lldiv+3,w
  1956  0158  00BD               	movwf	___lltoft@c+3
  1957  0159  082E               	movf	?___lldiv+2,w
  1958  015A  00BC               	movwf	___lltoft@c+2
  1959  015B  082D               	movf	?___lldiv+1,w
  1960  015C  00BB               	movwf	___lltoft@c+1
  1961  015D  082C               	movf	?___lldiv,w
  1962  015E  00BA               	movwf	___lltoft@c
  1963  015F  3187  2733  3180   	fcall	___lltoft
  1964  0162  0020               	movlb	0	; select bank0
  1965  0163  083A               	movf	?___lltoft,w
  1966  0164  00C0               	movwf	fabs@d
  1967  0165  083B               	movf	?___lltoft+1,w
  1968  0166  00C1               	movwf	fabs@d+1
  1969  0167  083C               	movf	?___lltoft+2,w
  1970  0168  00C2               	movwf	fabs@d+2
  1971  0169  3187  27A5  3180   	fcall	_fabs
  1972  016C  0020               	movlb	0	; select bank0
  1973  016D  0840               	movf	?_fabs,w
  1974  016E  00C3               	movwf	___fttol@f1
  1975  016F  0841               	movf	?_fabs+1,w
  1976  0170  00C4               	movwf	___fttol@f1+1
  1977  0171  0842               	movf	?_fabs+2,w
  1978  0172  00C5               	movwf	___fttol@f1+2
  1979  0173  3183  23A2  3180   	fcall	___fttol
  1980  0176  0020               	movlb	0	; select bank0
  1981  0177  0846               	movf	?___fttol+3,w
  1982  0178  00DB               	movwf	_aveTmr1Val+3
  1983  0179  0845               	movf	?___fttol+2,w
  1984  017A  00DA               	movwf	_aveTmr1Val+2
  1985  017B  0844               	movf	?___fttol+1,w
  1986  017C  00D9               	movwf	_aveTmr1Val+1
  1987  017D  0843               	movf	?___fttol,w
  1988  017E  00D8               	movwf	_aveTmr1Val
  1989                           
  1990                           ;newmain.c: 237: if((aveTmr1Val >= 4750) && (aveTmr1Val <= 5250)){
  1991  017F  085B               	movf	_aveTmr1Val+3,w
  1992  0180  1D03               	btfss	3,2
  1993  0181  298B               	goto	l3423
  1994  0182  085A               	movf	_aveTmr1Val+2,w
  1995  0183  1D03               	btfss	3,2
  1996  0184  298B               	goto	l3423
  1997  0185  308E               	movlw	142
  1998  0186  0258               	subwf	_aveTmr1Val,w
  1999  0187  3012               	movlw	18
  2000  0188  3B59               	subwfb	_aveTmr1Val+1,w
  2001  0189  1C03               	btfss	3,0
  2002  018A  29A0               	goto	l3429
  2003  018B                     l3423:	
  2004  018B  085B               	movf	_aveTmr1Val+3,w
  2005  018C  1D03               	btfss	3,2
  2006  018D  29A0               	goto	l3429
  2007  018E  085A               	movf	_aveTmr1Val+2,w
  2008  018F  1D03               	btfss	3,2
  2009  0190  29A0               	goto	l3429
  2010  0191  3083               	movlw	131
  2011  0192  0258               	subwf	_aveTmr1Val,w
  2012  0193  3014               	movlw	20
  2013  0194  3B59               	subwfb	_aveTmr1Val+1,w
  2014  0195  1803               	btfsc	3,0
  2015  0196  29A0               	goto	l3429
  2016                           
  2017                           ;newmain.c: 239: txByte = '1';
  2018  0197  3031               	movlw	49
  2019  0198  00D1               	movwf	??_verifyACSignal
  2020  0199  0851               	movf	??_verifyACSignal,w
  2021  019A  00EA               	movwf	_txByte
  2022                           
  2023                           ;newmain.c: 241: ADC_OPTO_Relay(1);
  2024  019B  3001               	movlw	1
  2025  019C  318F  2738  3180   	fcall	_ADC_OPTO_Relay
  2026                           
  2027                           ;newmain.c: 243: }
  2028  019F  29A5               	goto	l3431
  2029  01A0                     l3429:	
  2030                           
  2031                           ;newmain.c: 244: else{
  2032                           ;newmain.c: 246: txByte = '0';
  2033  01A0  3030               	movlw	48
  2034  01A1  0020               	movlb	0	; select bank0
  2035  01A2  00D1               	movwf	??_verifyACSignal
  2036  01A3  0851               	movf	??_verifyACSignal,w
  2037  01A4  00EA               	movwf	_txByte
  2038  01A5                     l3431:	
  2039                           
  2040                           ;newmain.c: 247: }
  2041                           ;newmain.c: 249: PIE1bits.RCIE = 1;
  2042  01A5  0021               	movlb	1	; select bank1
  2043  01A6  1691               	bsf	17,5	;volatile
  2044                           
  2045                           ;newmain.c: 253: UART_TX(txByte);
  2046  01A7  0020               	movlb	0	; select bank0
  2047  01A8  086A               	movf	_txByte,w
  2048  01A9  00D1               	movwf	??_verifyACSignal
  2049  01AA  01D2               	clrf	??_verifyACSignal+1
  2050  01AB  0851               	movf	??_verifyACSignal,w
  2051  01AC  00A0               	movwf	UART_TX@data
  2052  01AD  0852               	movf	??_verifyACSignal+1,w
  2053  01AE  00A1               	movwf	UART_TX@data+1
  2054  01AF  318E  26C4  3180   	fcall	_UART_TX
  2055                           
  2056                           ;newmain.c: 254: _delay((unsigned long)((1800)*(4000000/4000.0)));
  2057  01B2  300A               	movlw	10
  2058  01B3  0020               	movlb	0	; select bank0
  2059  01B4  00D2               	movwf	??_verifyACSignal+1
  2060  01B5  3022               	movlw	34
  2061  01B6  00D1               	movwf	??_verifyACSignal
  2062  01B7  30A1               	movlw	161
  2063  01B8                     u3647:	
  2064  01B8  0B89               	decfsz	9,f
  2065  01B9  29B8               	goto	u3647
  2066  01BA  0BD1               	decfsz	??_verifyACSignal,f
  2067  01BB  29B8               	goto	u3647
  2068  01BC  0BD2               	decfsz	??_verifyACSignal+1,f
  2069  01BD  29B8               	goto	u3647
  2070                           
  2071                           ;newmain.c: 256: printf("%d\n", aveTmr1Val);
  2072  01BE  300A               	movlw	low (STR_1| (0+32768))
  2073  01BF  0020               	movlb	0	; select bank0
  2074  01C0  00AE               	movwf	printf@f
  2075  01C1  3088               	movlw	high (STR_1| (0+32768))
  2076  01C2  00AF               	movwf	printf@f+1
  2077  01C3  085B               	movf	_aveTmr1Val+3,w
  2078  01C4  00B3               	movwf	?_printf+5
  2079  01C5  085A               	movf	_aveTmr1Val+2,w
  2080  01C6  00B2               	movwf	?_printf+4
  2081  01C7  0859               	movf	_aveTmr1Val+1,w
  2082  01C8  00B1               	movwf	?_printf+3
  2083  01C9  0858               	movf	_aveTmr1Val,w
  2084  01CA  00B0               	movwf	?_printf+2
  2085  01CB  3182  22EA  3180   	fcall	_printf
  2086                           
  2087                           ;newmain.c: 258: empty_RX_BUFF();
  2088  01CE  3187  275D  3180   	fcall	_empty_RX_BUFF
  2089                           
  2090                           ;newmain.c: 260: if((aveTmr1Val >= 4750) && (aveTmr1Val <= 5250)){
  2091  01D1  0020               	movlb	0	; select bank0
  2092  01D2  085B               	movf	_aveTmr1Val+3,w
  2093  01D3  1D03               	btfss	3,2
  2094  01D4  29DE               	goto	l3443
  2095  01D5  085A               	movf	_aveTmr1Val+2,w
  2096  01D6  1D03               	btfss	3,2
  2097  01D7  29DE               	goto	l3443
  2098  01D8  308E               	movlw	142
  2099  01D9  0258               	subwf	_aveTmr1Val,w
  2100  01DA  3012               	movlw	18
  2101  01DB  3B59               	subwfb	_aveTmr1Val+1,w
  2102  01DC  1C03               	btfss	3,0
  2103  01DD  0008               	return
  2104  01DE                     l3443:	
  2105  01DE  085B               	movf	_aveTmr1Val+3,w
  2106  01DF  1D03               	btfss	3,2
  2107  01E0  0008               	return
  2108  01E1  085A               	movf	_aveTmr1Val+2,w
  2109  01E2  1D03               	btfss	3,2
  2110  01E3  0008               	return
  2111  01E4  3083               	movlw	131
  2112  01E5  0258               	subwf	_aveTmr1Val,w
  2113  01E6  3014               	movlw	20
  2114  01E7  3B59               	subwfb	_aveTmr1Val+1,w
  2115  01E8  1803               	btfsc	3,0
  2116  01E9  0008               	return
  2117                           
  2118                           ;newmain.c: 263: ADC_Test = 0;
  2119  01EA  01F0               	clrf	_ADC_Test	;volatile
  2120  01EB  01F1               	clrf	_ADC_Test+1	;volatile
  2121                           
  2122                           ;newmain.c: 265: for(int i = 0; i < 6; i++){
  2123  01EC  01D5               	clrf	verifyACSignal@i
  2124  01ED  01D6               	clrf	verifyACSignal@i+1
  2125  01EE  0856               	movf	verifyACSignal@i+1,w
  2126  01EF  3A80               	xorlw	128
  2127  01F0  00D1               	movwf	??_verifyACSignal
  2128  01F1  3080               	movlw	128
  2129  01F2  0251               	subwf	??_verifyACSignal,w
  2130  01F3  1D03               	skipz
  2131  01F4  29F7               	goto	u3575
  2132  01F5  3006               	movlw	6
  2133  01F6  0255               	subwf	verifyACSignal@i,w
  2134  01F7                     u3575:	
  2135  01F7  1803               	btfsc	3,0
  2136  01F8  2A15               	goto	l3459
  2137  01F9                     l3451:	
  2138                           
  2139                           ;newmain.c: 267: ToggleGLED();
  2140  01F9  318E  26E5  3180   	fcall	_ToggleGLED
  2141                           
  2142                           ;newmain.c: 268: _delay((unsigned long)((100)*(4000000/4000.0)));
  2143  01FC  3082               	movlw	130
  2144  01FD  0020               	movlb	0	; select bank0
  2145  01FE  00D1               	movwf	??_verifyACSignal
  2146  01FF  30DD               	movlw	221
  2147  0200                     u3657:	
  2148  0200  0B89               	decfsz	9,f
  2149  0201  2A00               	goto	u3657
  2150  0202  0BD1               	decfsz	??_verifyACSignal,f
  2151  0203  2A00               	goto	u3657
  2152  0204  3200               	nop2
  2153  0205  3001               	movlw	1
  2154  0206  0020               	movlb	0	; select bank0
  2155  0207  07D5               	addwf	verifyACSignal@i,f
  2156  0208  3000               	movlw	0
  2157  0209  3DD6               	addwfc	verifyACSignal@i+1,f
  2158  020A  0856               	movf	verifyACSignal@i+1,w
  2159  020B  3A80               	xorlw	128
  2160  020C  00D1               	movwf	??_verifyACSignal
  2161  020D  3080               	movlw	128
  2162  020E  0251               	subwf	??_verifyACSignal,w
  2163  020F  1D03               	skipz
  2164  0210  2A13               	goto	u3585
  2165  0211  3006               	movlw	6
  2166  0212  0255               	subwf	verifyACSignal@i,w
  2167  0213                     u3585:	
  2168  0213  1C03               	skipc
  2169  0214  29F9               	goto	l3451
  2170  0215                     l3459:	
  2171                           
  2172                           ;newmain.c: 269: }
  2173                           ;newmain.c: 270: ADC_OPTO_Relay(1);
  2174  0215  3001               	movlw	1
  2175  0216  318F  2738  3180   	fcall	_ADC_OPTO_Relay
  2176                           
  2177                           ;newmain.c: 272: setupTestParameters();
  2178  0219  3182  221C         	fcall	_setupTestParameters
  2179                           
  2180                           ;newmain.c: 273: }
  2181  021B  0008               	return
  2182  021C                     __end_of_verifyACSignal:	
  2183                           ;newmain.c: 277: return;
  2184                           
  2185                           ;newmain.c: 274: else{}
  2186                           
  2187                           
  2188                           	psect	text2
  2189  021C                     __ptext2:	
  2190 ;; *************** function _setupTestParameters *****************
  2191 ;; Defined at:
  2192 ;;		line 280 in file "newmain.c"
  2193 ;; Parameters:    Size  Location     Type
  2194 ;;		None
  2195 ;; Auto vars:     Size  Location     Type
  2196 ;;  handshake3      1   28[BANK0 ] unsigned char 
  2197 ;; Return value:  Size  Location     Type
  2198 ;;                  1    wreg      void 
  2199 ;; Registers used:
  2200 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2201 ;; Tracked objects:
  2202 ;;		On entry : 0/0
  2203 ;;		On exit  : 0/0
  2204 ;;		Unchanged: 0/0
  2205 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2206 ;;      Params:         0       0       0       0
  2207 ;;      Locals:         0       1       0       0
  2208 ;;      Temps:          0       2       0       0
  2209 ;;      Totals:         0       3       0       0
  2210 ;;Total ram usage:        3 bytes
  2211 ;; Hardware stack levels used:    1
  2212 ;; Hardware stack levels required when called:    4
  2213 ;; This function calls:
  2214 ;;		_PassLED
  2215 ;;		_UART_TX
  2216 ;;		_UART_TX_String
  2217 ;;		___lldiv
  2218 ;;		___lmul
  2219 ;;		_atoi
  2220 ;;		_beginHighCurrentTest
  2221 ;;		_empty_RX_BUFF
  2222 ;; This function is called by:
  2223 ;;		_verifyACSignal
  2224 ;; This function uses a non-reentrant model
  2225 ;;
  2226                           
  2227                           
  2228                           ;psect for function _setupTestParameters
  2229  021C                     _setupTestParameters:	
  2230                           
  2231                           ;newmain.c: 283: INTCONbits.PEIE = 1;
  2232                           
  2233                           ;incstack = 0
  2234                           ; Regs used in _setupTestParameters: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2235  021C  170B               	bsf	11,6	;volatile
  2236                           
  2237                           ;newmain.c: 286: RCSTAbits.CREN = 0; RCSTAbits.CREN = 1;
  2238  021D  0023               	movlb	3	; select bank3
  2239  021E  121D               	bcf	29,4	;volatile
  2240  021F  161D               	bsf	29,4	;volatile
  2241                           
  2242                           ;newmain.c: 288: unsigned char handshake3 = '0';
  2243  0220  3030               	movlw	48
  2244  0221  0020               	movlb	0	; select bank0
  2245  0222  00BA               	movwf	??_setupTestParameters
  2246  0223  083A               	movf	??_setupTestParameters,w
  2247  0224  00BC               	movwf	setupTestParameters@handshake3
  2248                           
  2249                           ;newmain.c: 290: PassLED(1);
  2250  0225  3001               	movlw	1
  2251  0226  318F  272A  3182   	fcall	_PassLED
  2252  0229                     l3227:	
  2253                           ;newmain.c: 292: while(handshake3 != '3'){
  2254                           
  2255  0229  3033               	movlw	51
  2256  022A  0020               	movlb	0	; select bank0
  2257  022B  063C               	xorwf	setupTestParameters@handshake3,w
  2258  022C  1903               	btfsc	3,2
  2259  022D  2A35               	goto	l3229
  2260                           
  2261                           ;newmain.c: 294: handshake3 = rxArray[0];
  2262  022E  0021               	movlb	1	; select bank1
  2263  022F  083A               	movf	_rxArray^(0+128),w
  2264  0230  0020               	movlb	0	; select bank0
  2265  0231  00BA               	movwf	??_setupTestParameters
  2266  0232  083A               	movf	??_setupTestParameters,w
  2267  0233  00BC               	movwf	setupTestParameters@handshake3
  2268  0234  2A29               	goto	l3227
  2269  0235                     l3229:	
  2270                           
  2271                           ;newmain.c: 295: }
  2272                           ;newmain.c: 296: rxFlag = 0;
  2273  0235  0021               	movlb	1	; select bank1
  2274  0236  01AC               	clrf	_rxFlag^(0+128)
  2275  0237  01AD               	clrf	(_rxFlag+1)^(0+128)
  2276                           
  2277                           ;newmain.c: 297: PassLED(0);
  2278  0238  3000               	movlw	0
  2279  0239  318F  272A  3182   	fcall	_PassLED
  2280                           
  2281                           ;newmain.c: 299: _delay((unsigned long)((10)*(4000000/4000.0)));
  2282  023C  300D               	movlw	13
  2283  023D  0020               	movlb	0	; select bank0
  2284  023E  00BA               	movwf	??_setupTestParameters
  2285  023F  30FB               	movlw	251
  2286  0240                     u3667:	
  2287  0240  0B89               	decfsz	9,f
  2288  0241  2A40               	goto	u3667
  2289  0242  0BBA               	decfsz	??_setupTestParameters,f
  2290  0243  2A40               	goto	u3667
  2291  0244  3200               	nop2
  2292                           
  2293                           ;newmain.c: 300: UART_TX(rxArray[0]);
  2294  0245  0021               	movlb	1	; select bank1
  2295  0246  083A               	movf	_rxArray^(0+128),w
  2296  0247  0020               	movlb	0	; select bank0
  2297  0248  00BA               	movwf	??_setupTestParameters
  2298  0249  01BB               	clrf	??_setupTestParameters+1
  2299  024A  083A               	movf	??_setupTestParameters,w
  2300  024B  00A0               	movwf	UART_TX@data
  2301  024C  083B               	movf	??_setupTestParameters+1,w
  2302  024D  00A1               	movwf	UART_TX@data+1
  2303  024E  318E  26C4  3182   	fcall	_UART_TX
  2304                           
  2305                           ;newmain.c: 301: empty_RX_BUFF();
  2306  0251  3187  275D  3182   	fcall	_empty_RX_BUFF
  2307  0254                     l3239:	
  2308                           ;newmain.c: 305: while(rxArray[0] == '\0'){}
  2309                           
  2310  0254  0021               	movlb	1	; select bank1
  2311  0255  083A               	movf	_rxArray^(0+128),w
  2312  0256  1903               	btfsc	3,2
  2313  0257  2A54               	goto	l3239
  2314                           
  2315                           ;newmain.c: 306: rxFlag = 0;
  2316  0258  01AC               	clrf	_rxFlag^(0+128)
  2317  0259  01AD               	clrf	(_rxFlag+1)^(0+128)
  2318                           
  2319                           ;newmain.c: 308: _delay((unsigned long)((10)*(4000000/4000.0)));
  2320  025A  300D               	movlw	13
  2321  025B  0020               	movlb	0	; select bank0
  2322  025C  00BA               	movwf	??_setupTestParameters
  2323  025D  30FB               	movlw	251
  2324  025E                     u3677:	
  2325  025E  0B89               	decfsz	9,f
  2326  025F  2A5E               	goto	u3677
  2327  0260  0BBA               	decfsz	??_setupTestParameters,f
  2328  0261  2A5E               	goto	u3677
  2329  0262  3200               	nop2
  2330                           
  2331                           ;newmain.c: 309: UART_TX_String(rxArray);
  2332  0263  30BA               	movlw	(low (_rxArray| 0))& (0+255)
  2333  0264  3187  2782  3182   	fcall	_UART_TX_String
  2334                           
  2335                           ;newmain.c: 311: PoW = atoi(rxArray);
  2336  0267  30BA               	movlw	(low (_rxArray| 0))& (0+255)
  2337  0268  3184  24A0  3182   	fcall	_atoi
  2338  026B  0020               	movlb	0	; select bank0
  2339  026C  0826               	movf	?_atoi,w
  2340  026D  00EC               	movwf	_PoW
  2341  026E  0827               	movf	?_atoi+1,w
  2342  026F  00ED               	movwf	_PoW+1
  2343  0270  0D89               	rlf	9,f
  2344  0271  3B89               	subwfb	9,f
  2345  0272  0989               	comf	9,f
  2346  0273  00EE               	movwf	_PoW+2
  2347  0274  00EF               	movwf	_PoW+3
  2348                           
  2349                           ;newmain.c: 313: empty_RX_BUFF();
  2350  0275  3187  275D  3182   	fcall	_empty_RX_BUFF
  2351  0278                     l3251:	
  2352                           ;newmain.c: 316: while(rxArray[0] == '\0'){}
  2353                           
  2354  0278  0021               	movlb	1	; select bank1
  2355  0279  083A               	movf	_rxArray^(0+128),w
  2356  027A  1903               	btfsc	3,2
  2357  027B  2A78               	goto	l3251
  2358                           
  2359                           ;newmain.c: 317: rxFlag = 0;
  2360  027C  01AC               	clrf	_rxFlag^(0+128)
  2361  027D  01AD               	clrf	(_rxFlag+1)^(0+128)
  2362                           
  2363                           ;newmain.c: 319: _delay((unsigned long)((10)*(4000000/4000.0)));
  2364  027E  300D               	movlw	13
  2365  027F  0020               	movlb	0	; select bank0
  2366  0280  00BA               	movwf	??_setupTestParameters
  2367  0281  30FB               	movlw	251
  2368  0282                     u3687:	
  2369  0282  0B89               	decfsz	9,f
  2370  0283  2A82               	goto	u3687
  2371  0284  0BBA               	decfsz	??_setupTestParameters,f
  2372  0285  2A82               	goto	u3687
  2373  0286  3200               	nop2
  2374                           
  2375                           ;newmain.c: 320: UART_TX_String(rxArray);
  2376  0287  30BA               	movlw	(low (_rxArray| 0))& (0+255)
  2377  0288  3187  2782  3182   	fcall	_UART_TX_String
  2378                           
  2379                           ;newmain.c: 321: cycles = atoi(rxArray);
  2380  028B  30BA               	movlw	(low (_rxArray| 0))& (0+255)
  2381  028C  3184  24A0  3182   	fcall	_atoi
  2382  028F  0020               	movlb	0	; select bank0
  2383  0290  0827               	movf	?_atoi+1,w
  2384  0291  0021               	movlb	1	; select bank1
  2385  0292  00AB               	movwf	(_cycles+1)^(0+128)
  2386  0293  0020               	movlb	0	; select bank0
  2387  0294  0826               	movf	?_atoi,w
  2388  0295  0021               	movlb	1	; select bank1
  2389  0296  00AA               	movwf	_cycles^(0+128)
  2390                           
  2391                           ;newmain.c: 323: empty_RX_BUFF();
  2392  0297  3187  275D  3182   	fcall	_empty_RX_BUFF
  2393                           
  2394                           ;newmain.c: 328: PoW = ((PoW*100)/360);
  2395  029A  3000               	movlw	0
  2396  029B  0020               	movlb	0	; select bank0
  2397  029C  00AF               	movwf	___lldiv@divisor+3
  2398  029D  3000               	movlw	0
  2399  029E  00AE               	movwf	___lldiv@divisor+2
  2400  029F  3001               	movlw	1
  2401  02A0  00AD               	movwf	___lldiv@divisor+1
  2402  02A1  3068               	movlw	104
  2403  02A2  00AC               	movwf	___lldiv@divisor
  2404  02A3  086F               	movf	_PoW+3,w
  2405  02A4  00A3               	movwf	___lmul@multiplier+3
  2406  02A5  086E               	movf	_PoW+2,w
  2407  02A6  00A2               	movwf	___lmul@multiplier+2
  2408  02A7  086D               	movf	_PoW+1,w
  2409  02A8  00A1               	movwf	___lmul@multiplier+1
  2410  02A9  086C               	movf	_PoW,w
  2411  02AA  00A0               	movwf	___lmul@multiplier
  2412  02AB  3000               	movlw	0
  2413  02AC  00A7               	movwf	___lmul@multiplicand+3
  2414  02AD  3000               	movlw	0
  2415  02AE  00A6               	movwf	___lmul@multiplicand+2
  2416  02AF  3000               	movlw	0
  2417  02B0  00A5               	movwf	___lmul@multiplicand+1
  2418  02B1  3064               	movlw	100
  2419  02B2  00A4               	movwf	___lmul@multiplicand
  2420  02B3  3186  26AB  3182   	fcall	___lmul
  2421  02B6  0020               	movlb	0	; select bank0
  2422  02B7  0823               	movf	?___lmul+3,w
  2423  02B8  00B3               	movwf	___lldiv@dividend+3
  2424  02B9  0822               	movf	?___lmul+2,w
  2425  02BA  00B2               	movwf	___lldiv@dividend+2
  2426  02BB  0821               	movf	?___lmul+1,w
  2427  02BC  00B1               	movwf	___lldiv@dividend+1
  2428  02BD  0820               	movf	?___lmul,w
  2429  02BE  00B0               	movwf	___lldiv@dividend
  2430  02BF  3185  2570  3182   	fcall	___lldiv
  2431  02C2  0020               	movlb	0	; select bank0
  2432  02C3  082F               	movf	?___lldiv+3,w
  2433  02C4  00EF               	movwf	_PoW+3
  2434  02C5  082E               	movf	?___lldiv+2,w
  2435  02C6  00EE               	movwf	_PoW+2
  2436  02C7  082D               	movf	?___lldiv+1,w
  2437  02C8  00ED               	movwf	_PoW+1
  2438  02C9  082C               	movf	?___lldiv,w
  2439  02CA  00EC               	movwf	_PoW
  2440                           
  2441                           ;newmain.c: 329: PoW = ((10000/100)*PoW);
  2442  02CB  086F               	movf	_PoW+3,w
  2443  02CC  00A3               	movwf	___lmul@multiplier+3
  2444  02CD  086E               	movf	_PoW+2,w
  2445  02CE  00A2               	movwf	___lmul@multiplier+2
  2446  02CF  086D               	movf	_PoW+1,w
  2447  02D0  00A1               	movwf	___lmul@multiplier+1
  2448  02D1  086C               	movf	_PoW,w
  2449  02D2  00A0               	movwf	___lmul@multiplier
  2450  02D3  3000               	movlw	0
  2451  02D4  00A7               	movwf	___lmul@multiplicand+3
  2452  02D5  3000               	movlw	0
  2453  02D6  00A6               	movwf	___lmul@multiplicand+2
  2454  02D7  3000               	movlw	0
  2455  02D8  00A5               	movwf	___lmul@multiplicand+1
  2456  02D9  3064               	movlw	100
  2457  02DA  00A4               	movwf	___lmul@multiplicand
  2458  02DB  3186  26AB  3182   	fcall	___lmul
  2459  02DE  0020               	movlb	0	; select bank0
  2460  02DF  0823               	movf	?___lmul+3,w
  2461  02E0  00EF               	movwf	_PoW+3
  2462  02E1  0822               	movf	?___lmul+2,w
  2463  02E2  00EE               	movwf	_PoW+2
  2464  02E3  0821               	movf	?___lmul+1,w
  2465  02E4  00ED               	movwf	_PoW+1
  2466  02E5  0820               	movf	?___lmul,w
  2467  02E6  00EC               	movwf	_PoW
  2468                           
  2469                           ;newmain.c: 332: beginHighCurrentTest();
  2470  02E7  3184  2429         	fcall	_beginHighCurrentTest
  2471  02E9  0008               	return
  2472  02EA                     __end_of_setupTestParameters:	
  2473                           ;newmain.c: 341: return;
  2474                           
  2475                           
  2476                           	psect	text3
  2477  0429                     __ptext3:	
  2478 ;; *************** function _beginHighCurrentTest *****************
  2479 ;; Defined at:
  2480 ;;		line 345 in file "newmain.c"
  2481 ;; Parameters:    Size  Location     Type
  2482 ;;		None
  2483 ;; Auto vars:     Size  Location     Type
  2484 ;;		None
  2485 ;; Return value:  Size  Location     Type
  2486 ;;                  1    wreg      void 
  2487 ;; Registers used:
  2488 ;;		wreg, status,2, status,0, pclath, cstack
  2489 ;; Tracked objects:
  2490 ;;		On entry : 0/0
  2491 ;;		On exit  : 0/0
  2492 ;;		Unchanged: 0/0
  2493 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2494 ;;      Params:         0       0       0       0
  2495 ;;      Locals:         0       0       0       0
  2496 ;;      Temps:          0       4       0       0
  2497 ;;      Totals:         0       4       0       0
  2498 ;;Total ram usage:        4 bytes
  2499 ;; Hardware stack levels used:    1
  2500 ;; Hardware stack levels required when called:    3
  2501 ;; This function calls:
  2502 ;;		_ADC_OPTO_Relay
  2503 ;;		_SCR
  2504 ;;		_SCR_Relay
  2505 ;;		_TMR1Reset
  2506 ;;		_Timer1Read
  2507 ;; This function is called by:
  2508 ;;		_setupTestParameters
  2509 ;; This function uses a non-reentrant model
  2510 ;;
  2511                           
  2512                           
  2513                           ;psect for function _beginHighCurrentTest
  2514  0429                     _beginHighCurrentTest:	
  2515                           
  2516                           ;newmain.c: 347: mainTest = 1;
  2517                           
  2518                           ;incstack = 0
  2519                           ; Regs used in _beginHighCurrentTest: [wreg+status,2+status,0+pclath+cstack]
  2520  0429  3001               	movlw	1
  2521  042A  0021               	movlb	1	; select bank1
  2522  042B  00B0               	movwf	_mainTest^(0+128)	;volatile
  2523  042C  3000               	movlw	0
  2524  042D  00B1               	movwf	(_mainTest^(0+128)+1)	;volatile
  2525                           
  2526                           ;newmain.c: 348: PIE1bits.RCIE = 0;
  2527  042E  1291               	bcf	17,5	;volatile
  2528                           
  2529                           ;newmain.c: 367: if(PoW > 5000)
  2530  042F  0020               	movlb	0	; select bank0
  2531  0430  086F               	movf	_PoW+3,w
  2532  0431  1D03               	btfss	3,2
  2533  0432  2C3C               	goto	l2853
  2534  0433  086E               	movf	_PoW+2,w
  2535  0434  1D03               	btfss	3,2
  2536  0435  2C3C               	goto	l2853
  2537  0436  3089               	movlw	137
  2538  0437  026C               	subwf	_PoW,w
  2539  0438  3013               	movlw	19
  2540  0439  3B6D               	subwfb	_PoW+1,w
  2541  043A  1C03               	btfss	3,0
  2542  043B  2C46               	goto	l2857
  2543  043C                     l2853:	
  2544                           
  2545                           ;newmain.c: 368: {
  2546                           ;newmain.c: 370: SCR_Relay(1);
  2547  043C  3001               	movlw	1
  2548  043D  318F  2754  3184   	fcall	_SCR_Relay
  2549                           
  2550                           ;newmain.c: 371: NegCycle = 1;
  2551  0440  3001               	movlw	1
  2552  0441  0020               	movlb	0	; select bank0
  2553  0442  00DE               	movwf	_NegCycle	;volatile
  2554  0443  3000               	movlw	0
  2555  0444  00DF               	movwf	_NegCycle+1	;volatile
  2556                           
  2557                           ;newmain.c: 373: }
  2558  0445  2C5B               	goto	l2863
  2559  0446                     l2857:	
  2560                           
  2561                           ;newmain.c: 374: else if (PoW < 4999){
  2562  0446  086F               	movf	_PoW+3,w
  2563  0447  1D03               	btfss	3,2
  2564  0448  2C5B               	goto	l2863
  2565  0449  086E               	movf	_PoW+2,w
  2566  044A  1D03               	btfss	3,2
  2567  044B  2C5B               	goto	l2863
  2568  044C  3087               	movlw	135
  2569  044D  026C               	subwf	_PoW,w
  2570  044E  3013               	movlw	19
  2571  044F  3B6D               	subwfb	_PoW+1,w
  2572  0450  1803               	btfsc	3,0
  2573  0451  2C5B               	goto	l2863
  2574                           
  2575                           ;newmain.c: 376: SCR_Relay(0);
  2576  0452  3000               	movlw	0
  2577  0453  318F  2754  3184   	fcall	_SCR_Relay
  2578                           
  2579                           ;newmain.c: 377: PosCycle = 1;
  2580  0456  3001               	movlw	1
  2581  0457  0020               	movlb	0	; select bank0
  2582  0458  00E0               	movwf	_PosCycle	;volatile
  2583  0459  3000               	movlw	0
  2584  045A  00E1               	movwf	_PosCycle+1	;volatile
  2585  045B                     l2863:	
  2586                           
  2587                           ;newmain.c: 383: }
  2588                           ;newmain.c: 390: INTCONbits.INTE = 1;
  2589  045B  160B               	bsf	11,4	;volatile
  2590                           
  2591                           ;newmain.c: 391: INTCONbits.IOCIE = 1;
  2592  045C  158B               	bsf	11,3	;volatile
  2593  045D                     l2869:	
  2594                           ;newmain.c: 393: while(SCR_On <= PoW)
  2595                           
  2596  045D  0021               	movlb	1	; select bank1
  2597  045E  082E               	movf	_SCR_On^(0+128),w	;volatile
  2598  045F  0020               	movlb	0	; select bank0
  2599  0460  00A4               	movwf	??_beginHighCurrentTest
  2600  0461  0021               	movlb	1	; select bank1
  2601  0462  082F               	movf	(_SCR_On+1)^(0+128),w	;volatile
  2602  0463  0020               	movlb	0	; select bank0
  2603  0464  00A5               	movwf	??_beginHighCurrentTest+1
  2604  0465  01A6               	clrf	??_beginHighCurrentTest+2
  2605  0466  01A7               	clrf	??_beginHighCurrentTest+3
  2606  0467  0827               	movf	??_beginHighCurrentTest+3,w
  2607  0468  026F               	subwf	_PoW+3,w
  2608  0469  1D03               	skipz
  2609  046A  2C75               	goto	u2735
  2610  046B  0826               	movf	??_beginHighCurrentTest+2,w
  2611  046C  026E               	subwf	_PoW+2,w
  2612  046D  1D03               	skipz
  2613  046E  2C75               	goto	u2735
  2614  046F  0825               	movf	??_beginHighCurrentTest+1,w
  2615  0470  026D               	subwf	_PoW+1,w
  2616  0471  1D03               	skipz
  2617  0472  2C75               	goto	u2735
  2618  0473  0824               	movf	??_beginHighCurrentTest,w
  2619  0474  026C               	subwf	_PoW,w
  2620  0475                     u2735:	
  2621  0475  1C03               	btfss	3,0
  2622  0476  2C83               	goto	l191
  2623                           
  2624                           ;newmain.c: 394: {
  2625                           ;newmain.c: 395: SCR_On = Timer1Read();
  2626  0477  318F  27CB  3184   	fcall	_Timer1Read
  2627  047A  0020               	movlb	0	; select bank0
  2628  047B  0821               	movf	?_Timer1Read+1,w
  2629  047C  0021               	movlb	1	; select bank1
  2630  047D  00AF               	movwf	(_SCR_On+1)^(0+128)	;volatile
  2631  047E  0020               	movlb	0	; select bank0
  2632  047F  0820               	movf	?_Timer1Read,w
  2633  0480  0021               	movlb	1	; select bank1
  2634  0481  00AE               	movwf	_SCR_On^(0+128)	;volatile
  2635  0482  2C5D               	goto	l2869
  2636  0483                     l191:	
  2637                           
  2638                           ;newmain.c: 396: }
  2639                           ;newmain.c: 397: INTCONbits.INTE = 0;
  2640  0483  120B               	bcf	11,4	;volatile
  2641                           
  2642                           ;newmain.c: 398: INTCONbits.IOCIE = 0;
  2643  0484  118B               	bcf	11,3	;volatile
  2644                           
  2645                           ;newmain.c: 399: SCR(1);
  2646  0485  3001               	movlw	1
  2647  0486  318F  2746  3184   	fcall	_SCR
  2648                           
  2649                           ;newmain.c: 400: SCR_On = 0;
  2650  0489  0021               	movlb	1	; select bank1
  2651  048A  01AE               	clrf	_SCR_On^(0+128)	;volatile
  2652  048B  01AF               	clrf	(_SCR_On+1)^(0+128)	;volatile
  2653                           
  2654                           ;newmain.c: 401: TMR1Reset();
  2655  048C  318E  26B0  3184   	fcall	_TMR1Reset
  2656                           
  2657                           ;newmain.c: 403: NegCycle = 0;
  2658  048F  0020               	movlb	0	; select bank0
  2659  0490  01DE               	clrf	_NegCycle	;volatile
  2660  0491  01DF               	clrf	_NegCycle+1	;volatile
  2661                           
  2662                           ;newmain.c: 404: PosCycle = 0;
  2663  0492  01E0               	clrf	_PosCycle	;volatile
  2664  0493  01E1               	clrf	_PosCycle+1	;volatile
  2665                           
  2666                           ;newmain.c: 405: SCR(0);
  2667  0494  3000               	movlw	0
  2668  0495  318F  2746  3184   	fcall	_SCR
  2669                           
  2670                           ;newmain.c: 406: SCR_Relay(0);
  2671  0498  3000               	movlw	0
  2672  0499  318F  2754  3184   	fcall	_SCR_Relay
  2673                           
  2674                           ;newmain.c: 407: ADC_OPTO_Relay(0);
  2675  049C  3000               	movlw	0
  2676  049D  318F  2738         	fcall	_ADC_OPTO_Relay
  2677  049F  0008               	return
  2678  04A0                     __end_of_beginHighCurrentTest:	
  2679                           ;newmain.c: 410: return;
  2680                           
  2681                           
  2682                           	psect	text4
  2683  0FCB                     __ptext4:	
  2684 ;; *************** function _Timer1Read *****************
  2685 ;; Defined at:
  2686 ;;		line 45 in file "Timer.c"
  2687 ;; Parameters:    Size  Location     Type
  2688 ;;		None
  2689 ;; Auto vars:     Size  Location     Type
  2690 ;;		None
  2691 ;; Return value:  Size  Location     Type
  2692 ;;                  2    0[BANK0 ] unsigned int 
  2693 ;; Registers used:
  2694 ;;		wreg
  2695 ;; Tracked objects:
  2696 ;;		On entry : 0/0
  2697 ;;		On exit  : 0/0
  2698 ;;		Unchanged: 0/0
  2699 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2700 ;;      Params:         0       2       0       0
  2701 ;;      Locals:         0       0       0       0
  2702 ;;      Temps:          0       2       0       0
  2703 ;;      Totals:         0       4       0       0
  2704 ;;Total ram usage:        4 bytes
  2705 ;; Hardware stack levels used:    1
  2706 ;; Hardware stack levels required when called:    2
  2707 ;; This function calls:
  2708 ;;		Nothing
  2709 ;; This function is called by:
  2710 ;;		_beginHighCurrentTest
  2711 ;; This function uses a non-reentrant model
  2712 ;;
  2713                           
  2714                           
  2715                           ;psect for function _Timer1Read
  2716  0FCB                     _Timer1Read:	
  2717                           
  2718                           ;Timer.c: 47: temp_time = TMR1H;
  2719                           
  2720                           ;incstack = 0
  2721                           ; Regs used in _Timer1Read: [wreg]
  2722  0FCB  0020               	movlb	0	; select bank0
  2723  0FCC  0817               	movf	23,w	;volatile
  2724  0FCD  00A2               	movwf	??_Timer1Read
  2725  0FCE  01A3               	clrf	??_Timer1Read+1
  2726  0FCF  0822               	movf	??_Timer1Read,w
  2727  0FD0  00DC               	movwf	_temp_time
  2728  0FD1  0823               	movf	??_Timer1Read+1,w
  2729  0FD2  00DD               	movwf	_temp_time+1
  2730                           
  2731                           ;Timer.c: 48: temp_time <<= 8;
  2732  0FD3  3008               	movlw	8
  2733  0FD4                     u2555:	
  2734  0FD4  35DC               	lslf	_temp_time,f
  2735  0FD5  0DDD               	rlf	_temp_time+1,f
  2736  0FD6  0B89               	decfsz	9,f
  2737  0FD7  2FD4               	goto	u2555
  2738                           
  2739                           ;Timer.c: 49: temp_time += TMR1L;
  2740  0FD8  0816               	movf	22,w	;volatile
  2741  0FD9  00A2               	movwf	??_Timer1Read
  2742  0FDA  01A3               	clrf	??_Timer1Read+1
  2743  0FDB  0822               	movf	??_Timer1Read,w
  2744  0FDC  07DC               	addwf	_temp_time,f
  2745  0FDD  0823               	movf	??_Timer1Read+1,w
  2746  0FDE  3DDD               	addwfc	_temp_time+1,f
  2747                           
  2748                           ;Timer.c: 51: return temp_time;
  2749  0FDF  085D               	movf	_temp_time+1,w
  2750  0FE0  00A1               	movwf	?_Timer1Read+1
  2751  0FE1  085C               	movf	_temp_time,w
  2752  0FE2  00A0               	movwf	?_Timer1Read
  2753  0FE3  0008               	return
  2754  0FE4                     __end_of_Timer1Read:	
  2755                           
  2756                           	psect	text5
  2757  0EB0                     __ptext5:	
  2758 ;; *************** function _TMR1Reset *****************
  2759 ;; Defined at:
  2760 ;;		line 54 in file "Timer.c"
  2761 ;; Parameters:    Size  Location     Type
  2762 ;;		None
  2763 ;; Auto vars:     Size  Location     Type
  2764 ;;		None
  2765 ;; Return value:  Size  Location     Type
  2766 ;;                  1    wreg      void 
  2767 ;; Registers used:
  2768 ;;		status,2
  2769 ;; Tracked objects:
  2770 ;;		On entry : 0/0
  2771 ;;		On exit  : 0/0
  2772 ;;		Unchanged: 0/0
  2773 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2774 ;;      Params:         0       0       0       0
  2775 ;;      Locals:         0       0       0       0
  2776 ;;      Temps:          0       0       0       0
  2777 ;;      Totals:         0       0       0       0
  2778 ;;Total ram usage:        0 bytes
  2779 ;; Hardware stack levels used:    1
  2780 ;; Hardware stack levels required when called:    2
  2781 ;; This function calls:
  2782 ;;		Nothing
  2783 ;; This function is called by:
  2784 ;;		_beginHighCurrentTest
  2785 ;; This function uses a non-reentrant model
  2786 ;;
  2787                           
  2788                           
  2789                           ;psect for function _TMR1Reset
  2790  0EB0                     _TMR1Reset:	
  2791                           
  2792                           ;Timer.c: 56: TMR1ON = 0;
  2793                           
  2794                           ;incstack = 0
  2795                           ; Regs used in _TMR1Reset: [status,2]
  2796  0EB0  0020               	movlb	0	; select bank0
  2797  0EB1  1018               	bcf	24,0	;volatile
  2798                           
  2799                           ;Timer.c: 57: TMR1L = 0x00;
  2800  0EB2  0196               	clrf	22	;volatile
  2801                           
  2802                           ;Timer.c: 58: TMR1H = 0x00;
  2803  0EB3  0197               	clrf	23	;volatile
  2804  0EB4  0008               	return
  2805  0EB5                     __end_of_TMR1Reset:	
  2806                           
  2807                           	psect	text6
  2808  0F54                     __ptext6:	
  2809 ;; *************** function _SCR_Relay *****************
  2810 ;; Defined at:
  2811 ;;		line 117 in file "IO_Controls.c"
  2812 ;; Parameters:    Size  Location     Type
  2813 ;;  OnOff           1    wreg     unsigned char 
  2814 ;; Auto vars:     Size  Location     Type
  2815 ;;  OnOff           1    1[BANK0 ] unsigned char 
  2816 ;; Return value:  Size  Location     Type
  2817 ;;                  1    wreg      void 
  2818 ;; Registers used:
  2819 ;;		wreg, status,2
  2820 ;; Tracked objects:
  2821 ;;		On entry : 0/0
  2822 ;;		On exit  : 0/0
  2823 ;;		Unchanged: 0/0
  2824 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2825 ;;      Params:         0       0       0       0
  2826 ;;      Locals:         0       1       0       0
  2827 ;;      Temps:          0       1       0       0
  2828 ;;      Totals:         0       2       0       0
  2829 ;;Total ram usage:        2 bytes
  2830 ;; Hardware stack levels used:    1
  2831 ;; Hardware stack levels required when called:    2
  2832 ;; This function calls:
  2833 ;;		Nothing
  2834 ;; This function is called by:
  2835 ;;		_beginHighCurrentTest
  2836 ;; This function uses a non-reentrant model
  2837 ;;
  2838                           
  2839                           
  2840                           ;psect for function _SCR_Relay
  2841  0F54                     _SCR_Relay:	
  2842                           
  2843                           ;incstack = 0
  2844                           ; Regs used in _SCR_Relay: [wreg+status,2]
  2845                           ;SCR_Relay@OnOff stored from wreg
  2846  0F54  0020               	movlb	0	; select bank0
  2847  0F55  00A1               	movwf	SCR_Relay@OnOff
  2848                           
  2849                           ;IO_Controls.c: 119: portC.portCByte = PORTC;
  2850  0F56  080E               	movf	14,w	;volatile
  2851  0F57  00A0               	movwf	??_SCR_Relay
  2852  0F58  0820               	movf	??_SCR_Relay,w
  2853  0F59  00F3               	movwf	_portC
  2854                           
  2855                           ;IO_Controls.c: 120: portC.bits.SCR_Relay = OnOff;
  2856  0F5A  0821               	movf	SCR_Relay@OnOff,w
  2857  0F5B  3901               	andlw	1
  2858  0F5C  10F3               	bcf	_portC,1
  2859  0F5D  1D03               	skipz
  2860  0F5E  14F3               	bsf	_portC,1
  2861                           
  2862                           ;IO_Controls.c: 121: PORTC=portC.portCByte;
  2863  0F5F  0873               	movf	_portC,w
  2864  0F60  008E               	movwf	14	;volatile
  2865  0F61  0008               	return
  2866  0F62                     __end_of_SCR_Relay:	
  2867                           ;IO_Controls.c: 122: return;
  2868                           
  2869                           
  2870                           	psect	text7
  2871  0F46                     __ptext7:	
  2872 ;; *************** function _SCR *****************
  2873 ;; Defined at:
  2874 ;;		line 72 in file "IO_Controls.c"
  2875 ;; Parameters:    Size  Location     Type
  2876 ;;  OnOff           1    wreg     unsigned char 
  2877 ;; Auto vars:     Size  Location     Type
  2878 ;;  OnOff           1    1[BANK0 ] unsigned char 
  2879 ;; Return value:  Size  Location     Type
  2880 ;;                  1    wreg      void 
  2881 ;; Registers used:
  2882 ;;		wreg, status,2
  2883 ;; Tracked objects:
  2884 ;;		On entry : 0/0
  2885 ;;		On exit  : 0/0
  2886 ;;		Unchanged: 0/0
  2887 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2888 ;;      Params:         0       0       0       0
  2889 ;;      Locals:         0       1       0       0
  2890 ;;      Temps:          0       1       0       0
  2891 ;;      Totals:         0       2       0       0
  2892 ;;Total ram usage:        2 bytes
  2893 ;; Hardware stack levels used:    1
  2894 ;; Hardware stack levels required when called:    2
  2895 ;; This function calls:
  2896 ;;		Nothing
  2897 ;; This function is called by:
  2898 ;;		_beginHighCurrentTest
  2899 ;; This function uses a non-reentrant model
  2900 ;;
  2901                           
  2902                           
  2903                           ;psect for function _SCR
  2904  0F46                     _SCR:	
  2905                           
  2906                           ;incstack = 0
  2907                           ; Regs used in _SCR: [wreg+status,2]
  2908                           ;SCR@OnOff stored from wreg
  2909  0F46  0020               	movlb	0	; select bank0
  2910  0F47  00A1               	movwf	SCR@OnOff
  2911                           
  2912                           ;IO_Controls.c: 74: portC.portCByte = PORTC;
  2913  0F48  080E               	movf	14,w	;volatile
  2914  0F49  00A0               	movwf	??_SCR
  2915  0F4A  0820               	movf	??_SCR,w
  2916  0F4B  00F3               	movwf	_portC
  2917                           
  2918                           ;IO_Controls.c: 75: portC.bits.SCR = OnOff;
  2919  0F4C  0821               	movf	SCR@OnOff,w
  2920  0F4D  3901               	andlw	1
  2921  0F4E  1173               	bcf	_portC,2
  2922  0F4F  1D03               	skipz
  2923  0F50  1573               	bsf	_portC,2
  2924                           
  2925                           ;IO_Controls.c: 76: PORTC = portC.portCByte;
  2926  0F51  0873               	movf	_portC,w
  2927  0F52  008E               	movwf	14	;volatile
  2928  0F53  0008               	return
  2929  0F54                     __end_of_SCR:	
  2930                           ;IO_Controls.c: 77: return;
  2931                           
  2932                           
  2933                           	psect	text8
  2934  0F38                     __ptext8:	
  2935 ;; *************** function _ADC_OPTO_Relay *****************
  2936 ;; Defined at:
  2937 ;;		line 95 in file "IO_Controls.c"
  2938 ;; Parameters:    Size  Location     Type
  2939 ;;  OnOff           1    wreg     unsigned char 
  2940 ;; Auto vars:     Size  Location     Type
  2941 ;;  OnOff           1    1[BANK0 ] unsigned char 
  2942 ;; Return value:  Size  Location     Type
  2943 ;;                  1    wreg      void 
  2944 ;; Registers used:
  2945 ;;		wreg, status,2
  2946 ;; Tracked objects:
  2947 ;;		On entry : 0/0
  2948 ;;		On exit  : 0/0
  2949 ;;		Unchanged: 0/0
  2950 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2951 ;;      Params:         0       0       0       0
  2952 ;;      Locals:         0       1       0       0
  2953 ;;      Temps:          0       1       0       0
  2954 ;;      Totals:         0       2       0       0
  2955 ;;Total ram usage:        2 bytes
  2956 ;; Hardware stack levels used:    1
  2957 ;; Hardware stack levels required when called:    2
  2958 ;; This function calls:
  2959 ;;		Nothing
  2960 ;; This function is called by:
  2961 ;;		_verifyACSignal
  2962 ;;		_beginHighCurrentTest
  2963 ;; This function uses a non-reentrant model
  2964 ;;
  2965                           
  2966                           
  2967                           ;psect for function _ADC_OPTO_Relay
  2968  0F38                     _ADC_OPTO_Relay:	
  2969                           
  2970                           ;incstack = 0
  2971                           ; Regs used in _ADC_OPTO_Relay: [wreg+status,2]
  2972                           ;ADC_OPTO_Relay@OnOff stored from wreg
  2973  0F38  0020               	movlb	0	; select bank0
  2974  0F39  00A1               	movwf	ADC_OPTO_Relay@OnOff
  2975                           
  2976                           ;IO_Controls.c: 97: portC.portCByte = PORTC;
  2977  0F3A  080E               	movf	14,w	;volatile
  2978  0F3B  00A0               	movwf	??_ADC_OPTO_Relay
  2979  0F3C  0820               	movf	??_ADC_OPTO_Relay,w
  2980  0F3D  00F3               	movwf	_portC
  2981                           
  2982                           ;IO_Controls.c: 98: portC.bits.ADC_OPTORelay = OnOff;
  2983  0F3E  0821               	movf	ADC_OPTO_Relay@OnOff,w
  2984  0F3F  3901               	andlw	1
  2985  0F40  1273               	bcf	_portC,4
  2986  0F41  1D03               	skipz
  2987  0F42  1673               	bsf	_portC,4
  2988                           
  2989                           ;IO_Controls.c: 99: PORTC=portC.portCByte;
  2990  0F43  0873               	movf	_portC,w
  2991  0F44  008E               	movwf	14	;volatile
  2992  0F45  0008               	return
  2993  0F46                     __end_of_ADC_OPTO_Relay:	
  2994                           ;IO_Controls.c: 100: return;
  2995                           
  2996                           
  2997                           	psect	text9
  2998  04A0                     __ptext9:	
  2999 ;; *************** function _atoi *****************
  3000 ;; Defined at:
  3001 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\atoi.c"
  3002 ;; Parameters:    Size  Location     Type
  3003 ;;  s               1    wreg     PTR const unsigned char 
  3004 ;;		 -> rxArray(20), 
  3005 ;; Auto vars:     Size  Location     Type
  3006 ;;  s               1   13[BANK0 ] PTR const unsigned char 
  3007 ;;		 -> rxArray(20), 
  3008 ;;  a               2   11[BANK0 ] int 
  3009 ;;  sign            1   10[BANK0 ] unsigned char 
  3010 ;; Return value:  Size  Location     Type
  3011 ;;                  2    6[BANK0 ] int 
  3012 ;; Registers used:
  3013 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3014 ;; Tracked objects:
  3015 ;;		On entry : 0/0
  3016 ;;		On exit  : 0/0
  3017 ;;		Unchanged: 0/0
  3018 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3019 ;;      Params:         0       2       0       0
  3020 ;;      Locals:         0       4       0       0
  3021 ;;      Temps:          0       2       0       0
  3022 ;;      Totals:         0       8       0       0
  3023 ;;Total ram usage:        8 bytes
  3024 ;; Hardware stack levels used:    1
  3025 ;; Hardware stack levels required when called:    3
  3026 ;; This function calls:
  3027 ;;		___wmul
  3028 ;;		_isdigit
  3029 ;; This function is called by:
  3030 ;;		_setupTestParameters
  3031 ;; This function uses a non-reentrant model
  3032 ;;
  3033                           
  3034                           
  3035                           ;psect for function _atoi
  3036  04A0                     _atoi:	
  3037                           
  3038                           ;incstack = 0
  3039                           ; Regs used in _atoi: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3040                           ;atoi@s stored from wreg
  3041  04A0  0020               	movlb	0	; select bank0
  3042  04A1  00AD               	movwf	atoi@s
  3043  04A2                     l2817:	
  3044  04A2  082D               	movf	atoi@s,w
  3045  04A3  0086               	movwf	6
  3046  04A4  0187               	clrf	7
  3047  04A5  3020               	movlw	32
  3048  04A6  0601               	xorwf	1,w
  3049  04A7  1D03               	btfss	3,2
  3050  04A8  2CAE               	goto	l2819
  3051  04A9                     l2815:	
  3052  04A9  3001               	movlw	1
  3053  04AA  00A8               	movwf	??_atoi
  3054  04AB  0828               	movf	??_atoi,w
  3055  04AC  07AD               	addwf	atoi@s,f
  3056  04AD  2CA2               	goto	l2817
  3057  04AE                     l2819:	
  3058  04AE  082D               	movf	atoi@s,w
  3059  04AF  0086               	movwf	6
  3060  04B0  0187               	clrf	7
  3061  04B1  3009               	movlw	9
  3062  04B2  0601               	xorwf	1,w
  3063  04B3  1903               	btfsc	3,2
  3064  04B4  2CA9               	goto	l2815
  3065  04B5  01AB               	clrf	atoi@a
  3066  04B6  01AC               	clrf	atoi@a+1
  3067  04B7  01AA               	clrf	atoi@sign
  3068  04B8  082D               	movf	atoi@s,w
  3069  04B9  0086               	movwf	6
  3070  04BA  0187               	clrf	7
  3071  04BB  302D               	movlw	45
  3072  04BC  0601               	xorwf	1,w
  3073  04BD  1D03               	btfss	3,2
  3074  04BE  2CC4               	goto	l2827
  3075  04BF  3001               	movlw	1
  3076  04C0  00A8               	movwf	??_atoi
  3077  04C1  0828               	movf	??_atoi,w
  3078  04C2  07AA               	addwf	atoi@sign,f
  3079  04C3  2CCB               	goto	l2833
  3080  04C4                     l2827:	
  3081  04C4  082D               	movf	atoi@s,w
  3082  04C5  0086               	movwf	6
  3083  04C6  0187               	clrf	7
  3084  04C7  302B               	movlw	43
  3085  04C8  0601               	xorwf	1,w
  3086  04C9  1D03               	btfss	3,2
  3087  04CA  2CCF               	goto	l2835
  3088  04CB                     l2833:	
  3089  04CB  3001               	movlw	1
  3090  04CC  00A8               	movwf	??_atoi
  3091  04CD  0828               	movf	??_atoi,w
  3092  04CE  07AD               	addwf	atoi@s,f
  3093  04CF                     l2835:	
  3094  04CF  082D               	movf	atoi@s,w
  3095  04D0  0086               	movwf	6
  3096  04D1  0187               	clrf	7
  3097  04D2  0801               	movf	1,w
  3098  04D3  318F  2762  3184   	fcall	_isdigit
  3099  04D6  1C03               	btfss	3,0
  3100  04D7  2CF6               	goto	l2837
  3101  04D8  0020               	movlb	0	; select bank0
  3102  04D9  082C               	movf	atoi@a+1,w
  3103  04DA  00A1               	movwf	___wmul@multiplier+1
  3104  04DB  082B               	movf	atoi@a,w
  3105  04DC  00A0               	movwf	___wmul@multiplier
  3106  04DD  300A               	movlw	10
  3107  04DE  00A2               	movwf	___wmul@multiplicand
  3108  04DF  3000               	movlw	0
  3109  04E0  00A3               	movwf	___wmul@multiplicand+1
  3110  04E1  3187  27C8  3184   	fcall	___wmul
  3111  04E4  0020               	movlb	0	; select bank0
  3112  04E5  082D               	movf	atoi@s,w
  3113  04E6  0086               	movwf	6
  3114  04E7  0187               	clrf	7
  3115  04E8  0801               	movf	1,w
  3116  04E9  0720               	addwf	?___wmul,w
  3117  04EA  00A8               	movwf	??_atoi
  3118  04EB  0821               	movf	?___wmul+1,w
  3119  04EC  1803               	skipnc
  3120  04ED  0A21               	incf	?___wmul+1,w
  3121  04EE  00A9               	movwf	??_atoi+1
  3122  04EF  0828               	movf	??_atoi,w
  3123  04F0  3ED0               	addlw	208
  3124  04F1  00AB               	movwf	atoi@a
  3125  04F2  30FF               	movlw	255
  3126  04F3  3D29               	addwfc	??_atoi+1,w
  3127  04F4  00AC               	movwf	atoi@a+1
  3128  04F5  2CCB               	goto	l2833
  3129  04F6                     l2837:	
  3130  04F6  0020               	movlb	0	; select bank0
  3131  04F7  082A               	movf	atoi@sign,w
  3132  04F8  1903               	btfsc	3,2
  3133  04F9  2D06               	goto	l2843
  3134  04FA  092B               	comf	atoi@a,w
  3135  04FB  00A8               	movwf	??_atoi
  3136  04FC  092C               	comf	atoi@a+1,w
  3137  04FD  00A9               	movwf	??_atoi+1
  3138  04FE  0AA8               	incf	??_atoi,f
  3139  04FF  1903               	skipnz
  3140  0500  0AA9               	incf	??_atoi+1,f
  3141  0501  0828               	movf	??_atoi,w
  3142  0502  00A6               	movwf	?_atoi
  3143  0503  0829               	movf	??_atoi+1,w
  3144  0504  00A7               	movwf	?_atoi+1
  3145  0505  0008               	return
  3146  0506                     l2843:	
  3147  0506  082C               	movf	atoi@a+1,w
  3148  0507  00A7               	movwf	?_atoi+1
  3149  0508  082B               	movf	atoi@a,w
  3150  0509  00A6               	movwf	?_atoi
  3151  050A  0008               	return
  3152  050B                     __end_of_atoi:	
  3153                           
  3154                           	psect	text10
  3155  0F62                     __ptext10:	
  3156 ;; *************** function _isdigit *****************
  3157 ;; Defined at:
  3158 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  3159 ;; Parameters:    Size  Location     Type
  3160 ;;  c               1    wreg     unsigned char 
  3161 ;; Auto vars:     Size  Location     Type
  3162 ;;  c               1    1[BANK0 ] unsigned char 
  3163 ;; Return value:  Size  Location     Type
  3164 ;;		None               void
  3165 ;; Registers used:
  3166 ;;		wreg, status,2, status,0
  3167 ;; Tracked objects:
  3168 ;;		On entry : 0/0
  3169 ;;		On exit  : 0/0
  3170 ;;		Unchanged: 0/0
  3171 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3172 ;;      Params:         0       0       0       0
  3173 ;;      Locals:         0       2       0       0
  3174 ;;      Temps:          0       0       0       0
  3175 ;;      Totals:         0       2       0       0
  3176 ;;Total ram usage:        2 bytes
  3177 ;; Hardware stack levels used:    1
  3178 ;; Hardware stack levels required when called:    2
  3179 ;; This function calls:
  3180 ;;		Nothing
  3181 ;; This function is called by:
  3182 ;;		_atoi
  3183 ;; This function uses a non-reentrant model
  3184 ;;
  3185                           
  3186                           
  3187                           ;psect for function _isdigit
  3188  0F62                     _isdigit:	
  3189                           
  3190                           ;incstack = 0
  3191                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  3192                           ;isdigit@c stored from wreg
  3193  0F62  0020               	movlb	0	; select bank0
  3194  0F63  00A1               	movwf	isdigit@c
  3195  0F64  01A0               	clrf	_isdigit$1124
  3196  0F65  303A               	movlw	58
  3197  0F66  0221               	subwf	isdigit@c,w
  3198  0F67  1803               	skipnc
  3199  0F68  2F6F               	goto	l2779
  3200  0F69  3030               	movlw	48
  3201  0F6A  0221               	subwf	isdigit@c,w
  3202  0F6B  1C03               	skipc
  3203  0F6C  2F6F               	goto	l2779
  3204  0F6D  01A0               	clrf	_isdigit$1124
  3205  0F6E  0AA0               	incf	_isdigit$1124,f
  3206  0F6F                     l2779:	
  3207  0F6F  0C20               	rrf	_isdigit$1124,w
  3208  0F70  0008               	return
  3209  0F71                     __end_of_isdigit:	
  3210                           
  3211                           	psect	text11
  3212  07C8                     __ptext11:	
  3213 ;; *************** function ___wmul *****************
  3214 ;; Defined at:
  3215 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  3216 ;; Parameters:    Size  Location     Type
  3217 ;;  multiplier      2    0[BANK0 ] unsigned int 
  3218 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  3219 ;; Auto vars:     Size  Location     Type
  3220 ;;  product         2    4[BANK0 ] unsigned int 
  3221 ;; Return value:  Size  Location     Type
  3222 ;;                  2    0[BANK0 ] unsigned int 
  3223 ;; Registers used:
  3224 ;;		wreg, status,2, status,0
  3225 ;; Tracked objects:
  3226 ;;		On entry : 0/0
  3227 ;;		On exit  : 0/0
  3228 ;;		Unchanged: 0/0
  3229 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3230 ;;      Params:         0       4       0       0
  3231 ;;      Locals:         0       2       0       0
  3232 ;;      Temps:          0       0       0       0
  3233 ;;      Totals:         0       6       0       0
  3234 ;;Total ram usage:        6 bytes
  3235 ;; Hardware stack levels used:    1
  3236 ;; Hardware stack levels required when called:    2
  3237 ;; This function calls:
  3238 ;;		Nothing
  3239 ;; This function is called by:
  3240 ;;		_atoi
  3241 ;; This function uses a non-reentrant model
  3242 ;;
  3243                           
  3244                           
  3245                           ;psect for function ___wmul
  3246  07C8                     ___wmul:	
  3247                           
  3248                           ;incstack = 0
  3249                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  3250  07C8  0020               	movlb	0	; select bank0
  3251  07C9  01A4               	clrf	___wmul@product
  3252  07CA  01A5               	clrf	___wmul@product+1
  3253  07CB                     l2759:	
  3254  07CB  1C20               	btfss	___wmul@multiplier,0
  3255  07CC  2FD1               	goto	l547
  3256  07CD  0822               	movf	___wmul@multiplicand,w
  3257  07CE  07A4               	addwf	___wmul@product,f
  3258  07CF  0823               	movf	___wmul@multiplicand+1,w
  3259  07D0  3DA5               	addwfc	___wmul@product+1,f
  3260  07D1                     l547:	
  3261  07D1  3001               	movlw	1
  3262  07D2                     u2575:	
  3263  07D2  35A2               	lslf	___wmul@multiplicand,f
  3264  07D3  0DA3               	rlf	___wmul@multiplicand+1,f
  3265  07D4  0B89               	decfsz	9,f
  3266  07D5  2FD2               	goto	u2575
  3267  07D6  3001               	movlw	1
  3268  07D7                     u2585:	
  3269  07D7  36A1               	lsrf	___wmul@multiplier+1,f
  3270  07D8  0CA0               	rrf	___wmul@multiplier,f
  3271  07D9  0B89               	decfsz	9,f
  3272  07DA  2FD7               	goto	u2585
  3273  07DB  0820               	movf	___wmul@multiplier,w
  3274  07DC  0421               	iorwf	___wmul@multiplier+1,w
  3275  07DD  1D03               	btfss	3,2
  3276  07DE  2FCB               	goto	l2759
  3277  07DF  0825               	movf	___wmul@product+1,w
  3278  07E0  00A1               	movwf	?___wmul+1
  3279  07E1  0824               	movf	___wmul@product,w
  3280  07E2  00A0               	movwf	?___wmul
  3281  07E3  0008               	return
  3282  07E4                     __end_of___wmul:	
  3283                           
  3284                           	psect	text12
  3285  06AB                     __ptext12:	
  3286 ;; *************** function ___lmul *****************
  3287 ;; Defined at:
  3288 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul32.c"
  3289 ;; Parameters:    Size  Location     Type
  3290 ;;  multiplier      4    0[BANK0 ] unsigned long 
  3291 ;;  multiplicand    4    4[BANK0 ] unsigned long 
  3292 ;; Auto vars:     Size  Location     Type
  3293 ;;  product         4    8[BANK0 ] unsigned long 
  3294 ;; Return value:  Size  Location     Type
  3295 ;;                  4    0[BANK0 ] unsigned long 
  3296 ;; Registers used:
  3297 ;;		wreg, status,2, status,0
  3298 ;; Tracked objects:
  3299 ;;		On entry : 0/0
  3300 ;;		On exit  : 0/0
  3301 ;;		Unchanged: 0/0
  3302 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3303 ;;      Params:         0       8       0       0
  3304 ;;      Locals:         0       4       0       0
  3305 ;;      Temps:          0       0       0       0
  3306 ;;      Totals:         0      12       0       0
  3307 ;;Total ram usage:       12 bytes
  3308 ;; Hardware stack levels used:    1
  3309 ;; Hardware stack levels required when called:    2
  3310 ;; This function calls:
  3311 ;;		Nothing
  3312 ;; This function is called by:
  3313 ;;		_setupTestParameters
  3314 ;; This function uses a non-reentrant model
  3315 ;;
  3316                           
  3317                           
  3318                           ;psect for function ___lmul
  3319  06AB                     ___lmul:	
  3320                           
  3321                           ;incstack = 0
  3322                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  3323  06AB  3000               	movlw	0
  3324  06AC  0020               	movlb	0	; select bank0
  3325  06AD  00AB               	movwf	___lmul@product+3
  3326  06AE  3000               	movlw	0
  3327  06AF  00AA               	movwf	___lmul@product+2
  3328  06B0  3000               	movlw	0
  3329  06B1  00A9               	movwf	___lmul@product+1
  3330  06B2  3000               	movlw	0
  3331  06B3  00A8               	movwf	___lmul@product
  3332  06B4                     l2895:	
  3333  06B4  1C20               	btfss	___lmul@multiplier,0
  3334  06B5  2EBE               	goto	l2899
  3335  06B6  0824               	movf	___lmul@multiplicand,w
  3336  06B7  07A8               	addwf	___lmul@product,f
  3337  06B8  0825               	movf	___lmul@multiplicand+1,w
  3338  06B9  3DA9               	addwfc	___lmul@product+1,f
  3339  06BA  0826               	movf	___lmul@multiplicand+2,w
  3340  06BB  3DAA               	addwfc	___lmul@product+2,f
  3341  06BC  0827               	movf	___lmul@multiplicand+3,w
  3342  06BD  3DAB               	addwfc	___lmul@product+3,f
  3343  06BE                     l2899:	
  3344  06BE  3001               	movlw	1
  3345  06BF                     u2765:	
  3346  06BF  35A4               	lslf	___lmul@multiplicand,f
  3347  06C0  0DA5               	rlf	___lmul@multiplicand+1,f
  3348  06C1  0DA6               	rlf	___lmul@multiplicand+2,f
  3349  06C2  0DA7               	rlf	___lmul@multiplicand+3,f
  3350  06C3  0B89               	decfsz	9,f
  3351  06C4  2EBF               	goto	u2765
  3352  06C5  3001               	movlw	1
  3353  06C6                     u2775:	
  3354  06C6  36A3               	lsrf	___lmul@multiplier+3,f
  3355  06C7  0CA2               	rrf	___lmul@multiplier+2,f
  3356  06C8  0CA1               	rrf	___lmul@multiplier+1,f
  3357  06C9  0CA0               	rrf	___lmul@multiplier,f
  3358  06CA  0B89               	decfsz	9,f
  3359  06CB  2EC6               	goto	u2775
  3360  06CC  0823               	movf	___lmul@multiplier+3,w
  3361  06CD  0422               	iorwf	___lmul@multiplier+2,w
  3362  06CE  0421               	iorwf	___lmul@multiplier+1,w
  3363  06CF  0420               	iorwf	___lmul@multiplier,w
  3364  06D0  1D03               	skipz
  3365  06D1  2EB4               	goto	l2895
  3366  06D2  082B               	movf	___lmul@product+3,w
  3367  06D3  00A3               	movwf	?___lmul+3
  3368  06D4  082A               	movf	___lmul@product+2,w
  3369  06D5  00A2               	movwf	?___lmul+2
  3370  06D6  0829               	movf	___lmul@product+1,w
  3371  06D7  00A1               	movwf	?___lmul+1
  3372  06D8  0828               	movf	___lmul@product,w
  3373  06D9  00A0               	movwf	?___lmul
  3374  06DA  0008               	return
  3375  06DB                     __end_of___lmul:	
  3376                           
  3377                           	psect	text13
  3378  0570                     __ptext13:	
  3379 ;; *************** function ___lldiv *****************
  3380 ;; Defined at:
  3381 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  3382 ;; Parameters:    Size  Location     Type
  3383 ;;  divisor         4   12[BANK0 ] unsigned long 
  3384 ;;  dividend        4   16[BANK0 ] unsigned long 
  3385 ;; Auto vars:     Size  Location     Type
  3386 ;;  quotient        4   21[BANK0 ] unsigned long 
  3387 ;;  counter         1   25[BANK0 ] unsigned char 
  3388 ;; Return value:  Size  Location     Type
  3389 ;;                  4   12[BANK0 ] unsigned long 
  3390 ;; Registers used:
  3391 ;;		wreg, status,2, status,0
  3392 ;; Tracked objects:
  3393 ;;		On entry : 0/0
  3394 ;;		On exit  : 0/0
  3395 ;;		Unchanged: 0/0
  3396 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3397 ;;      Params:         0       8       0       0
  3398 ;;      Locals:         0       5       0       0
  3399 ;;      Temps:          0       1       0       0
  3400 ;;      Totals:         0      14       0       0
  3401 ;;Total ram usage:       14 bytes
  3402 ;; Hardware stack levels used:    1
  3403 ;; Hardware stack levels required when called:    2
  3404 ;; This function calls:
  3405 ;;		Nothing
  3406 ;; This function is called by:
  3407 ;;		_verifyACSignal
  3408 ;;		_setupTestParameters
  3409 ;; This function uses a non-reentrant model
  3410 ;;
  3411                           
  3412                           
  3413                           ;psect for function ___lldiv
  3414  0570                     ___lldiv:	
  3415                           
  3416                           ;incstack = 0
  3417                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  3418  0570  3000               	movlw	0
  3419  0571  0020               	movlb	0	; select bank0
  3420  0572  00B8               	movwf	___lldiv@quotient+3
  3421  0573  3000               	movlw	0
  3422  0574  00B7               	movwf	___lldiv@quotient+2
  3423  0575  3000               	movlw	0
  3424  0576  00B6               	movwf	___lldiv@quotient+1
  3425  0577  3000               	movlw	0
  3426  0578  00B5               	movwf	___lldiv@quotient
  3427  0579  082F               	movf	___lldiv@divisor+3,w
  3428  057A  042E               	iorwf	___lldiv@divisor+2,w
  3429  057B  042D               	iorwf	___lldiv@divisor+1,w
  3430  057C  042C               	iorwf	___lldiv@divisor,w
  3431  057D  1903               	skipnz
  3432  057E  2DBA               	goto	l2987
  3433  057F  01B9               	clrf	___lldiv@counter
  3434  0580  0AB9               	incf	___lldiv@counter,f
  3435  0581                     l2973:	
  3436  0581  1BAF               	btfsc	___lldiv@divisor+3,7
  3437  0582  2D8F               	goto	l2975
  3438  0583  3001               	movlw	1
  3439  0584                     u2965:	
  3440  0584  35AC               	lslf	___lldiv@divisor,f
  3441  0585  0DAD               	rlf	___lldiv@divisor+1,f
  3442  0586  0DAE               	rlf	___lldiv@divisor+2,f
  3443  0587  0DAF               	rlf	___lldiv@divisor+3,f
  3444  0588  0B89               	decfsz	9,f
  3445  0589  2D84               	goto	u2965
  3446  058A  3001               	movlw	1
  3447  058B  00B4               	movwf	??___lldiv
  3448  058C  0834               	movf	??___lldiv,w
  3449  058D  07B9               	addwf	___lldiv@counter,f
  3450  058E  2D81               	goto	l2973
  3451  058F                     l2975:	
  3452  058F  3001               	movlw	1
  3453  0590                     u2985:	
  3454  0590  35B5               	lslf	___lldiv@quotient,f
  3455  0591  0DB6               	rlf	___lldiv@quotient+1,f
  3456  0592  0DB7               	rlf	___lldiv@quotient+2,f
  3457  0593  0DB8               	rlf	___lldiv@quotient+3,f
  3458  0594  0B89               	decfsz	9,f
  3459  0595  2D90               	goto	u2985
  3460  0596  082F               	movf	___lldiv@divisor+3,w
  3461  0597  0233               	subwf	___lldiv@dividend+3,w
  3462  0598  1D03               	skipz
  3463  0599  2DA4               	goto	u2995
  3464  059A  082E               	movf	___lldiv@divisor+2,w
  3465  059B  0232               	subwf	___lldiv@dividend+2,w
  3466  059C  1D03               	skipz
  3467  059D  2DA4               	goto	u2995
  3468  059E  082D               	movf	___lldiv@divisor+1,w
  3469  059F  0231               	subwf	___lldiv@dividend+1,w
  3470  05A0  1D03               	skipz
  3471  05A1  2DA4               	goto	u2995
  3472  05A2  082C               	movf	___lldiv@divisor,w
  3473  05A3  0230               	subwf	___lldiv@dividend,w
  3474  05A4                     u2995:	
  3475  05A4  1C03               	skipc
  3476  05A5  2DAF               	goto	l2983
  3477  05A6  082C               	movf	___lldiv@divisor,w
  3478  05A7  02B0               	subwf	___lldiv@dividend,f
  3479  05A8  082D               	movf	___lldiv@divisor+1,w
  3480  05A9  3BB1               	subwfb	___lldiv@dividend+1,f
  3481  05AA  082E               	movf	___lldiv@divisor+2,w
  3482  05AB  3BB2               	subwfb	___lldiv@dividend+2,f
  3483  05AC  082F               	movf	___lldiv@divisor+3,w
  3484  05AD  3BB3               	subwfb	___lldiv@dividend+3,f
  3485  05AE  1435               	bsf	___lldiv@quotient,0
  3486  05AF                     l2983:	
  3487  05AF  3001               	movlw	1
  3488  05B0                     u3005:	
  3489  05B0  36AF               	lsrf	___lldiv@divisor+3,f
  3490  05B1  0CAE               	rrf	___lldiv@divisor+2,f
  3491  05B2  0CAD               	rrf	___lldiv@divisor+1,f
  3492  05B3  0CAC               	rrf	___lldiv@divisor,f
  3493  05B4  0B89               	decfsz	9,f
  3494  05B5  2DB0               	goto	u3005
  3495  05B6  3001               	movlw	1
  3496  05B7  02B9               	subwf	___lldiv@counter,f
  3497  05B8  1D03               	btfss	3,2
  3498  05B9  2D8F               	goto	l2975
  3499  05BA                     l2987:	
  3500  05BA  0838               	movf	___lldiv@quotient+3,w
  3501  05BB  00AF               	movwf	?___lldiv+3
  3502  05BC  0837               	movf	___lldiv@quotient+2,w
  3503  05BD  00AE               	movwf	?___lldiv+2
  3504  05BE  0836               	movf	___lldiv@quotient+1,w
  3505  05BF  00AD               	movwf	?___lldiv+1
  3506  05C0  0835               	movf	___lldiv@quotient,w
  3507  05C1  00AC               	movwf	?___lldiv
  3508  05C2  0008               	return
  3509  05C3                     __end_of___lldiv:	
  3510                           
  3511                           	psect	text14
  3512  0782                     __ptext14:	
  3513 ;; *************** function _UART_TX_String *****************
  3514 ;; Defined at:
  3515 ;;		line 62 in file "USART.c"
  3516 ;; Parameters:    Size  Location     Type
  3517 ;;  string          1    wreg     PTR unsigned char 
  3518 ;;		 -> rxArray(20), 
  3519 ;; Auto vars:     Size  Location     Type
  3520 ;;  string          1    7[BANK0 ] PTR unsigned char 
  3521 ;;		 -> rxArray(20), 
  3522 ;;  i               2    5[BANK0 ] int 
  3523 ;; Return value:  Size  Location     Type
  3524 ;;                  1    wreg      void 
  3525 ;; Registers used:
  3526 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3527 ;; Tracked objects:
  3528 ;;		On entry : 0/0
  3529 ;;		On exit  : 0/0
  3530 ;;		Unchanged: 0/0
  3531 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3532 ;;      Params:         0       0       0       0
  3533 ;;      Locals:         0       3       0       0
  3534 ;;      Temps:          0       3       0       0
  3535 ;;      Totals:         0       6       0       0
  3536 ;;Total ram usage:        6 bytes
  3537 ;; Hardware stack levels used:    1
  3538 ;; Hardware stack levels required when called:    3
  3539 ;; This function calls:
  3540 ;;		_UART_TX
  3541 ;; This function is called by:
  3542 ;;		_setupTestParameters
  3543 ;; This function uses a non-reentrant model
  3544 ;;
  3545                           
  3546                           
  3547                           ;psect for function _UART_TX_String
  3548  0782                     _UART_TX_String:	
  3549                           
  3550                           ;incstack = 0
  3551                           ; Regs used in _UART_TX_String: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3552                           ;UART_TX_String@string stored from wreg
  3553  0782  0020               	movlb	0	; select bank0
  3554  0783  00A7               	movwf	UART_TX_String@string
  3555                           
  3556                           ;USART.c: 64: int i;
  3557                           ;USART.c: 65: for(i=0;string[i]!='\0';i++)
  3558  0784  01A5               	clrf	UART_TX_String@i
  3559  0785  01A6               	clrf	UART_TX_String@i+1
  3560  0786                     l2811:	
  3561  0786  0825               	movf	UART_TX_String@i,w
  3562  0787  0727               	addwf	UART_TX_String@string,w
  3563  0788  00A2               	movwf	??_UART_TX_String
  3564  0789  0822               	movf	??_UART_TX_String,w
  3565  078A  0086               	movwf	6
  3566  078B  0187               	clrf	7
  3567  078C  0801               	movf	1,w
  3568  078D  1903               	btfsc	3,2
  3569  078E  0008               	return
  3570                           
  3571                           ;USART.c: 66: UART_TX(string[i]);
  3572  078F  0825               	movf	UART_TX_String@i,w
  3573  0790  0727               	addwf	UART_TX_String@string,w
  3574  0791  00A2               	movwf	??_UART_TX_String
  3575  0792  0822               	movf	??_UART_TX_String,w
  3576  0793  0086               	movwf	6
  3577  0794  0187               	clrf	7
  3578  0795  0801               	movf	1,w
  3579  0796  00A3               	movwf	??_UART_TX_String+1
  3580  0797  01A4               	clrf	??_UART_TX_String+2
  3581  0798  0823               	movf	??_UART_TX_String+1,w
  3582  0799  00A0               	movwf	UART_TX@data
  3583  079A  0824               	movf	??_UART_TX_String+2,w
  3584  079B  00A1               	movwf	UART_TX@data+1
  3585  079C  318E  26C4  3187   	fcall	_UART_TX
  3586  079F  3001               	movlw	1
  3587  07A0  0020               	movlb	0	; select bank0
  3588  07A1  07A5               	addwf	UART_TX_String@i,f
  3589  07A2  3000               	movlw	0
  3590  07A3  3DA6               	addwfc	UART_TX_String@i+1,f
  3591  07A4  2F86               	goto	l2811
  3592  07A5                     __end_of_UART_TX_String:	
  3593                           
  3594                           	psect	text15
  3595  0F2A                     __ptext15:	
  3596 ;; *************** function _PassLED *****************
  3597 ;; Defined at:
  3598 ;;		line 161 in file "IO_Controls.c"
  3599 ;; Parameters:    Size  Location     Type
  3600 ;;  OnOff           1    wreg     unsigned char 
  3601 ;; Auto vars:     Size  Location     Type
  3602 ;;  OnOff           1    1[BANK0 ] unsigned char 
  3603 ;; Return value:  Size  Location     Type
  3604 ;;                  1    wreg      void 
  3605 ;; Registers used:
  3606 ;;		wreg, status,2
  3607 ;; Tracked objects:
  3608 ;;		On entry : 0/0
  3609 ;;		On exit  : 0/0
  3610 ;;		Unchanged: 0/0
  3611 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3612 ;;      Params:         0       0       0       0
  3613 ;;      Locals:         0       1       0       0
  3614 ;;      Temps:          0       1       0       0
  3615 ;;      Totals:         0       2       0       0
  3616 ;;Total ram usage:        2 bytes
  3617 ;; Hardware stack levels used:    1
  3618 ;; Hardware stack levels required when called:    2
  3619 ;; This function calls:
  3620 ;;		Nothing
  3621 ;; This function is called by:
  3622 ;;		_setupTestParameters
  3623 ;; This function uses a non-reentrant model
  3624 ;;
  3625                           
  3626                           
  3627                           ;psect for function _PassLED
  3628  0F2A                     _PassLED:	
  3629                           
  3630                           ;incstack = 0
  3631                           ; Regs used in _PassLED: [wreg+status,2]
  3632                           ;PassLED@OnOff stored from wreg
  3633  0F2A  0020               	movlb	0	; select bank0
  3634  0F2B  00A1               	movwf	PassLED@OnOff
  3635                           
  3636                           ;IO_Controls.c: 163: portA.portAByte = PORTA;
  3637  0F2C  080C               	movf	12,w	;volatile
  3638  0F2D  00A0               	movwf	??_PassLED
  3639  0F2E  0820               	movf	??_PassLED,w
  3640  0F2F  00F4               	movwf	_portA
  3641                           
  3642                           ;IO_Controls.c: 164: portA.bits.PassLED = OnOff;
  3643  0F30  0821               	movf	PassLED@OnOff,w
  3644  0F31  3901               	andlw	1
  3645  0F32  12F4               	bcf	_portA,5
  3646  0F33  1D03               	skipz
  3647  0F34  16F4               	bsf	_portA,5
  3648                           
  3649                           ;IO_Controls.c: 165: PORTA=portA.portAByte;
  3650  0F35  0874               	movf	_portA,w
  3651  0F36  008C               	movwf	12	;volatile
  3652  0F37  0008               	return
  3653  0F38                     __end_of_PassLED:	
  3654                           ;IO_Controls.c: 166: return;
  3655                           
  3656                           
  3657                           	psect	text16
  3658  02EA                     __ptext16:	
  3659 ;; *************** function _printf *****************
  3660 ;; Defined at:
  3661 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  3662 ;; Parameters:    Size  Location     Type
  3663 ;;  f               2   14[BANK0 ] PTR const unsigned char 
  3664 ;;		 -> STR_1(4), 
  3665 ;; Auto vars:     Size  Location     Type
  3666 ;;  tmpval          4    0        struct .
  3667 ;;  val             2   27[BANK0 ] unsigned int 
  3668 ;;  cp              2    0        PTR const unsigned char 
  3669 ;;  len             2    0        unsigned int 
  3670 ;;  c               1   29[BANK0 ] char 
  3671 ;;  prec            1   26[BANK0 ] char 
  3672 ;;  flag            1   25[BANK0 ] unsigned char 
  3673 ;;  ap              1   24[BANK0 ] PTR void [1]
  3674 ;;		 -> ?_printf(2), 
  3675 ;; Return value:  Size  Location     Type
  3676 ;;                  2   14[BANK0 ] int 
  3677 ;; Registers used:
  3678 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3679 ;; Tracked objects:
  3680 ;;		On entry : 0/0
  3681 ;;		On exit  : 0/0
  3682 ;;		Unchanged: 0/0
  3683 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3684 ;;      Params:         0       6       0       0
  3685 ;;      Locals:         0       6       0       0
  3686 ;;      Temps:          0       4       0       0
  3687 ;;      Totals:         0      16       0       0
  3688 ;;Total ram usage:       16 bytes
  3689 ;; Hardware stack levels used:    1
  3690 ;; Hardware stack levels required when called:    3
  3691 ;; This function calls:
  3692 ;;		___lwdiv
  3693 ;;		___lwmod
  3694 ;;		_putch
  3695 ;; This function is called by:
  3696 ;;		_verifyACSignal
  3697 ;; This function uses a non-reentrant model
  3698 ;;
  3699                           
  3700                           
  3701                           ;psect for function _printf
  3702  02EA                     _printf:	
  3703                           
  3704                           ;doprnt.c: 466: va_list ap;
  3705                           ;doprnt.c: 499: signed char c;
  3706                           ;doprnt.c: 506: signed char prec;
  3707                           ;doprnt.c: 508: unsigned char flag;
  3708                           ;doprnt.c: 523: union {
  3709                           ;doprnt.c: 524: unsigned long vd;
  3710                           ;doprnt.c: 525: double integ;
  3711                           ;doprnt.c: 526: } tmpval;
  3712                           ;doprnt.c: 528: unsigned int val;
  3713                           ;doprnt.c: 529: unsigned len;
  3714                           ;doprnt.c: 530: const char * cp;
  3715                           ;doprnt.c: 533: *ap = __va_start();
  3716                           
  3717                           ;incstack = 0
  3718                           ; Regs used in _printf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3719  02EA  3030               	movlw	(low ((?_printf| 0+2)))& (0+255)
  3720  02EB  0020               	movlb	0	; select bank0
  3721  02EC  00B4               	movwf	??_printf
  3722  02ED  0834               	movf	??_printf,w
  3723  02EE  00B8               	movwf	printf@ap
  3724  02EF                     l3217:	
  3725                           ;doprnt.c: 536: while(c = *f++) {
  3726                           
  3727  02EF  0020               	movlb	0	; select bank0
  3728  02F0  082F               	movf	printf@f+1,w
  3729  02F1  00B5               	movwf	??_printf+1
  3730  02F2  082E               	movf	printf@f,w
  3731  02F3  00B4               	movwf	??_printf
  3732  02F4  0AAE               	incf	printf@f,f
  3733  02F5  1903               	skipnz
  3734  02F6  0AAF               	incf	printf@f+1,f
  3735  02F7  0834               	movf	??_printf,w
  3736  02F8  0084               	movwf	4
  3737  02F9  0835               	movf	??_printf+1,w
  3738  02FA  0085               	movwf	5
  3739  02FB  0800               	movf	0,w	;code access
  3740  02FC  00B6               	movwf	??_printf+2
  3741  02FD  0836               	movf	??_printf+2,w
  3742  02FE  00BD               	movwf	printf@c
  3743  02FF  083D               	movf	printf@c,w
  3744  0300  1903               	btfsc	3,2
  3745  0301  0008               	return
  3746                           
  3747                           ;doprnt.c: 538: if(c != '%')
  3748  0302  3025               	movlw	37
  3749  0303  063D               	xorwf	printf@c,w
  3750  0304  1903               	btfsc	3,2
  3751  0305  2B0B               	goto	l3177
  3752                           
  3753                           ;doprnt.c: 540: {
  3754                           ;doprnt.c: 541: (putch(c) );
  3755  0306  083D               	movf	printf@c,w
  3756  0307  318E  26CE  3182   	fcall	_putch
  3757                           
  3758                           ;doprnt.c: 542: continue;
  3759  030A  2AEF               	goto	l3217
  3760  030B                     l3177:	
  3761                           
  3762                           ;doprnt.c: 543: }
  3763                           ;doprnt.c: 548: flag = 0;
  3764  030B  0020               	movlb	0	; select bank0
  3765  030C  01B9               	clrf	printf@flag
  3766                           
  3767                           ;doprnt.c: 822: }
  3768                           
  3769                           ;doprnt.c: 813: continue;
  3770                           
  3771                           ;doprnt.c: 802: default:
  3772                           
  3773                           ;doprnt.c: 698: case 'i':
  3774                           ;doprnt.c: 699: break;
  3775                           
  3776                           ;doprnt.c: 697: case 'd':
  3777                           
  3778                           ;doprnt.c: 638: goto alldone;
  3779                           
  3780                           ;doprnt.c: 637: case 0:
  3781                           
  3782                           ;doprnt.c: 635: switch(c = *f++) {
  3783  030D  082F               	movf	printf@f+1,w
  3784  030E  00B5               	movwf	??_printf+1
  3785  030F  082E               	movf	printf@f,w
  3786  0310  00B4               	movwf	??_printf
  3787  0311  0AAE               	incf	printf@f,f
  3788  0312  1903               	skipnz
  3789  0313  0AAF               	incf	printf@f+1,f
  3790  0314  0834               	movf	??_printf,w
  3791  0315  0084               	movwf	4
  3792  0316  0835               	movf	??_printf+1,w
  3793  0317  0085               	movwf	5
  3794  0318  0800               	movf	0,w	;code access
  3795  0319  00BD               	movwf	printf@c
  3796                           
  3797                           ; Switch size 1, requested type "space"
  3798                           ; Number of cases is 3, Range of values is 0 to 105
  3799                           ; switch strategies available:
  3800                           ; Name         Instructions Cycles
  3801                           ; simple_byte           10     6 (average)
  3802                           ; direct_byte          218     6 (fixed)
  3803                           ; jumptable            260     6 (fixed)
  3804                           ;	Chosen strategy is simple_byte
  3805  031A  3A00               	xorlw	0	; case 0
  3806  031B  1903               	skipnz
  3807  031C  2BA1               	goto	l463
  3808  031D  3A64               	xorlw	100	; case 100
  3809  031E  1903               	skipnz
  3810  031F  2B24               	goto	l3183
  3811  0320  3A0D               	xorlw	13	; case 105
  3812  0321  1903               	skipnz
  3813  0322  2B24               	goto	l3183
  3814  0323  2AEF               	goto	l3217
  3815  0324                     l3183:	
  3816                           
  3817                           ;doprnt.c: 1253: {
  3818                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  3819  0324  0838               	movf	printf@ap,w
  3820  0325  0086               	movwf	6
  3821  0326  0187               	clrf	7
  3822  0327  3F40               	moviw [0]fsr1
  3823  0328  00BB               	movwf	printf@val
  3824  0329  3F41               	moviw [1]fsr1
  3825  032A  00BC               	movwf	printf@val+1
  3826  032B  3002               	movlw	2
  3827  032C  00B4               	movwf	??_printf
  3828  032D  0834               	movf	??_printf,w
  3829  032E  07B8               	addwf	printf@ap,f
  3830                           
  3831                           ;doprnt.c: 1261: if((int)val < 0) {
  3832  032F  1FBC               	btfss	printf@val+1,7
  3833  0330  2B3A               	goto	l3193
  3834                           
  3835                           ;doprnt.c: 1262: flag |= 0x03;
  3836  0331  3003               	movlw	3
  3837  0332  00B4               	movwf	??_printf
  3838  0333  0834               	movf	??_printf,w
  3839  0334  04B9               	iorwf	printf@flag,f
  3840                           
  3841                           ;doprnt.c: 1263: val = -val;
  3842  0335  09BB               	comf	printf@val,f
  3843  0336  09BC               	comf	printf@val+1,f
  3844  0337  0ABB               	incf	printf@val,f
  3845  0338  1903               	skipnz
  3846  0339  0ABC               	incf	printf@val+1,f
  3847  033A                     l3193:	
  3848                           
  3849                           ;doprnt.c: 1264: }
  3850                           ;doprnt.c: 1266: }
  3851                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3852  033A  01BD               	clrf	printf@c
  3853  033B  0ABD               	incf	printf@c,f
  3854  033C  3005               	movlw	5
  3855  033D  063D               	xorwf	printf@c,w
  3856  033E  1903               	btfsc	3,2
  3857  033F  2B5F               	goto	l3205
  3858  0340                     l3199:	
  3859                           
  3860                           ;doprnt.c: 1306: if(val < dpowers[c])
  3861  0340  083D               	movf	printf@c,w
  3862  0341  00B4               	movwf	??_printf
  3863  0342  01B5               	clrf	??_printf+1
  3864  0343  35B4               	lslf	??_printf,f
  3865  0344  0DB5               	rlf	??_printf+1,f
  3866  0345  3000               	movlw	low (_dpowers| (0+32768))
  3867  0346  0734               	addwf	??_printf,w
  3868  0347  0084               	movwf	4
  3869  0348  3088               	movlw	high (_dpowers| (0+32768))
  3870  0349  3D35               	addwfc	??_printf+1,w
  3871  034A  0085               	movwf	5
  3872  034B  3F00               	moviw [0]fsr0
  3873  034C  00B6               	movwf	??_printf+2
  3874  034D  3F01               	moviw [1]fsr0
  3875  034E  00B7               	movwf	??_printf+3
  3876  034F  0837               	movf	??_printf+3,w
  3877  0350  023C               	subwf	printf@val+1,w
  3878  0351  1D03               	skipz
  3879  0352  2B55               	goto	u3235
  3880  0353  0836               	movf	??_printf+2,w
  3881  0354  023B               	subwf	printf@val,w
  3882  0355                     u3235:	
  3883  0355  1C03               	btfss	3,0
  3884  0356  2B5F               	goto	l3205
  3885                           
  3886                           ;doprnt.c: 1307: break;
  3887  0357  3001               	movlw	1
  3888  0358  00B4               	movwf	??_printf
  3889  0359  0834               	movf	??_printf,w
  3890  035A  07BD               	addwf	printf@c,f
  3891  035B  3005               	movlw	5
  3892  035C  063D               	xorwf	printf@c,w
  3893  035D  1D03               	btfss	3,2
  3894  035E  2B40               	goto	l3199
  3895  035F                     l3205:	
  3896                           
  3897                           ;doprnt.c: 1422: {
  3898                           ;doprnt.c: 1438: if(flag & 0x03)
  3899  035F  0839               	movf	printf@flag,w
  3900  0360  3903               	andlw	3
  3901  0361  1903               	btfsc	3,2
  3902  0362  2B67               	goto	l3209
  3903                           
  3904                           ;doprnt.c: 1439: (putch('-') );
  3905  0363  302D               	movlw	45
  3906  0364  318E  26CE  3182   	fcall	_putch
  3907  0367                     l3209:	
  3908                           
  3909                           ;doprnt.c: 1469: }
  3910                           ;doprnt.c: 1472: prec = c;
  3911  0367  0020               	movlb	0	; select bank0
  3912  0368  083D               	movf	printf@c,w
  3913  0369  00B4               	movwf	??_printf
  3914  036A  0834               	movf	??_printf,w
  3915  036B  00BA               	movwf	printf@prec
  3916  036C                     l3215:	
  3917                           ;doprnt.c: 1474: while(prec--) {
  3918                           
  3919  036C  30FF               	movlw	255
  3920  036D  0020               	movlb	0	; select bank0
  3921  036E  00B4               	movwf	??_printf
  3922  036F  0834               	movf	??_printf,w
  3923  0370  07BA               	addwf	printf@prec,f
  3924  0371  0A3A               	incf	printf@prec,w
  3925  0372  1903               	btfsc	3,2
  3926  0373  2AEF               	goto	l3217
  3927                           
  3928                           ;doprnt.c: 1478: {
  3929                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  3930  0374  300A               	movlw	10
  3931  0375  00A8               	movwf	___lwmod@divisor
  3932  0376  3000               	movlw	0
  3933  0377  00A9               	movwf	___lwmod@divisor+1
  3934  0378  083A               	movf	printf@prec,w
  3935  0379  00B4               	movwf	??_printf
  3936  037A  01B5               	clrf	??_printf+1
  3937  037B  35B4               	lslf	??_printf,f
  3938  037C  0DB5               	rlf	??_printf+1,f
  3939  037D  3000               	movlw	low (_dpowers| (0+32768))
  3940  037E  0734               	addwf	??_printf,w
  3941  037F  0084               	movwf	4
  3942  0380  3088               	movlw	high (_dpowers| (0+32768))
  3943  0381  3D35               	addwfc	??_printf+1,w
  3944  0382  0085               	movwf	5
  3945  0383  3F00               	moviw [0]fsr0
  3946  0384  00A0               	movwf	___lwdiv@divisor
  3947  0385  3F01               	moviw [1]fsr0
  3948  0386  00A1               	movwf	___lwdiv@divisor+1
  3949  0387  083C               	movf	printf@val+1,w
  3950  0388  00A3               	movwf	___lwdiv@dividend+1
  3951  0389  083B               	movf	printf@val,w
  3952  038A  00A2               	movwf	___lwdiv@dividend
  3953  038B  3186  2676  3182   	fcall	___lwdiv
  3954  038E  0020               	movlb	0	; select bank0
  3955  038F  0821               	movf	?___lwdiv+1,w
  3956  0390  00AB               	movwf	___lwmod@dividend+1
  3957  0391  0820               	movf	?___lwdiv,w
  3958  0392  00AA               	movwf	___lwmod@dividend
  3959  0393  3186  26DB  3182   	fcall	___lwmod
  3960  0396  0020               	movlb	0	; select bank0
  3961  0397  0828               	movf	?___lwmod,w
  3962  0398  3E30               	addlw	48
  3963  0399  00B6               	movwf	??_printf+2
  3964  039A  0836               	movf	??_printf+2,w
  3965  039B  00BD               	movwf	printf@c
  3966                           
  3967                           ;doprnt.c: 1523: }
  3968                           ;doprnt.c: 1524: (putch(c) );
  3969  039C  083D               	movf	printf@c,w
  3970  039D  318E  26CE  3182   	fcall	_putch
  3971  03A0  2B6C               	goto	l3215
  3972  03A1                     l463:	
  3973                           ;doprnt.c: 1540: return 0;
  3974                           ;	Return value of _printf is never used
  3975                           
  3976                           ;doprnt.c: 1525: }
  3977                           ;doprnt.c: 1533: }
  3978                           ;doprnt.c: 1535: alldone:
  3979                           
  3980  03A1  0008               	return
  3981  03A2                     __end_of_printf:	
  3982                           
  3983                           	psect	text17
  3984  0ECE                     __ptext17:	
  3985 ;; *************** function _putch *****************
  3986 ;; Defined at:
  3987 ;;		line 96 in file "USART.c"
  3988 ;; Parameters:    Size  Location     Type
  3989 ;;  c               1    wreg     unsigned char 
  3990 ;; Auto vars:     Size  Location     Type
  3991 ;;  c               1    0[BANK0 ] unsigned char 
  3992 ;; Return value:  Size  Location     Type
  3993 ;;                  1    wreg      void 
  3994 ;; Registers used:
  3995 ;;		wreg
  3996 ;; Tracked objects:
  3997 ;;		On entry : 0/0
  3998 ;;		On exit  : 0/0
  3999 ;;		Unchanged: 0/0
  4000 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4001 ;;      Params:         0       0       0       0
  4002 ;;      Locals:         0       1       0       0
  4003 ;;      Temps:          0       0       0       0
  4004 ;;      Totals:         0       1       0       0
  4005 ;;Total ram usage:        1 bytes
  4006 ;; Hardware stack levels used:    1
  4007 ;; Hardware stack levels required when called:    2
  4008 ;; This function calls:
  4009 ;;		Nothing
  4010 ;; This function is called by:
  4011 ;;		_printf
  4012 ;; This function uses a non-reentrant model
  4013 ;;
  4014                           
  4015                           
  4016                           ;psect for function _putch
  4017  0ECE                     _putch:	
  4018                           
  4019                           ;incstack = 0
  4020                           ; Regs used in _putch: [wreg]
  4021                           ;putch@c stored from wreg
  4022  0ECE  0020               	movlb	0	; select bank0
  4023  0ECF  00A0               	movwf	putch@c
  4024  0ED0                     l317:	
  4025                           ;USART.c: 100: continue;
  4026                           
  4027                           ;USART.c: 98: while(!TRMT)
  4028                           
  4029  0ED0  0023               	movlb	3	; select bank3
  4030  0ED1  1C9E               	btfss	30,1	;volatile
  4031  0ED2  2ED0               	goto	l317
  4032                           
  4033                           ;USART.c: 101: TXREG = c;
  4034  0ED3  0020               	movlb	0	; select bank0
  4035  0ED4  0820               	movf	putch@c,w
  4036  0ED5  0023               	movlb	3	; select bank3
  4037  0ED6  009A               	movwf	26	;volatile
  4038  0ED7  0008               	return
  4039  0ED8                     __end_of_putch:	
  4040                           
  4041                           	psect	text18
  4042  06DB                     __ptext18:	
  4043 ;; *************** function ___lwmod *****************
  4044 ;; Defined at:
  4045 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
  4046 ;; Parameters:    Size  Location     Type
  4047 ;;  divisor         2    8[BANK0 ] unsigned int 
  4048 ;;  dividend        2   10[BANK0 ] unsigned int 
  4049 ;; Auto vars:     Size  Location     Type
  4050 ;;  counter         1   13[BANK0 ] unsigned char 
  4051 ;; Return value:  Size  Location     Type
  4052 ;;                  2    8[BANK0 ] unsigned int 
  4053 ;; Registers used:
  4054 ;;		wreg, status,2, status,0
  4055 ;; Tracked objects:
  4056 ;;		On entry : 0/0
  4057 ;;		On exit  : 0/0
  4058 ;;		Unchanged: 0/0
  4059 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4060 ;;      Params:         0       4       0       0
  4061 ;;      Locals:         0       1       0       0
  4062 ;;      Temps:          0       1       0       0
  4063 ;;      Totals:         0       6       0       0
  4064 ;;Total ram usage:        6 bytes
  4065 ;; Hardware stack levels used:    1
  4066 ;; Hardware stack levels required when called:    2
  4067 ;; This function calls:
  4068 ;;		Nothing
  4069 ;; This function is called by:
  4070 ;;		_printf
  4071 ;; This function uses a non-reentrant model
  4072 ;;
  4073                           
  4074                           
  4075                           ;psect for function ___lwmod
  4076  06DB                     ___lwmod:	
  4077                           
  4078                           ;incstack = 0
  4079                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  4080  06DB  0020               	movlb	0	; select bank0
  4081  06DC  0828               	movf	___lwmod@divisor,w
  4082  06DD  0429               	iorwf	___lwmod@divisor+1,w
  4083  06DE  1903               	btfsc	3,2
  4084  06DF  2F03               	goto	l3035
  4085  06E0  01AD               	clrf	___lwmod@counter
  4086  06E1  0AAD               	incf	___lwmod@counter,f
  4087  06E2                     l3025:	
  4088  06E2  1BA9               	btfsc	___lwmod@divisor+1,7
  4089  06E3  2EEE               	goto	l3027
  4090  06E4  3001               	movlw	1
  4091  06E5                     u3105:	
  4092  06E5  35A8               	lslf	___lwmod@divisor,f
  4093  06E6  0DA9               	rlf	___lwmod@divisor+1,f
  4094  06E7  0B89               	decfsz	9,f
  4095  06E8  2EE5               	goto	u3105
  4096  06E9  3001               	movlw	1
  4097  06EA  00AC               	movwf	??___lwmod
  4098  06EB  082C               	movf	??___lwmod,w
  4099  06EC  07AD               	addwf	___lwmod@counter,f
  4100  06ED  2EE2               	goto	l3025
  4101  06EE                     l3027:	
  4102  06EE  0829               	movf	___lwmod@divisor+1,w
  4103  06EF  022B               	subwf	___lwmod@dividend+1,w
  4104  06F0  1D03               	skipz
  4105  06F1  2EF4               	goto	u3125
  4106  06F2  0828               	movf	___lwmod@divisor,w
  4107  06F3  022A               	subwf	___lwmod@dividend,w
  4108  06F4                     u3125:	
  4109  06F4  1C03               	skipc
  4110  06F5  2EFA               	goto	l3031
  4111  06F6  0828               	movf	___lwmod@divisor,w
  4112  06F7  02AA               	subwf	___lwmod@dividend,f
  4113  06F8  0829               	movf	___lwmod@divisor+1,w
  4114  06F9  3BAB               	subwfb	___lwmod@dividend+1,f
  4115  06FA                     l3031:	
  4116  06FA  3001               	movlw	1
  4117  06FB                     u3135:	
  4118  06FB  36A9               	lsrf	___lwmod@divisor+1,f
  4119  06FC  0CA8               	rrf	___lwmod@divisor,f
  4120  06FD  0B89               	decfsz	9,f
  4121  06FE  2EFB               	goto	u3135
  4122  06FF  3001               	movlw	1
  4123  0700  02AD               	subwf	___lwmod@counter,f
  4124  0701  1D03               	btfss	3,2
  4125  0702  2EEE               	goto	l3027
  4126  0703                     l3035:	
  4127  0703  082B               	movf	___lwmod@dividend+1,w
  4128  0704  00A9               	movwf	?___lwmod+1
  4129  0705  082A               	movf	___lwmod@dividend,w
  4130  0706  00A8               	movwf	?___lwmod
  4131  0707  0008               	return
  4132  0708                     __end_of___lwmod:	
  4133                           
  4134                           	psect	text19
  4135  0676                     __ptext19:	
  4136 ;; *************** function ___lwdiv *****************
  4137 ;; Defined at:
  4138 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  4139 ;; Parameters:    Size  Location     Type
  4140 ;;  divisor         2    0[BANK0 ] unsigned int 
  4141 ;;  dividend        2    2[BANK0 ] unsigned int 
  4142 ;; Auto vars:     Size  Location     Type
  4143 ;;  quotient        2    6[BANK0 ] unsigned int 
  4144 ;;  counter         1    5[BANK0 ] unsigned char 
  4145 ;; Return value:  Size  Location     Type
  4146 ;;                  2    0[BANK0 ] unsigned int 
  4147 ;; Registers used:
  4148 ;;		wreg, status,2, status,0
  4149 ;; Tracked objects:
  4150 ;;		On entry : 0/0
  4151 ;;		On exit  : 0/0
  4152 ;;		Unchanged: 0/0
  4153 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4154 ;;      Params:         0       4       0       0
  4155 ;;      Locals:         0       3       0       0
  4156 ;;      Temps:          0       1       0       0
  4157 ;;      Totals:         0       8       0       0
  4158 ;;Total ram usage:        8 bytes
  4159 ;; Hardware stack levels used:    1
  4160 ;; Hardware stack levels required when called:    2
  4161 ;; This function calls:
  4162 ;;		Nothing
  4163 ;; This function is called by:
  4164 ;;		_printf
  4165 ;; This function uses a non-reentrant model
  4166 ;;
  4167                           
  4168                           
  4169                           ;psect for function ___lwdiv
  4170  0676                     ___lwdiv:	
  4171                           
  4172                           ;incstack = 0
  4173                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  4174  0676  0020               	movlb	0	; select bank0
  4175  0677  01A6               	clrf	___lwdiv@quotient
  4176  0678  01A7               	clrf	___lwdiv@quotient+1
  4177  0679  0820               	movf	___lwdiv@divisor,w
  4178  067A  0421               	iorwf	___lwdiv@divisor+1,w
  4179  067B  1903               	btfsc	3,2
  4180  067C  2EA6               	goto	l3013
  4181  067D  01A5               	clrf	___lwdiv@counter
  4182  067E  0AA5               	incf	___lwdiv@counter,f
  4183  067F                     l3001:	
  4184  067F  1BA1               	btfsc	___lwdiv@divisor+1,7
  4185  0680  2E8B               	goto	l3003
  4186  0681  3001               	movlw	1
  4187  0682                     u3035:	
  4188  0682  35A0               	lslf	___lwdiv@divisor,f
  4189  0683  0DA1               	rlf	___lwdiv@divisor+1,f
  4190  0684  0B89               	decfsz	9,f
  4191  0685  2E82               	goto	u3035
  4192  0686  3001               	movlw	1
  4193  0687  00A4               	movwf	??___lwdiv
  4194  0688  0824               	movf	??___lwdiv,w
  4195  0689  07A5               	addwf	___lwdiv@counter,f
  4196  068A  2E7F               	goto	l3001
  4197  068B                     l3003:	
  4198  068B  3001               	movlw	1
  4199  068C                     u3055:	
  4200  068C  35A6               	lslf	___lwdiv@quotient,f
  4201  068D  0DA7               	rlf	___lwdiv@quotient+1,f
  4202  068E  0B89               	decfsz	9,f
  4203  068F  2E8C               	goto	u3055
  4204  0690  0821               	movf	___lwdiv@divisor+1,w
  4205  0691  0223               	subwf	___lwdiv@dividend+1,w
  4206  0692  1D03               	skipz
  4207  0693  2E96               	goto	u3065
  4208  0694  0820               	movf	___lwdiv@divisor,w
  4209  0695  0222               	subwf	___lwdiv@dividend,w
  4210  0696                     u3065:	
  4211  0696  1C03               	skipc
  4212  0697  2E9D               	goto	l3009
  4213  0698  0820               	movf	___lwdiv@divisor,w
  4214  0699  02A2               	subwf	___lwdiv@dividend,f
  4215  069A  0821               	movf	___lwdiv@divisor+1,w
  4216  069B  3BA3               	subwfb	___lwdiv@dividend+1,f
  4217  069C  1426               	bsf	___lwdiv@quotient,0
  4218  069D                     l3009:	
  4219  069D  3001               	movlw	1
  4220  069E                     u3075:	
  4221  069E  36A1               	lsrf	___lwdiv@divisor+1,f
  4222  069F  0CA0               	rrf	___lwdiv@divisor,f
  4223  06A0  0B89               	decfsz	9,f
  4224  06A1  2E9E               	goto	u3075
  4225  06A2  3001               	movlw	1
  4226  06A3  02A5               	subwf	___lwdiv@counter,f
  4227  06A4  1D03               	btfss	3,2
  4228  06A5  2E8B               	goto	l3003
  4229  06A6                     l3013:	
  4230  06A6  0827               	movf	___lwdiv@quotient+1,w
  4231  06A7  00A1               	movwf	?___lwdiv+1
  4232  06A8  0826               	movf	___lwdiv@quotient,w
  4233  06A9  00A0               	movwf	?___lwdiv
  4234  06AA  0008               	return
  4235  06AB                     __end_of___lwdiv:	
  4236                           
  4237                           	psect	text20
  4238  07A5                     __ptext20:	
  4239 ;; *************** function _fabs *****************
  4240 ;; Defined at:
  4241 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fabs.c"
  4242 ;; Parameters:    Size  Location     Type
  4243 ;;  d               3   32[BANK0 ] unsigned int 
  4244 ;; Auto vars:     Size  Location     Type
  4245 ;;		None
  4246 ;; Return value:  Size  Location     Type
  4247 ;;                  3   32[BANK0 ] unsigned int 
  4248 ;; Registers used:
  4249 ;;		wreg, status,2, status,0, pclath, cstack
  4250 ;; Tracked objects:
  4251 ;;		On entry : 0/0
  4252 ;;		On exit  : 0/0
  4253 ;;		Unchanged: 0/0
  4254 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4255 ;;      Params:         0       3       0       0
  4256 ;;      Locals:         0       0       0       0
  4257 ;;      Temps:          0       0       0       0
  4258 ;;      Totals:         0       3       0       0
  4259 ;;Total ram usage:        3 bytes
  4260 ;; Hardware stack levels used:    1
  4261 ;; Hardware stack levels required when called:    3
  4262 ;; This function calls:
  4263 ;;		___ftge
  4264 ;;		___ftneg
  4265 ;; This function is called by:
  4266 ;;		_verifyACSignal
  4267 ;; This function uses a non-reentrant model
  4268 ;;
  4269                           
  4270                           
  4271                           ;psect for function _fabs
  4272  07A5                     _fabs:	
  4273                           
  4274                           ;incstack = 0
  4275                           ; Regs used in _fabs: [wreg+status,2+status,0+pclath+cstack]
  4276  07A5  0020               	movlb	0	; select bank0
  4277  07A6  0840               	movf	fabs@d,w
  4278  07A7  00A0               	movwf	___ftge@ff1
  4279  07A8  0841               	movf	fabs@d+1,w
  4280  07A9  00A1               	movwf	___ftge@ff1+1
  4281  07AA  0842               	movf	fabs@d+2,w
  4282  07AB  00A2               	movwf	___ftge@ff1+2
  4283  07AC  3000               	movlw	0
  4284  07AD  00A3               	movwf	___ftge@ff2
  4285  07AE  3000               	movlw	0
  4286  07AF  00A4               	movwf	___ftge@ff2+1
  4287  07B0  3000               	movlw	0
  4288  07B1  00A5               	movwf	___ftge@ff2+2
  4289  07B2  3186  2600  3187   	fcall	___ftge
  4290  07B5  1803               	btfsc	3,0
  4291  07B6  0008               	return
  4292  07B7  0020               	movlb	0	; select bank0
  4293  07B8  0840               	movf	fabs@d,w
  4294  07B9  00A0               	movwf	___ftneg@f1
  4295  07BA  0841               	movf	fabs@d+1,w
  4296  07BB  00A1               	movwf	___ftneg@f1+1
  4297  07BC  0842               	movf	fabs@d+2,w
  4298  07BD  00A2               	movwf	___ftneg@f1+2
  4299  07BE  318E  26BB         	fcall	___ftneg
  4300  07C0  0020               	movlb	0	; select bank0
  4301  07C1  0820               	movf	?___ftneg,w
  4302  07C2  00C0               	movwf	?_fabs
  4303  07C3  0821               	movf	?___ftneg+1,w
  4304  07C4  00C1               	movwf	?_fabs+1
  4305  07C5  0822               	movf	?___ftneg+2,w
  4306  07C6  00C2               	movwf	?_fabs+2
  4307  07C7  0008               	return
  4308  07C8                     __end_of_fabs:	
  4309                           
  4310                           	psect	text21
  4311  0EBB                     __ptext21:	
  4312 ;; *************** function ___ftneg *****************
  4313 ;; Defined at:
  4314 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftneg.c"
  4315 ;; Parameters:    Size  Location     Type
  4316 ;;  f1              3    0[BANK0 ] float 
  4317 ;; Auto vars:     Size  Location     Type
  4318 ;;		None
  4319 ;; Return value:  Size  Location     Type
  4320 ;;                  3    0[BANK0 ] float 
  4321 ;; Registers used:
  4322 ;;		wreg
  4323 ;; Tracked objects:
  4324 ;;		On entry : 0/0
  4325 ;;		On exit  : 0/0
  4326 ;;		Unchanged: 0/0
  4327 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4328 ;;      Params:         0       3       0       0
  4329 ;;      Locals:         0       0       0       0
  4330 ;;      Temps:          0       0       0       0
  4331 ;;      Totals:         0       3       0       0
  4332 ;;Total ram usage:        3 bytes
  4333 ;; Hardware stack levels used:    1
  4334 ;; Hardware stack levels required when called:    2
  4335 ;; This function calls:
  4336 ;;		Nothing
  4337 ;; This function is called by:
  4338 ;;		_fabs
  4339 ;; This function uses a non-reentrant model
  4340 ;;
  4341                           
  4342                           
  4343                           ;psect for function ___ftneg
  4344  0EBB                     ___ftneg:	
  4345                           
  4346                           ;incstack = 0
  4347                           ; Regs used in ___ftneg: [wreg]
  4348  0EBB  0020               	movlb	0	; select bank0
  4349  0EBC  0822               	movf	___ftneg@f1+2,w
  4350  0EBD  0421               	iorwf	___ftneg@f1+1,w
  4351  0EBE  0420               	iorwf	___ftneg@f1,w
  4352  0EBF  1903               	skipnz
  4353  0EC0  0008               	return
  4354  0EC1  3080               	movlw	128
  4355  0EC2  06A2               	xorwf	___ftneg@f1+2,f
  4356  0EC3  0008               	return
  4357  0EC4                     __end_of___ftneg:	
  4358                           
  4359                           	psect	text22
  4360  0600                     __ptext22:	
  4361 ;; *************** function ___ftge *****************
  4362 ;; Defined at:
  4363 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftge.c"
  4364 ;; Parameters:    Size  Location     Type
  4365 ;;  ff1             3    0[BANK0 ] float 
  4366 ;;  ff2             3    3[BANK0 ] float 
  4367 ;; Auto vars:     Size  Location     Type
  4368 ;;		None
  4369 ;; Return value:  Size  Location     Type
  4370 ;;		None               void
  4371 ;; Registers used:
  4372 ;;		wreg, status,2, status,0
  4373 ;; Tracked objects:
  4374 ;;		On entry : 0/0
  4375 ;;		On exit  : 0/0
  4376 ;;		Unchanged: 0/0
  4377 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4378 ;;      Params:         0       6       0       0
  4379 ;;      Locals:         0       0       0       0
  4380 ;;      Temps:          0       3       0       0
  4381 ;;      Totals:         0       9       0       0
  4382 ;;Total ram usage:        9 bytes
  4383 ;; Hardware stack levels used:    1
  4384 ;; Hardware stack levels required when called:    2
  4385 ;; This function calls:
  4386 ;;		Nothing
  4387 ;; This function is called by:
  4388 ;;		_fabs
  4389 ;; This function uses a non-reentrant model
  4390 ;;
  4391                           
  4392                           
  4393                           ;psect for function ___ftge
  4394  0600                     ___ftge:	
  4395                           
  4396                           ;incstack = 0
  4397                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  4398  0600  0020               	movlb	0	; select bank0
  4399  0601  1FA2               	btfss	___ftge@ff1+2,7
  4400  0602  2E17               	goto	l2943
  4401  0603  0920               	comf	___ftge@ff1,w
  4402  0604  00A6               	movwf	??___ftge
  4403  0605  0921               	comf	___ftge@ff1+1,w
  4404  0606  00A7               	movwf	??___ftge+1
  4405  0607  0922               	comf	___ftge@ff1+2,w
  4406  0608  00A8               	movwf	??___ftge+2
  4407  0609  0AA6               	incf	??___ftge,f
  4408  060A  1903               	skipnz
  4409  060B  0AA7               	incf	??___ftge+1,f
  4410  060C  1903               	skipnz
  4411  060D  0AA8               	incf	??___ftge+2,f
  4412  060E  3000               	movlw	0
  4413  060F  0726               	addwf	??___ftge,w
  4414  0610  00A0               	movwf	___ftge@ff1
  4415  0611  3000               	movlw	0
  4416  0612  3D27               	addwfc	??___ftge+1,w
  4417  0613  00A1               	movwf	___ftge@ff1+1
  4418  0614  3080               	movlw	128
  4419  0615  3D28               	addwfc	??___ftge+2,w
  4420  0616  00A2               	movwf	___ftge@ff1+2
  4421  0617                     l2943:	
  4422  0617  1FA5               	btfss	___ftge@ff2+2,7
  4423  0618  2E2D               	goto	l2947
  4424  0619  0923               	comf	___ftge@ff2,w
  4425  061A  00A6               	movwf	??___ftge
  4426  061B  0924               	comf	___ftge@ff2+1,w
  4427  061C  00A7               	movwf	??___ftge+1
  4428  061D  0925               	comf	___ftge@ff2+2,w
  4429  061E  00A8               	movwf	??___ftge+2
  4430  061F  0AA6               	incf	??___ftge,f
  4431  0620  1903               	skipnz
  4432  0621  0AA7               	incf	??___ftge+1,f
  4433  0622  1903               	skipnz
  4434  0623  0AA8               	incf	??___ftge+2,f
  4435  0624  3000               	movlw	0
  4436  0625  0726               	addwf	??___ftge,w
  4437  0626  00A3               	movwf	___ftge@ff2
  4438  0627  3000               	movlw	0
  4439  0628  3D27               	addwfc	??___ftge+1,w
  4440  0629  00A4               	movwf	___ftge@ff2+1
  4441  062A  3080               	movlw	128
  4442  062B  3D28               	addwfc	??___ftge+2,w
  4443  062C  00A5               	movwf	___ftge@ff2+2
  4444  062D                     l2947:	
  4445  062D  3080               	movlw	128
  4446  062E  06A2               	xorwf	___ftge@ff1+2,f
  4447  062F  3080               	movlw	128
  4448  0630  06A5               	xorwf	___ftge@ff2+2,f
  4449  0631  0825               	movf	___ftge@ff2+2,w
  4450  0632  0222               	subwf	___ftge@ff1+2,w
  4451  0633  1D03               	skipz
  4452  0634  0008               	return
  4453  0635  0824               	movf	___ftge@ff2+1,w
  4454  0636  0221               	subwf	___ftge@ff1+1,w
  4455  0637  1D03               	skipz
  4456  0638  0008               	return
  4457  0639  0823               	movf	___ftge@ff2,w
  4458  063A  0220               	subwf	___ftge@ff1,w
  4459  063B  0008               	return
  4460  063C                     __end_of___ftge:	
  4461                           
  4462                           	psect	text23
  4463  0733                     __ptext23:	
  4464 ;; *************** function ___lltoft *****************
  4465 ;; Defined at:
  4466 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lltoft.c"
  4467 ;; Parameters:    Size  Location     Type
  4468 ;;  c               4   26[BANK0 ] unsigned long 
  4469 ;; Auto vars:     Size  Location     Type
  4470 ;;  exp             1   31[BANK0 ] unsigned char 
  4471 ;; Return value:  Size  Location     Type
  4472 ;;                  3   26[BANK0 ] float 
  4473 ;; Registers used:
  4474 ;;		wreg, status,2, status,0, pclath, cstack
  4475 ;; Tracked objects:
  4476 ;;		On entry : 0/0
  4477 ;;		On exit  : 0/0
  4478 ;;		Unchanged: 0/0
  4479 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4480 ;;      Params:         0       4       0       0
  4481 ;;      Locals:         0       1       0       0
  4482 ;;      Temps:          0       1       0       0
  4483 ;;      Totals:         0       6       0       0
  4484 ;;Total ram usage:        6 bytes
  4485 ;; Hardware stack levels used:    1
  4486 ;; Hardware stack levels required when called:    3
  4487 ;; This function calls:
  4488 ;;		___ftpack
  4489 ;; This function is called by:
  4490 ;;		_verifyACSignal
  4491 ;; This function uses a non-reentrant model
  4492 ;;
  4493                           
  4494                           
  4495                           ;psect for function ___lltoft
  4496  0733                     ___lltoft:	
  4497                           
  4498                           ;incstack = 0
  4499                           ; Regs used in ___lltoft: [wreg+status,2+status,0+pclath+cstack]
  4500  0733  308E               	movlw	142
  4501  0734  0020               	movlb	0	; select bank0
  4502  0735  00BE               	movwf	??___lltoft
  4503  0736  083E               	movf	??___lltoft,w
  4504  0737  00BF               	movwf	___lltoft@exp
  4505  0738                     l3317:	
  4506  0738  30FF               	movlw	255
  4507  0739  053D               	andwf	___lltoft@c+3,w
  4508  073A  1903               	btfsc	3,2
  4509  073B  2F48               	goto	l3319
  4510  073C  3001               	movlw	1
  4511  073D                     u3415:	
  4512  073D  36BD               	lsrf	___lltoft@c+3,f
  4513  073E  0CBC               	rrf	___lltoft@c+2,f
  4514  073F  0CBB               	rrf	___lltoft@c+1,f
  4515  0740  0CBA               	rrf	___lltoft@c,f
  4516  0741  0B89               	decfsz	9,f
  4517  0742  2F3D               	goto	u3415
  4518  0743  3001               	movlw	1
  4519  0744  00BE               	movwf	??___lltoft
  4520  0745  083E               	movf	??___lltoft,w
  4521  0746  07BF               	addwf	___lltoft@exp,f
  4522  0747  2F38               	goto	l3317
  4523  0748                     l3319:	
  4524  0748  083A               	movf	___lltoft@c,w
  4525  0749  00A0               	movwf	___ftpack@arg
  4526  074A  083B               	movf	___lltoft@c+1,w
  4527  074B  00A1               	movwf	___ftpack@arg+1
  4528  074C  083C               	movf	___lltoft@c+2,w
  4529  074D  00A2               	movwf	___ftpack@arg+2
  4530  074E  083F               	movf	___lltoft@exp,w
  4531  074F  00BE               	movwf	??___lltoft
  4532  0750  083E               	movf	??___lltoft,w
  4533  0751  00A3               	movwf	___ftpack@exp
  4534  0752  01A4               	clrf	___ftpack@sign
  4535  0753  3185  250B         	fcall	___ftpack
  4536  0755  0020               	movlb	0	; select bank0
  4537  0756  0820               	movf	?___ftpack,w
  4538  0757  00BA               	movwf	?___lltoft
  4539  0758  0821               	movf	?___ftpack+1,w
  4540  0759  00BB               	movwf	?___lltoft+1
  4541  075A  0822               	movf	?___ftpack+2,w
  4542  075B  00BC               	movwf	?___lltoft+2
  4543  075C  0008               	return
  4544  075D                     __end_of___lltoft:	
  4545                           
  4546                           	psect	text24
  4547  050B                     __ptext24:	
  4548 ;; *************** function ___ftpack *****************
  4549 ;; Defined at:
  4550 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
  4551 ;; Parameters:    Size  Location     Type
  4552 ;;  arg             3    0[BANK0 ] unsigned um
  4553 ;;  exp             1    3[BANK0 ] unsigned char 
  4554 ;;  sign            1    4[BANK0 ] unsigned char 
  4555 ;; Auto vars:     Size  Location     Type
  4556 ;;		None
  4557 ;; Return value:  Size  Location     Type
  4558 ;;                  3    0[BANK0 ] float 
  4559 ;; Registers used:
  4560 ;;		wreg, status,2, status,0
  4561 ;; Tracked objects:
  4562 ;;		On entry : 0/0
  4563 ;;		On exit  : 0/0
  4564 ;;		Unchanged: 0/0
  4565 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4566 ;;      Params:         0       5       0       0
  4567 ;;      Locals:         0       0       0       0
  4568 ;;      Temps:          0       3       0       0
  4569 ;;      Totals:         0       8       0       0
  4570 ;;Total ram usage:        8 bytes
  4571 ;; Hardware stack levels used:    1
  4572 ;; Hardware stack levels required when called:    2
  4573 ;; This function calls:
  4574 ;;		Nothing
  4575 ;; This function is called by:
  4576 ;;		___lltoft
  4577 ;; This function uses a non-reentrant model
  4578 ;;
  4579                           
  4580                           
  4581                           ;psect for function ___ftpack
  4582  050B                     ___ftpack:	
  4583                           
  4584                           ;incstack = 0
  4585                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  4586  050B  0020               	movlb	0	; select bank0
  4587  050C  0823               	movf	___ftpack@exp,w
  4588  050D  1903               	btfsc	3,2
  4589  050E  2D14               	goto	l2911
  4590  050F  0822               	movf	___ftpack@arg+2,w
  4591  0510  0421               	iorwf	___ftpack@arg+1,w
  4592  0511  0420               	iorwf	___ftpack@arg,w
  4593  0512  1D03               	skipz
  4594  0513  2D25               	goto	l2917
  4595  0514                     l2911:	
  4596  0514  3000               	movlw	0
  4597  0515  00A0               	movwf	?___ftpack
  4598  0516  3000               	movlw	0
  4599  0517  00A1               	movwf	?___ftpack+1
  4600  0518  3000               	movlw	0
  4601  0519  00A2               	movwf	?___ftpack+2
  4602  051A  0008               	return
  4603  051B                     l2915:	
  4604  051B  3001               	movlw	1
  4605  051C  00A5               	movwf	??___ftpack
  4606  051D  0825               	movf	??___ftpack,w
  4607  051E  07A3               	addwf	___ftpack@exp,f
  4608  051F  3001               	movlw	1
  4609  0520                     u2815:	
  4610  0520  36A2               	lsrf	___ftpack@arg+2,f
  4611  0521  0CA1               	rrf	___ftpack@arg+1,f
  4612  0522  0CA0               	rrf	___ftpack@arg,f
  4613  0523  0B89               	decfsz	9,f
  4614  0524  2D20               	goto	u2815
  4615  0525                     l2917:	
  4616  0525  30FE               	movlw	254
  4617  0526  0522               	andwf	___ftpack@arg+2,w
  4618  0527  1903               	btfsc	3,2
  4619  0528  2D3E               	goto	l727
  4620  0529  2D1B               	goto	l2915
  4621  052A                     l2919:	
  4622  052A  3001               	movlw	1
  4623  052B  00A5               	movwf	??___ftpack
  4624  052C  0825               	movf	??___ftpack,w
  4625  052D  07A3               	addwf	___ftpack@exp,f
  4626  052E  3001               	movlw	1
  4627  052F  07A0               	addwf	___ftpack@arg,f
  4628  0530  3000               	movlw	0
  4629  0531  1803               	skipnc
  4630  0532  3001               	movlw	1
  4631  0533  07A1               	addwf	___ftpack@arg+1,f
  4632  0534  3000               	movlw	0
  4633  0535  1803               	skipnc
  4634  0536  3001               	movlw	1
  4635  0537  07A2               	addwf	___ftpack@arg+2,f
  4636  0538  3001               	movlw	1
  4637  0539                     u2835:	
  4638  0539  36A2               	lsrf	___ftpack@arg+2,f
  4639  053A  0CA1               	rrf	___ftpack@arg+1,f
  4640  053B  0CA0               	rrf	___ftpack@arg,f
  4641  053C  0B89               	decfsz	9,f
  4642  053D  2D39               	goto	u2835
  4643  053E                     l727:	
  4644  053E  30FF               	movlw	255
  4645  053F  0522               	andwf	___ftpack@arg+2,w
  4646  0540  1903               	btfsc	3,2
  4647  0541  2D4B               	goto	l2927
  4648  0542  2D2A               	goto	l2919
  4649  0543                     l2925:	
  4650  0543  3001               	movlw	1
  4651  0544  02A3               	subwf	___ftpack@exp,f
  4652  0545  3001               	movlw	1
  4653  0546                     u2855:	
  4654  0546  35A0               	lslf	___ftpack@arg,f
  4655  0547  0DA1               	rlf	___ftpack@arg+1,f
  4656  0548  0DA2               	rlf	___ftpack@arg+2,f
  4657  0549  0B89               	decfsz	9,f
  4658  054A  2D46               	goto	u2855
  4659  054B                     l2927:	
  4660  054B  1BA1               	btfsc	___ftpack@arg+1,7
  4661  054C  2D51               	goto	l734
  4662  054D  3002               	movlw	2
  4663  054E  0223               	subwf	___ftpack@exp,w
  4664  054F  1803               	skipnc
  4665  0550  2D43               	goto	l2925
  4666  0551                     l734:	
  4667  0551  1823               	btfsc	___ftpack@exp,0
  4668  0552  2D59               	goto	l735
  4669  0553  30FF               	movlw	255
  4670  0554  05A0               	andwf	___ftpack@arg,f
  4671  0555  307F               	movlw	127
  4672  0556  05A1               	andwf	___ftpack@arg+1,f
  4673  0557  30FF               	movlw	255
  4674  0558  05A2               	andwf	___ftpack@arg+2,f
  4675  0559                     l735:	
  4676  0559  1003               	clrc
  4677  055A  0CA3               	rrf	___ftpack@exp,f
  4678  055B  0823               	movf	___ftpack@exp,w
  4679  055C  00A5               	movwf	??___ftpack
  4680  055D  01A6               	clrf	??___ftpack+1
  4681  055E  01A7               	clrf	??___ftpack+2
  4682  055F  3010               	movlw	16
  4683  0560                     u2895:	
  4684  0560  35A5               	lslf	??___ftpack,f
  4685  0561  0DA6               	rlf	??___ftpack+1,f
  4686  0562  0DA7               	rlf	??___ftpack+2,f
  4687  0563  0B89               	decfsz	9,f
  4688  0564  2D60               	goto	u2895
  4689  0565  0825               	movf	??___ftpack,w
  4690  0566  04A0               	iorwf	___ftpack@arg,f
  4691  0567  0826               	movf	??___ftpack+1,w
  4692  0568  04A1               	iorwf	___ftpack@arg+1,f
  4693  0569  0827               	movf	??___ftpack+2,w
  4694  056A  04A2               	iorwf	___ftpack@arg+2,f
  4695  056B  0824               	movf	___ftpack@sign,w
  4696  056C  1903               	btfsc	3,2
  4697  056D  0008               	return
  4698  056E  17A2               	bsf	___ftpack@arg+2,7
  4699  056F  0008               	return
  4700  0570                     __end_of___ftpack:	
  4701                           
  4702                           	psect	text25
  4703  03A2                     __ptext25:	
  4704 ;; *************** function ___fttol *****************
  4705 ;; Defined at:
  4706 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
  4707 ;; Parameters:    Size  Location     Type
  4708 ;;  f1              3   35[BANK0 ] float 
  4709 ;; Auto vars:     Size  Location     Type
  4710 ;;  lval            4   44[BANK0 ] unsigned long 
  4711 ;;  exp1            1   48[BANK0 ] unsigned char 
  4712 ;;  sign1           1   43[BANK0 ] unsigned char 
  4713 ;; Return value:  Size  Location     Type
  4714 ;;                  4   35[BANK0 ] long 
  4715 ;; Registers used:
  4716 ;;		wreg, status,2, status,0
  4717 ;; Tracked objects:
  4718 ;;		On entry : 0/0
  4719 ;;		On exit  : 0/0
  4720 ;;		Unchanged: 0/0
  4721 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4722 ;;      Params:         0       4       0       0
  4723 ;;      Locals:         0       6       0       0
  4724 ;;      Temps:          0       4       0       0
  4725 ;;      Totals:         0      14       0       0
  4726 ;;Total ram usage:       14 bytes
  4727 ;; Hardware stack levels used:    1
  4728 ;; Hardware stack levels required when called:    2
  4729 ;; This function calls:
  4730 ;;		Nothing
  4731 ;; This function is called by:
  4732 ;;		_verifyACSignal
  4733 ;; This function uses a non-reentrant model
  4734 ;;
  4735                           
  4736                           
  4737                           ;psect for function ___fttol
  4738  03A2                     ___fttol:	
  4739                           
  4740                           ;incstack = 0
  4741                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  4742  03A2  0020               	movlb	0	; select bank0
  4743  03A3  0843               	movf	___fttol@f1,w
  4744  03A4  00C7               	movwf	??___fttol
  4745  03A5  0844               	movf	___fttol@f1+1,w
  4746  03A6  00C8               	movwf	??___fttol+1
  4747  03A7  0845               	movf	___fttol@f1+2,w
  4748  03A8  00C9               	movwf	??___fttol+2
  4749  03A9  1003               	clrc
  4750  03AA  0D48               	rlf	??___fttol+1,w
  4751  03AB  0D49               	rlf	??___fttol+2,w
  4752  03AC  00CA               	movwf	??___fttol+3
  4753  03AD  084A               	movf	??___fttol+3,w
  4754  03AE  00D0               	movwf	___fttol@exp1
  4755  03AF  0850               	movf	___fttol@exp1,w
  4756  03B0  1D03               	btfss	3,2
  4757  03B1  2BBB               	goto	l3277
  4758  03B2  3000               	movlw	0
  4759  03B3  00C6               	movwf	?___fttol+3
  4760  03B4  3000               	movlw	0
  4761  03B5  00C5               	movwf	?___fttol+2
  4762  03B6  3000               	movlw	0
  4763  03B7  00C4               	movwf	?___fttol+1
  4764  03B8  3000               	movlw	0
  4765  03B9  00C3               	movwf	?___fttol
  4766  03BA  0008               	return
  4767  03BB                     l3277:	
  4768  03BB  0843               	movf	___fttol@f1,w
  4769  03BC  00C7               	movwf	??___fttol
  4770  03BD  0844               	movf	___fttol@f1+1,w
  4771  03BE  00C8               	movwf	??___fttol+1
  4772  03BF  0845               	movf	___fttol@f1+2,w
  4773  03C0  00C9               	movwf	??___fttol+2
  4774  03C1  3017               	movlw	23
  4775  03C2                     u3325:	
  4776  03C2  36C9               	lsrf	??___fttol+2,f
  4777  03C3  0CC8               	rrf	??___fttol+1,f
  4778  03C4  0CC7               	rrf	??___fttol,f
  4779  03C5  0B89               	decfsz	9,f
  4780  03C6  2BC2               	goto	u3325
  4781  03C7  0847               	movf	??___fttol,w
  4782  03C8  00CA               	movwf	??___fttol+3
  4783  03C9  084A               	movf	??___fttol+3,w
  4784  03CA  00CB               	movwf	___fttol@sign1
  4785  03CB  17C4               	bsf	___fttol@f1+1,7
  4786  03CC  30FF               	movlw	255
  4787  03CD  05C3               	andwf	___fttol@f1,f
  4788  03CE  30FF               	movlw	255
  4789  03CF  05C4               	andwf	___fttol@f1+1,f
  4790  03D0  3000               	movlw	0
  4791  03D1  05C5               	andwf	___fttol@f1+2,f
  4792  03D2  0843               	movf	___fttol@f1,w
  4793  03D3  00CC               	movwf	___fttol@lval
  4794  03D4  0844               	movf	___fttol@f1+1,w
  4795  03D5  00CD               	movwf	___fttol@lval+1
  4796  03D6  0845               	movf	___fttol@f1+2,w
  4797  03D7  00CE               	movwf	___fttol@lval+2
  4798  03D8  01CF               	clrf	___fttol@lval+3
  4799  03D9  308E               	movlw	142
  4800  03DA  02D0               	subwf	___fttol@exp1,f
  4801  03DB  1FD0               	btfss	___fttol@exp1,7
  4802  03DC  2BF9               	goto	l3297
  4803  03DD  0850               	movf	___fttol@exp1,w
  4804  03DE  3A80               	xorlw	128
  4805  03DF  3E8F               	addlw	143
  4806  03E0  1803               	skipnc
  4807  03E1  2BEB               	goto	l3295
  4808  03E2  3000               	movlw	0
  4809  03E3  00C6               	movwf	?___fttol+3
  4810  03E4  3000               	movlw	0
  4811  03E5  00C5               	movwf	?___fttol+2
  4812  03E6  3000               	movlw	0
  4813  03E7  00C4               	movwf	?___fttol+1
  4814  03E8  3000               	movlw	0
  4815  03E9  00C3               	movwf	?___fttol
  4816  03EA  0008               	return
  4817  03EB                     l3295:	
  4818  03EB  3001               	movlw	1
  4819  03EC                     u3355:	
  4820  03EC  36CF               	lsrf	___fttol@lval+3,f
  4821  03ED  0CCE               	rrf	___fttol@lval+2,f
  4822  03EE  0CCD               	rrf	___fttol@lval+1,f
  4823  03EF  0CCC               	rrf	___fttol@lval,f
  4824  03F0  0B89               	decfsz	9,f
  4825  03F1  2BEC               	goto	u3355
  4826  03F2  3001               	movlw	1
  4827  03F3  00C7               	movwf	??___fttol
  4828  03F4  0847               	movf	??___fttol,w
  4829  03F5  07D0               	addwf	___fttol@exp1,f
  4830  03F6  1903               	btfsc	3,2
  4831  03F7  2C12               	goto	l3305
  4832  03F8  2BEB               	goto	l3295
  4833  03F9                     l3297:	
  4834  03F9  3018               	movlw	24
  4835  03FA  0250               	subwf	___fttol@exp1,w
  4836  03FB  1C03               	skipc
  4837  03FC  2C0F               	goto	l818
  4838  03FD  3000               	movlw	0
  4839  03FE  00C6               	movwf	?___fttol+3
  4840  03FF  3000               	movlw	0
  4841  0400  00C5               	movwf	?___fttol+2
  4842  0401  3000               	movlw	0
  4843  0402  00C4               	movwf	?___fttol+1
  4844  0403  3000               	movlw	0
  4845  0404  00C3               	movwf	?___fttol
  4846  0405  0008               	return
  4847  0406                     l3303:	
  4848  0406  3001               	movlw	1
  4849  0407                     u3385:	
  4850  0407  35CC               	lslf	___fttol@lval,f
  4851  0408  0DCD               	rlf	___fttol@lval+1,f
  4852  0409  0DCE               	rlf	___fttol@lval+2,f
  4853  040A  0DCF               	rlf	___fttol@lval+3,f
  4854  040B  0B89               	decfsz	9,f
  4855  040C  2C07               	goto	u3385
  4856  040D  3001               	movlw	1
  4857  040E  02D0               	subwf	___fttol@exp1,f
  4858  040F                     l818:	
  4859  040F  0850               	movf	___fttol@exp1,w
  4860  0410  1D03               	btfss	3,2
  4861  0411  2C06               	goto	l3303
  4862  0412                     l3305:	
  4863  0412  084B               	movf	___fttol@sign1,w
  4864  0413  1903               	btfsc	3,2
  4865  0414  2C20               	goto	l3309
  4866  0415  09CC               	comf	___fttol@lval,f
  4867  0416  09CD               	comf	___fttol@lval+1,f
  4868  0417  09CE               	comf	___fttol@lval+2,f
  4869  0418  09CF               	comf	___fttol@lval+3,f
  4870  0419  0ACC               	incf	___fttol@lval,f
  4871  041A  1903               	skipnz
  4872  041B  0ACD               	incf	___fttol@lval+1,f
  4873  041C  1903               	skipnz
  4874  041D  0ACE               	incf	___fttol@lval+2,f
  4875  041E  1903               	skipnz
  4876  041F  0ACF               	incf	___fttol@lval+3,f
  4877  0420                     l3309:	
  4878  0420  084F               	movf	___fttol@lval+3,w
  4879  0421  00C6               	movwf	?___fttol+3
  4880  0422  084E               	movf	___fttol@lval+2,w
  4881  0423  00C5               	movwf	?___fttol+2
  4882  0424  084D               	movf	___fttol@lval+1,w
  4883  0425  00C4               	movwf	?___fttol+1
  4884  0426  084C               	movf	___fttol@lval,w
  4885  0427  00C3               	movwf	?___fttol
  4886  0428  0008               	return
  4887  0429                     __end_of___fttol:	
  4888                           
  4889                           	psect	text26
  4890  0EE5                     __ptext26:	
  4891 ;; *************** function _ToggleGLED *****************
  4892 ;; Defined at:
  4893 ;;		line 169 in file "IO_Controls.c"
  4894 ;; Parameters:    Size  Location     Type
  4895 ;;		None
  4896 ;; Auto vars:     Size  Location     Type
  4897 ;;		None
  4898 ;; Return value:  Size  Location     Type
  4899 ;;                  1    wreg      void 
  4900 ;; Registers used:
  4901 ;;		wreg
  4902 ;; Tracked objects:
  4903 ;;		On entry : 0/0
  4904 ;;		On exit  : 0/0
  4905 ;;		Unchanged: 0/0
  4906 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4907 ;;      Params:         0       0       0       0
  4908 ;;      Locals:         0       0       0       0
  4909 ;;      Temps:          0       1       0       0
  4910 ;;      Totals:         0       1       0       0
  4911 ;;Total ram usage:        1 bytes
  4912 ;; Hardware stack levels used:    1
  4913 ;; Hardware stack levels required when called:    2
  4914 ;; This function calls:
  4915 ;;		Nothing
  4916 ;; This function is called by:
  4917 ;;		_main
  4918 ;;		_verifyACSignal
  4919 ;; This function uses a non-reentrant model
  4920 ;;
  4921                           
  4922                           
  4923                           ;psect for function _ToggleGLED
  4924  0EE5                     _ToggleGLED:	
  4925                           
  4926                           ;IO_Controls.c: 171: portA.portAByte = PORTA;
  4927                           
  4928                           ;incstack = 0
  4929                           ; Regs used in _ToggleGLED: [wreg]
  4930  0EE5  0020               	movlb	0	; select bank0
  4931  0EE6  080C               	movf	12,w	;volatile
  4932  0EE7  00A0               	movwf	??_ToggleGLED
  4933  0EE8  0820               	movf	??_ToggleGLED,w
  4934  0EE9  00F4               	movwf	_portA
  4935                           
  4936                           ;IO_Controls.c: 172: if(portA.bits.PassLED == 1){
  4937  0EEA  1EF4               	btfss	_portA,5
  4938  0EEB  2EEE               	goto	l385
  4939                           
  4940                           ;IO_Controls.c: 174: portA.bits.PassLED = 0;
  4941  0EEC  12F4               	bcf	_portA,5
  4942                           
  4943                           ;IO_Controls.c: 175: }
  4944  0EED  2EEF               	goto	l3045
  4945  0EEE                     l385:	
  4946                           
  4947                           ;IO_Controls.c: 176: else{
  4948                           ;IO_Controls.c: 177: portA.bits.PassLED = 1;
  4949  0EEE  16F4               	bsf	_portA,5
  4950  0EEF                     l3045:	
  4951                           
  4952                           ;IO_Controls.c: 178: }
  4953                           ;IO_Controls.c: 179: PORTA=portA.portAByte;
  4954  0EEF  0874               	movf	_portA,w
  4955  0EF0  008C               	movwf	12	;volatile
  4956  0EF1  0008               	return
  4957  0EF2                     __end_of_ToggleGLED:	
  4958                           ;IO_Controls.c: 180: return;
  4959                           
  4960                           
  4961                           	psect	text27
  4962  07E4                     __ptext27:	
  4963 ;; *************** function _Timer1 *****************
  4964 ;; Defined at:
  4965 ;;		line 31 in file "Timer.c"
  4966 ;; Parameters:    Size  Location     Type
  4967 ;;		None
  4968 ;; Auto vars:     Size  Location     Type
  4969 ;;		None
  4970 ;; Return value:  Size  Location     Type
  4971 ;;                  2    0[BANK0 ] unsigned int 
  4972 ;; Registers used:
  4973 ;;		wreg, status,2
  4974 ;; Tracked objects:
  4975 ;;		On entry : 0/0
  4976 ;;		On exit  : 0/0
  4977 ;;		Unchanged: 0/0
  4978 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4979 ;;      Params:         0       2       0       0
  4980 ;;      Locals:         0       0       0       0
  4981 ;;      Temps:          0       2       0       0
  4982 ;;      Totals:         0       4       0       0
  4983 ;;Total ram usage:        4 bytes
  4984 ;; Hardware stack levels used:    1
  4985 ;; Hardware stack levels required when called:    2
  4986 ;; This function calls:
  4987 ;;		Nothing
  4988 ;; This function is called by:
  4989 ;;		_verifyACSignal
  4990 ;; This function uses a non-reentrant model
  4991 ;;
  4992                           
  4993                           
  4994                           ;psect for function _Timer1
  4995  07E4                     _Timer1:	
  4996                           
  4997                           ;Timer.c: 33: TMR1ON = 0;
  4998                           
  4999                           ;incstack = 0
  5000                           ; Regs used in _Timer1: [wreg+status,2]
  5001  07E4  0020               	movlb	0	; select bank0
  5002  07E5  1018               	bcf	24,0	;volatile
  5003                           
  5004                           ;Timer.c: 35: temp_time = TMR1H;
  5005  07E6  0817               	movf	23,w	;volatile
  5006  07E7  00A2               	movwf	??_Timer1
  5007  07E8  01A3               	clrf	??_Timer1+1
  5008  07E9  0822               	movf	??_Timer1,w
  5009  07EA  00DC               	movwf	_temp_time
  5010  07EB  0823               	movf	??_Timer1+1,w
  5011  07EC  00DD               	movwf	_temp_time+1
  5012                           
  5013                           ;Timer.c: 36: temp_time <<= 8;
  5014  07ED  3008               	movlw	8
  5015  07EE                     u3185:	
  5016  07EE  35DC               	lslf	_temp_time,f
  5017  07EF  0DDD               	rlf	_temp_time+1,f
  5018  07F0  0B89               	decfsz	9,f
  5019  07F1  2FEE               	goto	u3185
  5020                           
  5021                           ;Timer.c: 37: temp_time += TMR1L;
  5022  07F2  0816               	movf	22,w	;volatile
  5023  07F3  00A2               	movwf	??_Timer1
  5024  07F4  01A3               	clrf	??_Timer1+1
  5025  07F5  0822               	movf	??_Timer1,w
  5026  07F6  07DC               	addwf	_temp_time,f
  5027  07F7  0823               	movf	??_Timer1+1,w
  5028  07F8  3DDD               	addwfc	_temp_time+1,f
  5029                           
  5030                           ;Timer.c: 39: TMR1L = 0x00;
  5031  07F9  0196               	clrf	22	;volatile
  5032                           
  5033                           ;Timer.c: 40: TMR1H = 0x00;
  5034  07FA  0197               	clrf	23	;volatile
  5035                           
  5036                           ;Timer.c: 42: return temp_time;
  5037  07FB  085D               	movf	_temp_time+1,w
  5038  07FC  00A1               	movwf	?_Timer1+1
  5039  07FD  085C               	movf	_temp_time,w
  5040  07FE  00A0               	movwf	?_Timer1
  5041  07FF  0008               	return
  5042  0800                     __end_of_Timer1:	
  5043                           
  5044                           	psect	text28
  5045  0708                     __ptext28:	
  5046 ;; *************** function _ReadADC *****************
  5047 ;; Defined at:
  5048 ;;		line 33 in file "ADC.c"
  5049 ;; Parameters:    Size  Location     Type
  5050 ;;		None
  5051 ;; Auto vars:     Size  Location     Type
  5052 ;;		None
  5053 ;; Return value:  Size  Location     Type
  5054 ;;                  2    0[BANK0 ] unsigned short 
  5055 ;; Registers used:
  5056 ;;		wreg, status,2
  5057 ;; Tracked objects:
  5058 ;;		On entry : 0/0
  5059 ;;		On exit  : 0/0
  5060 ;;		Unchanged: 0/0
  5061 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5062 ;;      Params:         0       2       0       0
  5063 ;;      Locals:         0       0       0       0
  5064 ;;      Temps:          0       2       0       0
  5065 ;;      Totals:         0       4       0       0
  5066 ;;Total ram usage:        4 bytes
  5067 ;; Hardware stack levels used:    1
  5068 ;; Hardware stack levels required when called:    2
  5069 ;; This function calls:
  5070 ;;		Nothing
  5071 ;; This function is called by:
  5072 ;;		_verifyACSignal
  5073 ;; This function uses a non-reentrant model
  5074 ;;
  5075                           
  5076                           
  5077                           ;psect for function _ReadADC
  5078  0708                     _ReadADC:	
  5079                           
  5080                           ;ADC.c: 35: adcData = 0;
  5081                           
  5082                           ;incstack = 0
  5083                           ; Regs used in _ReadADC: [wreg+status,2]
  5084  0708  0021               	movlb	1	; select bank1
  5085  0709  01B8               	clrf	_adcData^(0+128)
  5086  070A  01B9               	clrf	(_adcData+1)^(0+128)
  5087                           
  5088                           ;ADC.c: 37: GO_nDONE = 1;
  5089  070B  149D               	bsf	29,1	;volatile
  5090  070C                     l246:	
  5091                           ;ADC.c: 38: while (GO_nDONE){
  5092                           
  5093  070C  189D               	btfsc	29,1	;volatile
  5094  070D  2F0C               	goto	l246
  5095                           
  5096                           ;ADC.c: 39: }
  5097                           ;ADC.c: 42: adcData = (ADRESH & 0x03);
  5098  070E  081C               	movf	28,w	;volatile
  5099  070F  3903               	andlw	3
  5100  0710  0020               	movlb	0	; select bank0
  5101  0711  00A2               	movwf	??_ReadADC
  5102  0712  01A3               	clrf	??_ReadADC+1
  5103  0713  0822               	movf	??_ReadADC,w
  5104  0714  0021               	movlb	1	; select bank1
  5105  0715  00B8               	movwf	_adcData^(0+128)
  5106  0716  0020               	movlb	0	; select bank0
  5107  0717  0823               	movf	??_ReadADC+1,w
  5108  0718  0021               	movlb	1	; select bank1
  5109  0719  00B9               	movwf	(_adcData+1)^(0+128)
  5110                           
  5111                           ;ADC.c: 43: adcData<<=8;
  5112  071A  3008               	movlw	8
  5113  071B                     u3175:	
  5114  071B  35B8               	lslf	_adcData^(0+128),f
  5115  071C  0DB9               	rlf	(_adcData+1)^(0+128),f
  5116  071D  0B89               	decfsz	9,f
  5117  071E  2F1B               	goto	u3175
  5118                           
  5119                           ;ADC.c: 44: adcData+=ADRESL;
  5120  071F  081B               	movf	27,w	;volatile
  5121  0720  0020               	movlb	0	; select bank0
  5122  0721  00A2               	movwf	??_ReadADC
  5123  0722  01A3               	clrf	??_ReadADC+1
  5124  0723  0822               	movf	??_ReadADC,w
  5125  0724  0021               	movlb	1	; select bank1
  5126  0725  07B8               	addwf	_adcData^(0+128),f
  5127  0726  0020               	movlb	0	; select bank0
  5128  0727  0823               	movf	??_ReadADC+1,w
  5129  0728  0021               	movlb	1	; select bank1
  5130  0729  3DB9               	addwfc	(_adcData+1)^(0+128),f
  5131                           
  5132                           ;ADC.c: 49: GO_nDONE = 0;
  5133  072A  109D               	bcf	29,1	;volatile
  5134                           
  5135                           ;ADC.c: 51: return adcData;
  5136  072B  0839               	movf	(_adcData+1)^(0+128),w
  5137  072C  0020               	movlb	0	; select bank0
  5138  072D  00A1               	movwf	?_ReadADC+1
  5139  072E  0021               	movlb	1	; select bank1
  5140  072F  0838               	movf	_adcData^(0+128),w
  5141  0730  0020               	movlb	0	; select bank0
  5142  0731  00A0               	movwf	?_ReadADC
  5143  0732  0008               	return
  5144  0733                     __end_of_ReadADC:	
  5145                           
  5146                           	psect	text29
  5147  063C                     __ptext29:	
  5148 ;; *************** function _pi3Connect *****************
  5149 ;; Defined at:
  5150 ;;		line 144 in file "newmain.c"
  5151 ;; Parameters:    Size  Location     Type
  5152 ;;		None
  5153 ;; Auto vars:     Size  Location     Type
  5154 ;;  handshake       1    5[BANK0 ] unsigned char 
  5155 ;; Return value:  Size  Location     Type
  5156 ;;                  1    wreg      void 
  5157 ;; Registers used:
  5158 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5159 ;; Tracked objects:
  5160 ;;		On entry : 0/0
  5161 ;;		On exit  : 0/0
  5162 ;;		Unchanged: 0/0
  5163 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5164 ;;      Params:         0       0       0       0
  5165 ;;      Locals:         0       1       0       0
  5166 ;;      Temps:          0       2       0       0
  5167 ;;      Totals:         0       3       0       0
  5168 ;;Total ram usage:        3 bytes
  5169 ;; Hardware stack levels used:    1
  5170 ;; Hardware stack levels required when called:    3
  5171 ;; This function calls:
  5172 ;;		_Fail_LED
  5173 ;;		_UART_TX
  5174 ;;		_empty_RX_BUFF
  5175 ;; This function is called by:
  5176 ;;		_main
  5177 ;; This function uses a non-reentrant model
  5178 ;;
  5179                           
  5180                           
  5181                           ;psect for function _pi3Connect
  5182  063C                     _pi3Connect:	
  5183                           
  5184                           ;newmain.c: 146: PIE1bits.RCIE = 1;
  5185                           
  5186                           ;incstack = 0
  5187                           ; Regs used in _pi3Connect: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5188  063C  0021               	movlb	1	; select bank1
  5189  063D  1691               	bsf	17,5	;volatile
  5190                           
  5191                           ;newmain.c: 147: INTCONbits.PEIE = 1;
  5192  063E  170B               	bsf	11,6	;volatile
  5193                           
  5194                           ;newmain.c: 149: RCSTAbits.SPEN = 1;
  5195  063F  0023               	movlb	3	; select bank3
  5196  0640  179D               	bsf	29,7	;volatile
  5197                           
  5198                           ;newmain.c: 150: RCSTAbits.CREN = 0; RCSTAbits.CREN = 1;
  5199  0641  121D               	bcf	29,4	;volatile
  5200  0642  161D               	bsf	29,4	;volatile
  5201                           
  5202                           ;newmain.c: 152: unsigned char handshake = '0';
  5203  0643  3030               	movlw	48
  5204  0644  0020               	movlb	0	; select bank0
  5205  0645  00A3               	movwf	??_pi3Connect
  5206  0646  0823               	movf	??_pi3Connect,w
  5207  0647  00A5               	movwf	pi3Connect@handshake
  5208  0648                     l3349:	
  5209                           ;newmain.c: 155: while(handshake != '1'){
  5210                           
  5211  0648  3031               	movlw	49
  5212  0649  0020               	movlb	0	; select bank0
  5213  064A  0625               	xorwf	pi3Connect@handshake,w
  5214  064B  1903               	btfsc	3,2
  5215  064C  2E58               	goto	l3351
  5216                           
  5217                           ;newmain.c: 157: handshake = rxArray[0];
  5218  064D  0021               	movlb	1	; select bank1
  5219  064E  083A               	movf	_rxArray^(0+128),w
  5220  064F  0020               	movlb	0	; select bank0
  5221  0650  00A3               	movwf	??_pi3Connect
  5222  0651  0823               	movf	??_pi3Connect,w
  5223  0652  00A5               	movwf	pi3Connect@handshake
  5224                           
  5225                           ;newmain.c: 158: Fail_LED(1);
  5226  0653  3001               	movlw	1
  5227  0654  318F  271C  3186   	fcall	_Fail_LED
  5228  0657  2E48               	goto	l3349
  5229  0658                     l3351:	
  5230                           
  5231                           ;newmain.c: 159: }
  5232                           ;newmain.c: 160: rxFlag = 0;
  5233  0658  0021               	movlb	1	; select bank1
  5234  0659  01AC               	clrf	_rxFlag^(0+128)
  5235  065A  01AD               	clrf	(_rxFlag+1)^(0+128)
  5236                           
  5237                           ;newmain.c: 163: empty_RX_BUFF();
  5238  065B  3187  275D  3186   	fcall	_empty_RX_BUFF
  5239                           
  5240                           ;newmain.c: 164: Fail_LED(0);
  5241  065E  3000               	movlw	0
  5242  065F  318F  271C  3186   	fcall	_Fail_LED
  5243                           
  5244                           ;newmain.c: 167: _delay((unsigned long)((10)*(4000000/4000.0)));
  5245  0662  300D               	movlw	13
  5246  0663  0020               	movlb	0	; select bank0
  5247  0664  00A3               	movwf	??_pi3Connect
  5248  0665  30FB               	movlw	251
  5249  0666                     u3697:	
  5250  0666  0B89               	decfsz	9,f
  5251  0667  2E66               	goto	u3697
  5252  0668  0BA3               	decfsz	??_pi3Connect,f
  5253  0669  2E66               	goto	u3697
  5254  066A  3200               	nop2
  5255                           
  5256                           ;newmain.c: 168: UART_TX(handshake);
  5257  066B  0020               	movlb	0	; select bank0
  5258  066C  0825               	movf	pi3Connect@handshake,w
  5259  066D  00A3               	movwf	??_pi3Connect
  5260  066E  01A4               	clrf	??_pi3Connect+1
  5261  066F  0823               	movf	??_pi3Connect,w
  5262  0670  00A0               	movwf	UART_TX@data
  5263  0671  0824               	movf	??_pi3Connect+1,w
  5264  0672  00A1               	movwf	UART_TX@data+1
  5265  0673  318E  26C4         	fcall	_UART_TX
  5266  0675  0008               	return
  5267  0676                     __end_of_pi3Connect:	
  5268                           ;newmain.c: 170: return;
  5269                           
  5270                           
  5271                           	psect	text30
  5272  075D                     __ptext30:	
  5273 ;; *************** function _empty_RX_BUFF *****************
  5274 ;; Defined at:
  5275 ;;		line 87 in file "USART.c"
  5276 ;; Parameters:    Size  Location     Type
  5277 ;;		None
  5278 ;; Auto vars:     Size  Location     Type
  5279 ;;  i               2    1[BANK0 ] int 
  5280 ;; Return value:  Size  Location     Type
  5281 ;;                  1    wreg      void 
  5282 ;; Registers used:
  5283 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5284 ;; Tracked objects:
  5285 ;;		On entry : 0/0
  5286 ;;		On exit  : 0/0
  5287 ;;		Unchanged: 0/0
  5288 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5289 ;;      Params:         0       0       0       0
  5290 ;;      Locals:         0       2       0       0
  5291 ;;      Temps:          0       1       0       0
  5292 ;;      Totals:         0       3       0       0
  5293 ;;Total ram usage:        3 bytes
  5294 ;; Hardware stack levels used:    1
  5295 ;; Hardware stack levels required when called:    2
  5296 ;; This function calls:
  5297 ;;		Nothing
  5298 ;; This function is called by:
  5299 ;;		_pi3Connect
  5300 ;;		_verifyACSignal
  5301 ;;		_setupTestParameters
  5302 ;; This function uses a non-reentrant model
  5303 ;;
  5304                           
  5305                           
  5306                           ;psect for function _empty_RX_BUFF
  5307  075D                     _empty_RX_BUFF:	
  5308                           
  5309                           ;USART.c: 88: for(int i = 0; i < 20; i++)
  5310                           
  5311                           ;incstack = 0
  5312                           ; Regs used in _empty_RX_BUFF: [wreg+fsr1l+fsr1h+status,2+status,0]
  5313  075D  0020               	movlb	0	; select bank0
  5314  075E  01A1               	clrf	empty_RX_BUFF@i
  5315  075F  01A2               	clrf	empty_RX_BUFF@i+1
  5316  0760  0822               	movf	empty_RX_BUFF@i+1,w
  5317  0761  3A80               	xorlw	128
  5318  0762  00A0               	movwf	??_empty_RX_BUFF
  5319  0763  3080               	movlw	128
  5320  0764  0220               	subwf	??_empty_RX_BUFF,w
  5321  0765  1D03               	skipz
  5322  0766  2F69               	goto	u2625
  5323  0767  3014               	movlw	20
  5324  0768  0221               	subwf	empty_RX_BUFF@i,w
  5325  0769                     u2625:	
  5326  0769  1803               	btfsc	3,0
  5327  076A  2F80               	goto	l2795
  5328  076B                     l2789:	
  5329                           
  5330                           ;USART.c: 89: {
  5331                           ;USART.c: 91: rxArray[i] = '\0';
  5332  076B  0020               	movlb	0	; select bank0
  5333  076C  0821               	movf	empty_RX_BUFF@i,w
  5334  076D  3EBA               	addlw	(low (_rxArray| 0))& (0+255)
  5335  076E  0086               	movwf	6
  5336  076F  0187               	clrf	7
  5337  0770  0181               	clrf	1
  5338  0771  3001               	movlw	1
  5339  0772  07A1               	addwf	empty_RX_BUFF@i,f
  5340  0773  3000               	movlw	0
  5341  0774  3DA2               	addwfc	empty_RX_BUFF@i+1,f
  5342  0775  0822               	movf	empty_RX_BUFF@i+1,w
  5343  0776  3A80               	xorlw	128
  5344  0777  00A0               	movwf	??_empty_RX_BUFF
  5345  0778  3080               	movlw	128
  5346  0779  0220               	subwf	??_empty_RX_BUFF,w
  5347  077A  1D03               	skipz
  5348  077B  2F7E               	goto	u2635
  5349  077C  3014               	movlw	20
  5350  077D  0221               	subwf	empty_RX_BUFF@i,w
  5351  077E                     u2635:	
  5352  077E  1C03               	skipc
  5353  077F  2F6B               	goto	l2789
  5354  0780                     l2795:	
  5355                           
  5356                           ;USART.c: 92: }
  5357                           ;USART.c: 93: ptr = 0;
  5358  0780  01F2               	clrf	_ptr
  5359  0781  0008               	return
  5360  0782                     __end_of_empty_RX_BUFF:	
  5361                           
  5362                           	psect	text31
  5363  0EC4                     __ptext31:	
  5364 ;; *************** function _UART_TX *****************
  5365 ;; Defined at:
  5366 ;;		line 48 in file "USART.c"
  5367 ;; Parameters:    Size  Location     Type
  5368 ;;  data            2    0[BANK0 ] PTR unsigned char 
  5369 ;;		 -> RAM(4096), 
  5370 ;; Auto vars:     Size  Location     Type
  5371 ;;		None
  5372 ;; Return value:  Size  Location     Type
  5373 ;;                  1    wreg      void 
  5374 ;; Registers used:
  5375 ;;		wreg
  5376 ;; Tracked objects:
  5377 ;;		On entry : 0/0
  5378 ;;		On exit  : 0/0
  5379 ;;		Unchanged: 0/0
  5380 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5381 ;;      Params:         0       2       0       0
  5382 ;;      Locals:         0       0       0       0
  5383 ;;      Temps:          0       0       0       0
  5384 ;;      Totals:         0       2       0       0
  5385 ;;Total ram usage:        2 bytes
  5386 ;; Hardware stack levels used:    1
  5387 ;; Hardware stack levels required when called:    2
  5388 ;; This function calls:
  5389 ;;		Nothing
  5390 ;; This function is called by:
  5391 ;;		_pi3Connect
  5392 ;;		_verifyACSignal
  5393 ;;		_setupTestParameters
  5394 ;;		_UART_TX_String
  5395 ;; This function uses a non-reentrant model
  5396 ;;
  5397                           
  5398                           
  5399                           ;psect for function _UART_TX
  5400  0EC4                     _UART_TX:	
  5401  0EC4                     l293:	
  5402                           ;USART.c: 52: continue;
  5403                           
  5404                           ;USART.c: 50: while(!TRMT)
  5405                           
  5406                           ;incstack = 0
  5407                           ; Regs used in _UART_TX: [wreg]
  5408                           
  5409  0EC4  0023               	movlb	3	; select bank3
  5410  0EC5  1C9E               	btfss	30,1	;volatile
  5411  0EC6  2EC4               	goto	l293
  5412                           
  5413                           ;USART.c: 53: if(TXIF){
  5414  0EC7  0020               	movlb	0	; select bank0
  5415  0EC8  1E11               	btfss	17,4	;volatile
  5416  0EC9  0008               	return
  5417                           
  5418                           ;USART.c: 56: TXREG = data;
  5419  0ECA  0820               	movf	UART_TX@data,w	;volatile
  5420  0ECB  0023               	movlb	3	; select bank3
  5421  0ECC  009A               	movwf	26	;volatile
  5422  0ECD  0008               	return
  5423  0ECE                     __end_of_UART_TX:	
  5424                           ;USART.c: 57: }
  5425                           ;USART.c: 59: return;
  5426                           
  5427                           
  5428                           	psect	text32
  5429  0F1C                     __ptext32:	
  5430 ;; *************** function _Fail_LED *****************
  5431 ;; Defined at:
  5432 ;;		line 139 in file "IO_Controls.c"
  5433 ;; Parameters:    Size  Location     Type
  5434 ;;  OnOff           1    wreg     unsigned char 
  5435 ;; Auto vars:     Size  Location     Type
  5436 ;;  OnOff           1    1[BANK0 ] unsigned char 
  5437 ;; Return value:  Size  Location     Type
  5438 ;;                  1    wreg      void 
  5439 ;; Registers used:
  5440 ;;		wreg, status,2
  5441 ;; Tracked objects:
  5442 ;;		On entry : 0/0
  5443 ;;		On exit  : 0/0
  5444 ;;		Unchanged: 0/0
  5445 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5446 ;;      Params:         0       0       0       0
  5447 ;;      Locals:         0       1       0       0
  5448 ;;      Temps:          0       1       0       0
  5449 ;;      Totals:         0       2       0       0
  5450 ;;Total ram usage:        2 bytes
  5451 ;; Hardware stack levels used:    1
  5452 ;; Hardware stack levels required when called:    2
  5453 ;; This function calls:
  5454 ;;		Nothing
  5455 ;; This function is called by:
  5456 ;;		_pi3Connect
  5457 ;; This function uses a non-reentrant model
  5458 ;;
  5459                           
  5460                           
  5461                           ;psect for function _Fail_LED
  5462  0F1C                     _Fail_LED:	
  5463                           
  5464                           ;incstack = 0
  5465                           ; Regs used in _Fail_LED: [wreg+status,2]
  5466                           ;Fail_LED@OnOff stored from wreg
  5467  0F1C  0020               	movlb	0	; select bank0
  5468  0F1D  00A1               	movwf	Fail_LED@OnOff
  5469                           
  5470                           ;IO_Controls.c: 141: portC.portCByte = PORTC;
  5471  0F1E  080E               	movf	14,w	;volatile
  5472  0F1F  00A0               	movwf	??_Fail_LED
  5473  0F20  0820               	movf	??_Fail_LED,w
  5474  0F21  00F3               	movwf	_portC
  5475                           
  5476                           ;IO_Controls.c: 142: portC.bits.Fail_LED = OnOff;
  5477  0F22  0821               	movf	Fail_LED@OnOff,w
  5478  0F23  3901               	andlw	1
  5479  0F24  12F3               	bcf	_portC,5
  5480  0F25  1D03               	skipz
  5481  0F26  16F3               	bsf	_portC,5
  5482                           
  5483                           ;IO_Controls.c: 143: PORTC=portC.portCByte;
  5484  0F27  0873               	movf	_portC,w
  5485  0F28  008E               	movwf	14	;volatile
  5486  0F29  0008               	return
  5487  0F2A                     __end_of_Fail_LED:	
  5488                           ;IO_Controls.c: 144: return;
  5489                           
  5490                           
  5491                           	psect	text33
  5492  0F71                     __ptext33:	
  5493 ;; *************** function _initPIC *****************
  5494 ;; Defined at:
  5495 ;;		line 111 in file "newmain.c"
  5496 ;; Parameters:    Size  Location     Type
  5497 ;;		None
  5498 ;; Auto vars:     Size  Location     Type
  5499 ;;		None
  5500 ;; Return value:  Size  Location     Type
  5501 ;;                  1    wreg      void 
  5502 ;; Registers used:
  5503 ;;		wreg, status,2, status,0, pclath, cstack
  5504 ;; Tracked objects:
  5505 ;;		On entry : 0/0
  5506 ;;		On exit  : 0/0
  5507 ;;		Unchanged: 0/0
  5508 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5509 ;;      Params:         0       0       0       0
  5510 ;;      Locals:         0       0       0       0
  5511 ;;      Temps:          0       0       0       0
  5512 ;;      Totals:         0       0       0       0
  5513 ;;Total ram usage:        0 bytes
  5514 ;; Hardware stack levels used:    1
  5515 ;; Hardware stack levels required when called:    3
  5516 ;; This function calls:
  5517 ;;		_InitUSART
  5518 ;;		_Init_TMR1
  5519 ;;		_InitialiseADC
  5520 ;;		_InitialisePorts
  5521 ;; This function is called by:
  5522 ;;		_main
  5523 ;; This function uses a non-reentrant model
  5524 ;;
  5525                           
  5526                           
  5527                           ;psect for function _initPIC
  5528  0F71                     _initPIC:	
  5529                           
  5530                           ;newmain.c: 115: OSCCON = 0b01101000;
  5531                           
  5532                           ;incstack = 0
  5533                           ; Regs used in _initPIC: [wreg+status,2+status,0+pclath+cstack]
  5534  0F71  3068               	movlw	104
  5535  0F72  0021               	movlb	1	; select bank1
  5536  0F73  0099               	movwf	25	;volatile
  5537  0F74                     l138:	
  5538                           ;newmain.c: 126: while(HFIOFR==0){
  5539                           
  5540  0F74  1E1A               	btfss	26,4	;volatile
  5541  0F75  2F74               	goto	l138
  5542                           
  5543                           ;newmain.c: 127: }
  5544                           ;newmain.c: 130: INTCON = 0b00000000;
  5545  0F76  018B               	clrf	11	;volatile
  5546                           
  5547                           ;newmain.c: 131: INTCONbits.GIE = 0;
  5548  0F77  138B               	bcf	11,7	;volatile
  5549                           
  5550                           ;newmain.c: 133: InitialisePorts();
  5551  0F78  318F  279B  318F   	fcall	_InitialisePorts
  5552                           
  5553                           ;newmain.c: 134: Init_TMR1();
  5554  0F7B  318E  26D8  318F   	fcall	_Init_TMR1
  5555                           
  5556                           ;newmain.c: 135: InitialiseADC();
  5557  0F7E  318F  2785  318F   	fcall	_InitialiseADC
  5558                           
  5559                           ;newmain.c: 136: InitUSART();
  5560  0F81  318F  27B2         	fcall	_InitUSART
  5561                           
  5562                           ;newmain.c: 138: INTCONbits.GIE = 1;
  5563  0F83  178B               	bsf	11,7	;volatile
  5564  0F84  0008               	return
  5565  0F85                     __end_of_initPIC:	
  5566                           ;newmain.c: 140: return;
  5567                           
  5568                           
  5569                           	psect	text34
  5570  0F9B                     __ptext34:	
  5571 ;; *************** function _InitialisePorts *****************
  5572 ;; Defined at:
  5573 ;;		line 11 in file "IO_Controls.c"
  5574 ;; Parameters:    Size  Location     Type
  5575 ;;		None
  5576 ;; Auto vars:     Size  Location     Type
  5577 ;;		None
  5578 ;; Return value:  Size  Location     Type
  5579 ;;                  1    wreg      void 
  5580 ;; Registers used:
  5581 ;;		wreg, status,2
  5582 ;; Tracked objects:
  5583 ;;		On entry : 0/0
  5584 ;;		On exit  : 0/0
  5585 ;;		Unchanged: 0/0
  5586 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5587 ;;      Params:         0       0       0       0
  5588 ;;      Locals:         0       0       0       0
  5589 ;;      Temps:          0       0       0       0
  5590 ;;      Totals:         0       0       0       0
  5591 ;;Total ram usage:        0 bytes
  5592 ;; Hardware stack levels used:    1
  5593 ;; Hardware stack levels required when called:    2
  5594 ;; This function calls:
  5595 ;;		Nothing
  5596 ;; This function is called by:
  5597 ;;		_initPIC
  5598 ;; This function uses a non-reentrant model
  5599 ;;
  5600                           
  5601                           
  5602                           ;psect for function _InitialisePorts
  5603  0F9B                     _InitialisePorts:	
  5604                           
  5605                           ;IO_Controls.c: 13: OPTION_REG = 0b11000000;
  5606                           
  5607                           ;incstack = 0
  5608                           ; Regs used in _InitialisePorts: [wreg+status,2]
  5609  0F9B  30C0               	movlw	192
  5610  0F9C  0021               	movlb	1	; select bank1
  5611  0F9D  0095               	movwf	21	;volatile
  5612                           
  5613                           ;IO_Controls.c: 31: portA.portAByte = 0;
  5614  0F9E  01F4               	clrf	_portA
  5615                           
  5616                           ;IO_Controls.c: 32: LATA = 0;
  5617  0F9F  0022               	movlb	2	; select bank2
  5618  0FA0  018C               	clrf	12	;volatile
  5619                           
  5620                           ;IO_Controls.c: 34: TRISA = 0b00011110;
  5621  0FA1  301E               	movlw	30
  5622  0FA2  0021               	movlb	1	; select bank1
  5623  0FA3  008C               	movwf	12	;volatile
  5624                           
  5625                           ;IO_Controls.c: 42: ANSELA = 0b00000000;
  5626  0FA4  0023               	movlb	3	; select bank3
  5627  0FA5  018C               	clrf	12	;volatile
  5628                           
  5629                           ;IO_Controls.c: 44: IOCAPbits.IOCAP4 = 1;
  5630  0FA6  0027               	movlb	7	; select bank7
  5631  0FA7  1611               	bsf	17,4	;volatile
  5632                           
  5633                           ;IO_Controls.c: 59: portC.portCByte = 0;
  5634  0FA8  01F3               	clrf	_portC
  5635                           
  5636                           ;IO_Controls.c: 60: LATC = 0;
  5637  0FA9  0022               	movlb	2	; select bank2
  5638  0FAA  018E               	clrf	14	;volatile
  5639                           
  5640                           ;IO_Controls.c: 61: TRISC = 0b00001000;
  5641  0FAB  3008               	movlw	8
  5642  0FAC  0021               	movlb	1	; select bank1
  5643  0FAD  008E               	movwf	14	;volatile
  5644                           
  5645                           ;IO_Controls.c: 63: ANSELC = 0b00001000;
  5646  0FAE  3008               	movlw	8
  5647  0FAF  0023               	movlb	3	; select bank3
  5648  0FB0  008E               	movwf	14	;volatile
  5649  0FB1  0008               	return
  5650  0FB2                     __end_of_InitialisePorts:	
  5651                           ;IO_Controls.c: 68: return;
  5652                           
  5653                           
  5654                           	psect	text35
  5655  0F85                     __ptext35:	
  5656 ;; *************** function _InitialiseADC *****************
  5657 ;; Defined at:
  5658 ;;		line 15 in file "ADC.c"
  5659 ;; Parameters:    Size  Location     Type
  5660 ;;		None
  5661 ;; Auto vars:     Size  Location     Type
  5662 ;;		None
  5663 ;; Return value:  Size  Location     Type
  5664 ;;                  1    wreg      void 
  5665 ;; Registers used:
  5666 ;;		wreg, status,2, status,0
  5667 ;; Tracked objects:
  5668 ;;		On entry : 0/0
  5669 ;;		On exit  : 0/0
  5670 ;;		Unchanged: 0/0
  5671 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5672 ;;      Params:         0       0       0       0
  5673 ;;      Locals:         0       0       0       0
  5674 ;;      Temps:          0       0       0       0
  5675 ;;      Totals:         0       0       0       0
  5676 ;;Total ram usage:        0 bytes
  5677 ;; Hardware stack levels used:    1
  5678 ;; Hardware stack levels required when called:    2
  5679 ;; This function calls:
  5680 ;;		Nothing
  5681 ;; This function is called by:
  5682 ;;		_initPIC
  5683 ;; This function uses a non-reentrant model
  5684 ;;
  5685                           
  5686                           
  5687                           ;psect for function _InitialiseADC
  5688  0F85                     _InitialiseADC:	
  5689                           
  5690                           ;ADC.c: 17: ADCON0bits.CHS = 0b0111;
  5691                           
  5692                           ;incstack = 0
  5693                           ; Regs used in _InitialiseADC: [wreg+status,2+status,0]
  5694  0F85  0021               	movlb	1	; select bank1
  5695  0F86  081D               	movf	29,w	;volatile
  5696  0F87  3983               	andlw	-125
  5697  0F88  381C               	iorlw	28
  5698  0F89  009D               	movwf	29	;volatile
  5699                           
  5700                           ;ADC.c: 19: ADFM = 1;
  5701  0F8A  179E               	bsf	30,7	;volatile
  5702                           
  5703                           ;ADC.c: 20: ADCON1bits.ADCS = 0b000;
  5704  0F8B  308F               	movlw	-113
  5705  0F8C  059E               	andwf	30,f	;volatile
  5706                           
  5707                           ;ADC.c: 22: ADCON1bits.ADPREF = 0b011;
  5708  0F8D  3003               	movlw	3
  5709  0F8E  049E               	iorwf	30,f	;volatile
  5710                           
  5711                           ;ADC.c: 24: FVRCON = 0b11000011;
  5712  0F8F  30C3               	movlw	195
  5713  0F90  0022               	movlb	2	; select bank2
  5714  0F91  0097               	movwf	23	;volatile
  5715                           
  5716                           ;ADC.c: 26: _delay((unsigned long)((10)*(4000000/4000000.0)));
  5717  0F92  3003               	movlw	3
  5718  0F93                     u3707:	
  5719  0F93  0B89               	decfsz	9,f
  5720  0F94  2F93               	goto	u3707
  5721  0F95  0000               	nop
  5722                           
  5723                           ;ADC.c: 27: ADIE=0;
  5724  0F96  0021               	movlb	1	; select bank1
  5725  0F97  1311               	bcf	17,6	;volatile
  5726                           
  5727                           ;ADC.c: 28: ADON=0;
  5728  0F98  101D               	bcf	29,0	;volatile
  5729                           
  5730                           ;ADC.c: 29: GO_nDONE=0;
  5731  0F99  109D               	bcf	29,1	;volatile
  5732  0F9A  0008               	return
  5733  0F9B                     __end_of_InitialiseADC:	
  5734                           ;ADC.c: 30: return;
  5735                           
  5736                           
  5737                           	psect	text36
  5738  0ED8                     __ptext36:	
  5739 ;; *************** function _Init_TMR1 *****************
  5740 ;; Defined at:
  5741 ;;		line 17 in file "Timer.c"
  5742 ;; Parameters:    Size  Location     Type
  5743 ;;		None
  5744 ;; Auto vars:     Size  Location     Type
  5745 ;;		None
  5746 ;; Return value:  Size  Location     Type
  5747 ;;                  1    wreg      void 
  5748 ;; Registers used:
  5749 ;;		wreg, status,2, status,0
  5750 ;; Tracked objects:
  5751 ;;		On entry : 0/0
  5752 ;;		On exit  : 0/0
  5753 ;;		Unchanged: 0/0
  5754 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5755 ;;      Params:         0       0       0       0
  5756 ;;      Locals:         0       0       0       0
  5757 ;;      Temps:          0       0       0       0
  5758 ;;      Totals:         0       0       0       0
  5759 ;;Total ram usage:        0 bytes
  5760 ;; Hardware stack levels used:    1
  5761 ;; Hardware stack levels required when called:    2
  5762 ;; This function calls:
  5763 ;;		Nothing
  5764 ;; This function is called by:
  5765 ;;		_initPIC
  5766 ;; This function uses a non-reentrant model
  5767 ;;
  5768                           
  5769                           
  5770                           ;psect for function _Init_TMR1
  5771  0ED8                     _Init_TMR1:	
  5772                           
  5773                           ;Timer.c: 20: T1CON = 0b00000000;
  5774                           
  5775                           ;incstack = 0
  5776                           ; Regs used in _Init_TMR1: [wreg+status,2+status,0]
  5777  0ED8  0020               	movlb	0	; select bank0
  5778  0ED9  0198               	clrf	24	;volatile
  5779                           
  5780                           ;Timer.c: 21: T1CONbits.TMR1CS = 0b00;
  5781  0EDA  303F               	movlw	-193
  5782  0EDB  0598               	andwf	24,f	;volatile
  5783                           
  5784                           ;Timer.c: 22: T1CONbits.T1CKPS = 0b01;
  5785  0EDC  0818               	movf	24,w	;volatile
  5786  0EDD  39CF               	andlw	-49
  5787  0EDE  3810               	iorlw	16
  5788  0EDF  0098               	movwf	24	;volatile
  5789                           
  5790                           ;Timer.c: 24: T1GCON = 0b01000000;
  5791  0EE0  3040               	movlw	64
  5792  0EE1  0099               	movwf	25	;volatile
  5793                           
  5794                           ;Timer.c: 26: INTCON = 0b10000000;
  5795  0EE2  3080               	movlw	128
  5796  0EE3  008B               	movwf	11	;volatile
  5797  0EE4  0008               	return
  5798  0EE5                     __end_of_Init_TMR1:	
  5799                           ;Timer.c: 28: return;
  5800                           
  5801                           
  5802                           	psect	text37
  5803  0FB2                     __ptext37:	
  5804 ;; *************** function _InitUSART *****************
  5805 ;; Defined at:
  5806 ;;		line 15 in file "USART.c"
  5807 ;; Parameters:    Size  Location     Type
  5808 ;;		None
  5809 ;; Auto vars:     Size  Location     Type
  5810 ;;		None
  5811 ;; Return value:  Size  Location     Type
  5812 ;;                  1    wreg      void 
  5813 ;; Registers used:
  5814 ;;		wreg, status,2
  5815 ;; Tracked objects:
  5816 ;;		On entry : 0/0
  5817 ;;		On exit  : 0/0
  5818 ;;		Unchanged: 0/0
  5819 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5820 ;;      Params:         0       0       0       0
  5821 ;;      Locals:         0       0       0       0
  5822 ;;      Temps:          0       0       0       0
  5823 ;;      Totals:         0       0       0       0
  5824 ;;Total ram usage:        0 bytes
  5825 ;; Hardware stack levels used:    1
  5826 ;; Hardware stack levels required when called:    2
  5827 ;; This function calls:
  5828 ;;		Nothing
  5829 ;; This function is called by:
  5830 ;;		_initPIC
  5831 ;; This function uses a non-reentrant model
  5832 ;;
  5833                           
  5834                           
  5835                           ;psect for function _InitUSART
  5836  0FB2                     _InitUSART:	
  5837                           
  5838                           ;USART.c: 18: PIE1bits.TXIE = 0;
  5839                           
  5840                           ;incstack = 0
  5841                           ; Regs used in _InitUSART: [wreg+status,2]
  5842  0FB2  0021               	movlb	1	; select bank1
  5843  0FB3  1211               	bcf	17,4	;volatile
  5844                           
  5845                           ;USART.c: 19: RCREG = 0;
  5846  0FB4  0023               	movlb	3	; select bank3
  5847  0FB5  0199               	clrf	25	;volatile
  5848                           
  5849                           ;USART.c: 21: RCSTAbits.RX9 = 0;
  5850  0FB6  131D               	bcf	29,6	;volatile
  5851                           
  5852                           ;USART.c: 22: RCSTAbits.CREN = 1;
  5853  0FB7  161D               	bsf	29,4	;volatile
  5854                           
  5855                           ;USART.c: 25: TXSTAbits.TX9 = 0;
  5856  0FB8  131E               	bcf	30,6	;volatile
  5857                           
  5858                           ;USART.c: 26: TXSTAbits.TXEN = 1;
  5859  0FB9  169E               	bsf	30,5	;volatile
  5860                           
  5861                           ;USART.c: 29: TXSTAbits.SYNC = 0;
  5862  0FBA  121E               	bcf	30,4	;volatile
  5863                           
  5864                           ;USART.c: 30: TXSTAbits.BRGH = 1;
  5865  0FBB  151E               	bsf	30,2	;volatile
  5866                           
  5867                           ;USART.c: 31: BAUDCONbits.BRG16 = 0;
  5868  0FBC  119F               	bcf	31,3	;volatile
  5869                           
  5870                           ;USART.c: 32: SPBRG = 23;
  5871  0FBD  3017               	movlw	23
  5872  0FBE  009B               	movwf	27	;volatile
  5873                           
  5874                           ;USART.c: 34: TRISAbits.TRISA1 = 1;
  5875  0FBF  0021               	movlb	1	; select bank1
  5876  0FC0  148C               	bsf	12,1	;volatile
  5877                           
  5878                           ;USART.c: 35: ANSELAbits.ANSA1 = 0;
  5879  0FC1  0023               	movlb	3	; select bank3
  5880  0FC2  108C               	bcf	12,1	;volatile
  5881                           
  5882                           ;USART.c: 37: TRISAbits.TRISA0 = 0;
  5883  0FC3  0021               	movlb	1	; select bank1
  5884  0FC4  100C               	bcf	12,0	;volatile
  5885                           
  5886                           ;USART.c: 38: ANSELAbits.ANSA1 = 0;
  5887  0FC5  0023               	movlb	3	; select bank3
  5888  0FC6  108C               	bcf	12,1	;volatile
  5889                           
  5890                           ;USART.c: 40: APFCON0bits.RXDTSEL = 1;
  5891  0FC7  0022               	movlb	2	; select bank2
  5892  0FC8  179D               	bsf	29,7	;volatile
  5893                           
  5894                           ;USART.c: 41: APFCON0bits.TXCKSEL = 1;
  5895  0FC9  151D               	bsf	29,2	;volatile
  5896  0FCA  0008               	return
  5897  0FCB                     __end_of_InitUSART:	
  5898                           ;USART.c: 45: return;
  5899                           
  5900                           
  5901                           	psect	intentry
  5902  0004                     __pintentry:	
  5903 ;; *************** function _ISR *****************
  5904 ;; Defined at:
  5905 ;;		line 413 in file "newmain.c"
  5906 ;; Parameters:    Size  Location     Type
  5907 ;;		None
  5908 ;; Auto vars:     Size  Location     Type
  5909 ;;		None
  5910 ;; Return value:  Size  Location     Type
  5911 ;;                  1    wreg      void 
  5912 ;; Registers used:
  5913 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5914 ;; Tracked objects:
  5915 ;;		On entry : 0/0
  5916 ;;		On exit  : 0/0
  5917 ;;		Unchanged: 0/0
  5918 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5919 ;;      Params:         0       0       0       0
  5920 ;;      Locals:         0       0       0       0
  5921 ;;      Temps:          1       0       0       0
  5922 ;;      Totals:         1       0       0       0
  5923 ;;Total ram usage:        1 bytes
  5924 ;; Hardware stack levels used:    1
  5925 ;; Hardware stack levels required when called:    1
  5926 ;; This function calls:
  5927 ;;		_UART_RX_String
  5928 ;;		i1_Fail_LED
  5929 ;;		i1_PassLED
  5930 ;;		i1_Timer1
  5931 ;; This function is called by:
  5932 ;;		Interrupt level 1
  5933 ;; This function uses a non-reentrant model
  5934 ;;
  5935                           
  5936  0004                     _ISR:	
  5937                           
  5938                           ;incstack = 0
  5939  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  5940                           
  5941                           ; Regs used in _ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5942  0005  3180               	pagesel	$
  5943  0006  0020               	movlb	0	; select bank0
  5944  0007  087F               	movf	127,w
  5945  0008  00F9               	movwf	??_ISR
  5946                           
  5947                           ;newmain.c: 417: if((INTCONbits.INTF == 1) && (INTCONbits.INTE == 1)){
  5948  0009  188B               	btfsc	11,1	;volatile
  5949  000A  1E0B               	btfss	11,4	;volatile
  5950  000B  282B               	goto	i1l197
  5951                           
  5952                           ;newmain.c: 419: if((PORTAbits.RA2 == 1)){
  5953  000C  1D0C               	btfss	12,2	;volatile
  5954  000D  2829               	goto	i1l198
  5955                           
  5956                           ;newmain.c: 421: if((ADC_Test == 1) && (tmr1StartFlag == 0)){
  5957  000E  0370               	decf	_ADC_Test,w	;volatile
  5958  000F  0471               	iorwf	_ADC_Test+1,w	;volatile
  5959  0010  1D03               	btfss	3,2
  5960  0011  2824               	goto	i1l2679
  5961  0012  0866               	movf	_tmr1StartFlag,w	;volatile
  5962  0013  0467               	iorwf	_tmr1StartFlag+1,w	;volatile
  5963  0014  1D03               	btfss	3,2
  5964  0015  2824               	goto	i1l2679
  5965                           
  5966                           ;newmain.c: 423: TMR1ON = 1;
  5967  0016  1418               	bsf	24,0	;volatile
  5968                           
  5969                           ;newmain.c: 424: tmr1StartFlag++;
  5970  0017  3001               	movlw	1
  5971  0018  07E6               	addwf	_tmr1StartFlag,f	;volatile
  5972  0019  3000               	movlw	0
  5973  001A  3DE7               	addwfc	_tmr1StartFlag+1,f	;volatile
  5974                           
  5975                           ;newmain.c: 425: Fail_LED(0);
  5976  001B  3000               	movlw	0
  5977  001C  318F  2700  3180   	fcall	i1_Fail_LED
  5978                           
  5979                           ;newmain.c: 426: PassLED(1);
  5980  001F  3001               	movlw	1
  5981  0020  318F  270E  3180   	fcall	i1_PassLED
  5982                           
  5983                           ;newmain.c: 427: }
  5984  0023  2829               	goto	i1l198
  5985  0024                     i1l2679:	
  5986                           
  5987                           ;newmain.c: 428: else if(PosCycle == 1){
  5988  0024  0020               	movlb	0	; select bank0
  5989  0025  0360               	decf	_PosCycle,w	;volatile
  5990  0026  0461               	iorwf	_PosCycle+1,w	;volatile
  5991  0027  1903               	btfsc	3,2
  5992                           
  5993                           ;newmain.c: 430: TMR1ON = 1;
  5994  0028  1418               	bsf	24,0	;volatile
  5995  0029                     i1l198:	
  5996                           
  5997                           ;newmain.c: 431: }
  5998                           ;newmain.c: 433: }
  5999                           ;newmain.c: 434: INTCONbits.INTF = 0;
  6000  0029  108B               	bcf	11,1	;volatile
  6001                           
  6002                           ;newmain.c: 435: }
  6003  002A  286D               	goto	i1l214
  6004  002B                     i1l197:	
  6005                           
  6006                           ;newmain.c: 439: else if(( IOCAFbits.IOCAF4 == 1 ) && (INTCONbits.IOCIE == 1)){
  6007  002B  0027               	movlb	7	; select bank7
  6008  002C  1A13               	btfsc	19,4	;volatile
  6009  002D  1D8B               	btfss	11,3	;volatile
  6010  002E  2857               	goto	i1l203
  6011                           
  6012                           ;newmain.c: 441: if((PORTAbits.RA4 == 1)){
  6013  002F  0020               	movlb	0	; select bank0
  6014  0030  1E0C               	btfss	12,4	;volatile
  6015  0031  2854               	goto	i1l204
  6016                           
  6017                           ;newmain.c: 443: if((ADC_Test == 1) && (tmr1StartFlag == 1)){
  6018  0032  0370               	decf	_ADC_Test,w	;volatile
  6019  0033  0471               	iorwf	_ADC_Test+1,w	;volatile
  6020  0034  1D03               	btfss	3,2
  6021  0035  2850               	goto	i1l2699
  6022  0036  0366               	decf	_tmr1StartFlag,w	;volatile
  6023  0037  0467               	iorwf	_tmr1StartFlag+1,w	;volatile
  6024  0038  1D03               	btfss	3,2
  6025  0039  2850               	goto	i1l2699
  6026                           
  6027                           ;newmain.c: 444: tmr1Val = Timer1();
  6028  003A  318F  27E4  3180   	fcall	i1_Timer1
  6029  003D  0875               	movf	?i1_Timer1,w
  6030  003E  0021               	movlb	1	; select bank1
  6031  003F  00A4               	movwf	_tmr1Val^(0+128)
  6032  0040  0876               	movf	?i1_Timer1+1,w
  6033  0041  00A5               	movwf	(_tmr1Val^(0+128)+1)
  6034  0042  01A6               	clrf	(_tmr1Val^(0+128)+2)
  6035  0043  01A7               	clrf	(_tmr1Val^(0+128)+3)
  6036                           
  6037                           ;newmain.c: 445: Fail_LED(1);
  6038  0044  3001               	movlw	1
  6039  0045  318F  2700  3180   	fcall	i1_Fail_LED
  6040                           
  6041                           ;newmain.c: 446: PassLED(0);
  6042  0048  3000               	movlw	0
  6043  0049  318F  270E  3180   	fcall	i1_PassLED
  6044                           
  6045                           ;newmain.c: 447: tmr1StartFlag = 0;
  6046  004C  0020               	movlb	0	; select bank0
  6047  004D  01E6               	clrf	_tmr1StartFlag	;volatile
  6048  004E  01E7               	clrf	_tmr1StartFlag+1	;volatile
  6049                           
  6050                           ;newmain.c: 448: }
  6051  004F  2854               	goto	i1l204
  6052  0050                     i1l2699:	
  6053                           
  6054                           ;newmain.c: 449: else if(NegCycle == 1){
  6055  0050  035E               	decf	_NegCycle,w	;volatile
  6056  0051  045F               	iorwf	_NegCycle+1,w	;volatile
  6057  0052  1903               	btfsc	3,2
  6058                           
  6059                           ;newmain.c: 451: TMR1ON = 1;
  6060  0053  1418               	bsf	24,0	;volatile
  6061  0054                     i1l204:	
  6062                           
  6063                           ;newmain.c: 452: }
  6064                           ;newmain.c: 454: }
  6065                           ;newmain.c: 456: IOCAFbits.IOCAF4 = 0;
  6066  0054  0027               	movlb	7	; select bank7
  6067  0055  1213               	bcf	19,4	;volatile
  6068                           
  6069                           ;newmain.c: 457: }
  6070  0056  286D               	goto	i1l214
  6071  0057                     i1l203:	
  6072                           
  6073                           ;newmain.c: 460: else if (PIR1bits.RCIF){
  6074  0057  0020               	movlb	0	; select bank0
  6075  0058  1E91               	btfss	17,5	;volatile
  6076  0059  286D               	goto	i1l214
  6077                           
  6078                           ;newmain.c: 461: rxFlag = 1;
  6079  005A  3001               	movlw	1
  6080  005B  0021               	movlb	1	; select bank1
  6081  005C  00AC               	movwf	_rxFlag^(0+128)
  6082  005D  3000               	movlw	0
  6083  005E  00AD               	movwf	(_rxFlag^(0+128)+1)
  6084                           
  6085                           ;newmain.c: 462: if((RCSTAbits.OERR == 1) || (RCSTAbits.FERR == 1)){
  6086  005F  0023               	movlb	3	; select bank3
  6087  0060  189D               	btfsc	29,1	;volatile
  6088  0061  2864               	goto	i1l212
  6089  0062  1D1D               	btfss	29,2	;volatile
  6090  0063  286B               	goto	i1l2711
  6091  0064                     i1l212:	
  6092                           
  6093                           ;newmain.c: 465: RCSTAbits.CREN = 0; RCSTAbits.CREN = 1;
  6094  0064  121D               	bcf	29,4	;volatile
  6095  0065  161D               	bsf	29,4	;volatile
  6096                           
  6097                           ;newmain.c: 466: Fail_LED(1);
  6098  0066  3001               	movlw	1
  6099  0067  318F  2700  3180   	fcall	i1_Fail_LED
  6100                           
  6101                           ;newmain.c: 467: }
  6102  006A  286D               	goto	i1l214
  6103  006B                     i1l2711:	
  6104                           
  6105                           ;newmain.c: 468: else{
  6106                           ;newmain.c: 470: UART_RX_String();
  6107  006B  318E  26F2         	fcall	_UART_RX_String
  6108  006D                     i1l214:	
  6109                           ;newmain.c: 471: }
  6110                           ;newmain.c: 473: }
  6111                           ;newmain.c: 475: return;
  6112                           
  6113  006D  0879               	movf	??_ISR,w
  6114  006E  0020               	movlb	0	; select bank0
  6115  006F  00FF               	movwf	127
  6116  0070  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  6117  0071  0009               	retfie
  6118  0072                     __end_of_ISR:	
  6119                           
  6120                           	psect	text39
  6121  0FE4                     __ptext39:	
  6122 ;; *************** function i1_Timer1 *****************
  6123 ;; Defined at:
  6124 ;;		line 31 in file "Timer.c"
  6125 ;; Parameters:    Size  Location     Type
  6126 ;;		None
  6127 ;; Auto vars:     Size  Location     Type
  6128 ;;		None
  6129 ;; Return value:  Size  Location     Type
  6130 ;;                  2    0[COMMON] unsigned int 
  6131 ;; Registers used:
  6132 ;;		wreg, status,2
  6133 ;; Tracked objects:
  6134 ;;		On entry : 0/0
  6135 ;;		On exit  : 0/0
  6136 ;;		Unchanged: 0/0
  6137 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6138 ;;      Params:         2       0       0       0
  6139 ;;      Locals:         0       0       0       0
  6140 ;;      Temps:          2       0       0       0
  6141 ;;      Totals:         4       0       0       0
  6142 ;;Total ram usage:        4 bytes
  6143 ;; Hardware stack levels used:    1
  6144 ;; This function calls:
  6145 ;;		Nothing
  6146 ;; This function is called by:
  6147 ;;		_ISR
  6148 ;; This function uses a non-reentrant model
  6149 ;;
  6150                           
  6151                           
  6152                           ;psect for function i1_Timer1
  6153  0FE4                     i1_Timer1:	
  6154                           
  6155                           ;Timer.c: 33: TMR1ON = 0;
  6156                           
  6157                           ;incstack = 0
  6158                           ; Regs used in i1_Timer1: [wreg+status,2]
  6159  0FE4  0020               	movlb	0	; select bank0
  6160  0FE5  1018               	bcf	24,0	;volatile
  6161                           
  6162                           ;Timer.c: 35: temp_time = TMR1H;
  6163  0FE6  0817               	movf	23,w	;volatile
  6164  0FE7  00F7               	movwf	??i1_Timer1
  6165  0FE8  01F8               	clrf	??i1_Timer1+1
  6166  0FE9  0877               	movf	??i1_Timer1,w
  6167  0FEA  00DC               	movwf	_temp_time
  6168  0FEB  0878               	movf	??i1_Timer1+1,w
  6169  0FEC  00DD               	movwf	_temp_time+1
  6170                           
  6171                           ;Timer.c: 36: temp_time <<= 8;
  6172  0FED  3008               	movlw	8
  6173  0FEE                     u235_25:	
  6174  0FEE  35DC               	lslf	_temp_time,f
  6175  0FEF  0DDD               	rlf	_temp_time+1,f
  6176  0FF0  0B89               	decfsz	9,f
  6177  0FF1  2FEE               	goto	u235_25
  6178                           
  6179                           ;Timer.c: 37: temp_time += TMR1L;
  6180  0FF2  0816               	movf	22,w	;volatile
  6181  0FF3  00F7               	movwf	??i1_Timer1
  6182  0FF4  01F8               	clrf	??i1_Timer1+1
  6183  0FF5  0877               	movf	??i1_Timer1,w
  6184  0FF6  07DC               	addwf	_temp_time,f
  6185  0FF7  0878               	movf	??i1_Timer1+1,w
  6186  0FF8  3DDD               	addwfc	_temp_time+1,f
  6187                           
  6188                           ;Timer.c: 39: TMR1L = 0x00;
  6189  0FF9  0196               	clrf	22	;volatile
  6190                           
  6191                           ;Timer.c: 40: TMR1H = 0x00;
  6192  0FFA  0197               	clrf	23	;volatile
  6193                           
  6194                           ;Timer.c: 42: return temp_time;
  6195  0FFB  085D               	movf	_temp_time+1,w
  6196  0FFC  00F6               	movwf	?i1_Timer1+1
  6197  0FFD  085C               	movf	_temp_time,w
  6198  0FFE  00F5               	movwf	?i1_Timer1
  6199  0FFF  0008               	return
  6200  1000                     __end_ofi1_Timer1:	
  6201                           
  6202                           	psect	text40
  6203  0F0E                     __ptext40:	
  6204 ;; *************** function i1_PassLED *****************
  6205 ;; Defined at:
  6206 ;;		line 161 in file "IO_Controls.c"
  6207 ;; Parameters:    Size  Location     Type
  6208 ;;  OnOff           1    wreg     unsigned char 
  6209 ;; Auto vars:     Size  Location     Type
  6210 ;;  OnOff           1    1[COMMON] unsigned char 
  6211 ;; Return value:  Size  Location     Type
  6212 ;;                  1    wreg      void 
  6213 ;; Registers used:
  6214 ;;		wreg, status,2
  6215 ;; Tracked objects:
  6216 ;;		On entry : 0/0
  6217 ;;		On exit  : 0/0
  6218 ;;		Unchanged: 0/0
  6219 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6220 ;;      Params:         0       0       0       0
  6221 ;;      Locals:         1       0       0       0
  6222 ;;      Temps:          1       0       0       0
  6223 ;;      Totals:         2       0       0       0
  6224 ;;Total ram usage:        2 bytes
  6225 ;; Hardware stack levels used:    1
  6226 ;; This function calls:
  6227 ;;		Nothing
  6228 ;; This function is called by:
  6229 ;;		_ISR
  6230 ;; This function uses a non-reentrant model
  6231 ;;
  6232                           
  6233                           
  6234                           ;psect for function i1_PassLED
  6235  0F0E                     i1_PassLED:	
  6236                           
  6237                           ;incstack = 0
  6238                           ; Regs used in i1_PassLED: [wreg+status,2]
  6239                           ;i1PassLED@OnOff stored from wreg
  6240  0F0E  00F6               	movwf	i1PassLED@OnOff
  6241                           
  6242                           ;IO_Controls.c: 163: portA.portAByte = PORTA;
  6243  0F0F  0020               	movlb	0	; select bank0
  6244  0F10  080C               	movf	12,w	;volatile
  6245  0F11  00F5               	movwf	??i1_PassLED
  6246  0F12  0875               	movf	??i1_PassLED,w
  6247  0F13  00F4               	movwf	_portA
  6248                           
  6249                           ;IO_Controls.c: 164: portA.bits.PassLED = OnOff;
  6250  0F14  0876               	movf	i1PassLED@OnOff,w
  6251  0F15  3901               	andlw	1
  6252  0F16  12F4               	bcf	_portA,5
  6253  0F17  1D03               	skipz
  6254  0F18  16F4               	bsf	_portA,5
  6255                           
  6256                           ;IO_Controls.c: 165: PORTA=portA.portAByte;
  6257  0F19  0874               	movf	_portA,w
  6258  0F1A  008C               	movwf	12	;volatile
  6259  0F1B  0008               	return
  6260  0F1C                     __end_ofi1_PassLED:	
  6261                           ;IO_Controls.c: 166: return;
  6262                           
  6263                           
  6264                           	psect	text41
  6265  0F00                     __ptext41:	
  6266 ;; *************** function i1_Fail_LED *****************
  6267 ;; Defined at:
  6268 ;;		line 139 in file "IO_Controls.c"
  6269 ;; Parameters:    Size  Location     Type
  6270 ;;  OnOff           1    wreg     unsigned char 
  6271 ;; Auto vars:     Size  Location     Type
  6272 ;;  OnOff           1    1[COMMON] unsigned char 
  6273 ;; Return value:  Size  Location     Type
  6274 ;;                  1    wreg      void 
  6275 ;; Registers used:
  6276 ;;		wreg, status,2
  6277 ;; Tracked objects:
  6278 ;;		On entry : 0/0
  6279 ;;		On exit  : 0/0
  6280 ;;		Unchanged: 0/0
  6281 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6282 ;;      Params:         0       0       0       0
  6283 ;;      Locals:         1       0       0       0
  6284 ;;      Temps:          1       0       0       0
  6285 ;;      Totals:         2       0       0       0
  6286 ;;Total ram usage:        2 bytes
  6287 ;; Hardware stack levels used:    1
  6288 ;; This function calls:
  6289 ;;		Nothing
  6290 ;; This function is called by:
  6291 ;;		_ISR
  6292 ;; This function uses a non-reentrant model
  6293 ;;
  6294                           
  6295                           
  6296                           ;psect for function i1_Fail_LED
  6297  0F00                     i1_Fail_LED:	
  6298                           
  6299                           ;incstack = 0
  6300                           ; Regs used in i1_Fail_LED: [wreg+status,2]
  6301                           ;i1Fail_LED@OnOff stored from wreg
  6302  0F00  00F6               	movwf	i1Fail_LED@OnOff
  6303                           
  6304                           ;IO_Controls.c: 141: portC.portCByte = PORTC;
  6305  0F01  0020               	movlb	0	; select bank0
  6306  0F02  080E               	movf	14,w	;volatile
  6307  0F03  00F5               	movwf	??i1_Fail_LED
  6308  0F04  0875               	movf	??i1_Fail_LED,w
  6309  0F05  00F3               	movwf	_portC
  6310                           
  6311                           ;IO_Controls.c: 142: portC.bits.Fail_LED = OnOff;
  6312  0F06  0876               	movf	i1Fail_LED@OnOff,w
  6313  0F07  3901               	andlw	1
  6314  0F08  12F3               	bcf	_portC,5
  6315  0F09  1D03               	skipz
  6316  0F0A  16F3               	bsf	_portC,5
  6317                           
  6318                           ;IO_Controls.c: 143: PORTC=portC.portCByte;
  6319  0F0B  0873               	movf	_portC,w
  6320  0F0C  008E               	movwf	14	;volatile
  6321  0F0D  0008               	return
  6322  0F0E                     __end_ofi1_Fail_LED:	
  6323                           ;IO_Controls.c: 144: return;
  6324                           
  6325                           
  6326                           	psect	text42
  6327  0EF2                     __ptext42:	
  6328 ;; *************** function _UART_RX_String *****************
  6329 ;; Defined at:
  6330 ;;		line 79 in file "USART.c"
  6331 ;; Parameters:    Size  Location     Type
  6332 ;;		None
  6333 ;; Auto vars:     Size  Location     Type
  6334 ;;		None
  6335 ;; Return value:  Size  Location     Type
  6336 ;;                  1    wreg      void 
  6337 ;; Registers used:
  6338 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6339 ;; Tracked objects:
  6340 ;;		On entry : 0/0
  6341 ;;		On exit  : 0/0
  6342 ;;		Unchanged: 0/0
  6343 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6344 ;;      Params:         0       0       0       0
  6345 ;;      Locals:         0       0       0       0
  6346 ;;      Temps:          1       0       0       0
  6347 ;;      Totals:         1       0       0       0
  6348 ;;Total ram usage:        1 bytes
  6349 ;; Hardware stack levels used:    1
  6350 ;; This function calls:
  6351 ;;		Nothing
  6352 ;; This function is called by:
  6353 ;;		_ISR
  6354 ;; This function uses a non-reentrant model
  6355 ;;
  6356                           
  6357                           
  6358                           ;psect for function _UART_RX_String
  6359  0EF2                     _UART_RX_String:	
  6360                           
  6361                           ;USART.c: 83: *(rxArray+ptr)=RCREG;
  6362                           
  6363                           ;incstack = 0
  6364                           ; Regs used in _UART_RX_String: [wreg+fsr1l+fsr1h+status,2+status,0]
  6365  0EF2  0023               	movlb	3	; select bank3
  6366  0EF3  0819               	movf	25,w	;volatile
  6367  0EF4  00F5               	movwf	??_UART_RX_String
  6368  0EF5  0872               	movf	_ptr,w
  6369  0EF6  3EBA               	addlw	(low (_rxArray| 0))& (0+255)
  6370  0EF7  0086               	movwf	6
  6371  0EF8  0187               	clrf	7
  6372  0EF9  0875               	movf	??_UART_RX_String,w
  6373  0EFA  0081               	movwf	1
  6374                           
  6375                           ;USART.c: 84: ptr++;
  6376  0EFB  3001               	movlw	1
  6377  0EFC  00F5               	movwf	??_UART_RX_String
  6378  0EFD  0875               	movf	??_UART_RX_String,w
  6379  0EFE  07F2               	addwf	_ptr,f
  6380  0EFF  0008               	return
  6381  0F00                     __end_of_UART_RX_String:	
  6382  007E                     btemp	set	126	;btemp
  6383  007E                     int$flags	set	126
  6384  007E                     wtemp0	set	126


Data Sizes:
    Strings     4
    Constant    10
    Data        0
    BSS         75
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5      10
    BANK0            80     56      80
    BANK1            80      3      49
    BANK2            80      0       0

Pointer List with Targets:

    atoi@s	PTR const unsigned char  size(1) Largest target is 20
		 -> rxArray(BANK1[20]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_1(CODE[4]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    UART_TX_String@string	PTR unsigned char  size(1) Largest target is 20
		 -> rxArray(BANK1[20]), 

    UART_TX@data	PTR unsigned char  size(2) Largest target is 4096
		 -> RAM(DATA[4096]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->i1_Timer1

Critical Paths under _main in BANK0

    _main->_verifyACSignal
    _verifyACSignal->___fttol
    _setupTestParameters->___lldiv
    _beginHighCurrentTest->_Timer1Read
    _atoi->___wmul
    ___lldiv->___lmul
    _UART_TX_String->_UART_TX
    _printf->___lwmod
    ___lwmod->___lwdiv
    _fabs->___lltoft
    ___lltoft->___lldiv
    ___fttol->_fabs
    _pi3Connect->_empty_RX_BUFF

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0   10010
                                              0 BANK1      3     3      0
                         _ToggleGLED
                            _initPIC
                         _pi3Connect
                     _verifyACSignal
 ---------------------------------------------------------------------------------
 (1) _verifyACSignal                                       7     7      0    9328
                                             49 BANK0      7     7      0
                     _ADC_OPTO_Relay
                            _ReadADC
                             _Timer1
                         _ToggleGLED
                            _UART_TX
                            ___fttol
                            ___lldiv
                           ___lltoft
                      _empty_RX_BUFF
                               _fabs
                             _printf
                _setupTestParameters
 ---------------------------------------------------------------------------------
 (2) _setupTestParameters                                  3     3      0    3070
                                             26 BANK0      3     3      0
                            _PassLED
                            _UART_TX
                     _UART_TX_String
                            ___lldiv
                             ___lmul
                               _atoi
               _beginHighCurrentTest
                      _empty_RX_BUFF
 ---------------------------------------------------------------------------------
 (3) _beginHighCurrentTest                                 4     4      0      93
                                              4 BANK0      4     4      0
                     _ADC_OPTO_Relay
                                _SCR
                          _SCR_Relay
                          _TMR1Reset
                         _Timer1Read
 ---------------------------------------------------------------------------------
 (4) _Timer1Read                                           4     2      2       0
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (4) _TMR1Reset                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _SCR_Relay                                            2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _SCR                                                  2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _ADC_OPTO_Relay                                       2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _atoi                                                 8     6      2     789
                                              6 BANK0      8     6      2
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              2     2      0      99
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     290
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8     444
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             14     6      8     549
                                             12 BANK0     14     6      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _UART_TX_String                                       6     6      0     612
                                              2 BANK0      6     6      0
                            _UART_TX
 ---------------------------------------------------------------------------------
 (3) _PassLED                                              2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _printf                                              24    18      6    1452
                                             14 BANK0     16    10      6
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              6     2      4     386
                                              8 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     395
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _fabs                                                 3     0      3     664
                                             32 BANK0      3     0      3
                             ___ftge
                            ___ftneg
                            ___lldiv (ARG)
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     142
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6     352
                                              0 BANK0      9     3      6
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             6     2      4    2463
                                             26 BANK0      6     2      4
                           ___ftpack
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2284
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             14    10      4     448
                                             35 BANK0     14    10      4
                            ___lldiv (ARG)
                           ___lltoft (ARG)
                               _fabs (ARG)
 ---------------------------------------------------------------------------------
 (2) _ToggleGLED                                           1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _Timer1                                               4     2      2       0
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (2) _ReadADC                                              4     2      2       0
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _pi3Connect                                           3     3      0     614
                                              3 BANK0      3     3      0
                           _Fail_LED
                            _UART_TX
                      _empty_RX_BUFF
 ---------------------------------------------------------------------------------
 (3) _empty_RX_BUFF                                        3     3      0      99
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (4) _UART_TX                                              2     0      2     416
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _Fail_LED                                             2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _initPIC                                              0     0      0       0
                          _InitUSART
                          _Init_TMR1
                      _InitialiseADC
                    _InitialisePorts
 ---------------------------------------------------------------------------------
 (2) _InitialisePorts                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _InitialiseADC                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Init_TMR1                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _InitUSART                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _ISR                                                  1     1      0      44
                                              4 COMMON     1     1      0
                     _UART_RX_String
                         i1_Fail_LED
                          i1_PassLED
                           i1_Timer1
 ---------------------------------------------------------------------------------
 (6) i1_Timer1                                             4     2      2       0
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (6) i1_PassLED                                            2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (6) i1_Fail_LED                                           2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (6) _UART_RX_String                                       1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ToggleGLED
   _initPIC
     _InitUSART
     _Init_TMR1
     _InitialiseADC
     _InitialisePorts
   _pi3Connect
     _Fail_LED
     _UART_TX
     _empty_RX_BUFF
   _verifyACSignal
     _ADC_OPTO_Relay
     _ReadADC
     _Timer1
     _ToggleGLED
     _UART_TX
     ___fttol
       ___lldiv (ARG)
         ___lmul (ARG)
       ___lltoft (ARG)
         ___ftpack
         ___lldiv (ARG)
           ___lmul (ARG)
       _fabs (ARG)
         ___ftge
         ___ftneg
         ___lldiv (ARG)
           ___lmul (ARG)
         ___lltoft (ARG)
           ___ftpack
           ___lldiv (ARG)
             ___lmul (ARG)
     ___lldiv
       ___lmul (ARG)
     ___lltoft
       ___ftpack
       ___lldiv (ARG)
         ___lmul (ARG)
     _empty_RX_BUFF
     _fabs
       ___ftge
       ___ftneg
       ___lldiv (ARG)
         ___lmul (ARG)
       ___lltoft (ARG)
         ___ftpack
         ___lldiv (ARG)
           ___lmul (ARG)
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
     _setupTestParameters
       _PassLED
       _UART_TX
       _UART_TX_String
         _UART_TX
       ___lldiv
         ___lmul (ARG)
       ___lmul
       _atoi
         ___wmul
         _isdigit
       _beginHighCurrentTest
         _ADC_OPTO_Relay
         _SCR
         _SCR_Relay
         _TMR1Reset
         _Timer1Read
       _empty_RX_BUFF

 _ISR (ROOT)
   _UART_RX_String
   i1_Fail_LED
   i1_PassLED
   i1_Timer1

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      5       A       2       71.4%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      8B       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     38      50       6      100.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      3      31       8       61.3%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
DATA                 0      0      8B      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Wed May 02 23:55:12 2018

              i1Fail_LED@OnOff 0076                    __CFG_CP$OFF 0000            ___wmul@multiplicand 0022  
                          l153 00C0                            l138 0F74                            l164 0134  
                          l317 0ED0                            l246 070C                            l191 0483  
                          l293 0EC4                            l463 03A1                            l385 0EEE  
                          l547 07D1                            l734 0551                            l735 0559  
                          l727 053E                            l818 040F                   __CFG_CPD$OFF 0000  
                          _ISR 0004                            _SCR 0F46                            _PoW 006C  
                          _ptr 0072                   __CFG_BORV$LO 0000                            wreg 0009  
                 __CFG_LVP$OFF 0000                           ?_ISR 0075                           ?_SCR 0075  
                         l3001 067F                           l3003 068B                           l3013 06A6  
                         l3031 06FA                           l3009 069D                           l3025 06E2  
                         l3027 06EE                           l3035 0703                           l3045 0EEF  
                         l3205 035F                           l3303 0406                           l3215 036C  
                         l3305 0412                           l3209 0367                           l3217 02EF  
                         l3251 0278                           l3227 0229                           l3309 0420  
                         l3317 0738                           l3229 0235                           l3405 0121  
                         l3413 00CB                           l3351 0658                           l3319 0748  
                         l3183 0324                           l3239 0254                           l3431 01A5  
                         l3423 018B                           l3407 0126                           l3193 033A  
                         l3177 030B                           l2811 0786                           l3451 01F9  
                         l3443 01DE                           l3371 00A3                           l3349 0648  
                         l3277 03BB                           l3429 01A0                           l3295 03EB  
                         l2911 0514                           l3199 0340                           l2815 04A9  
                         l3471 05D4                           l3297 03F9                           l2833 04CB  
                         l2817 04A2                           l3369 0097                           l2915 051B  
                         l2843 0506                           l2835 04CF                           l2827 04C4  
                         l2819 04AE                           l3459 0215                           l2925 0543  
                         l2917 0525                           l2837 04F6                           l2853 043C  
                         l3397 00EF                           l2927 054B                           l2919 052A  
                         l2943 0617                           l2759 07CB                           l2863 045B  
                         l3479 05F0                           l2857 0446                           l2795 0780  
                         l2947 062D                           l2779 0F6F                           l2789 076B  
                         l2973 0581                           l2869 045D                           l2983 05AF  
                         l2975 058F                           l2895 06B4                           l2987 05BA  
                         l2899 06BE                           _ADIE 048E                           _ADFM 04F7  
                         _ADON 04E8                           STR_1 080A                           u3005 05B0  
                         _LATA 010C                           _LATC 010E                           u3105 06E5  
                         u3035 0682                           u3125 06F4                           u3055 068C  
                         u3135 06FB                           u3065 0696                           u3075 069E  
                         u3235 0355                           u3325 03C2                           u3175 071B  
                         u3415 073D                           u2625 0769                           u3185 07EE  
                         u2635 077E                           u3355 03EC                           u2555 0FD4  
                         u3605 05EE                           u2815 0520                           u2575 07D2  
                         u2735 0475                           u3385 0407                           u2585 07D7  
                         u3617 05DB                           u3707 0F93                           u2835 0539  
                         u3627 05F7                           u2765 06BF                           u3637 00AD  
                         u2855 0546                           u2775 06C6                           u3575 01F7  
                         u3647 01B8                           u3585 0213                           u3657 0200  
                         u3667 0240                           u3595 05D2                           u2965 0584  
                         u3677 025E                           u2895 0560                           u3687 0282  
                         u3697 0666                           u2985 0590                           u2995 05A4  
                         _TRMT 0CF1                           _TXIF 008C                   __CFG_WRT$OFF 0000  
              __end_of_UART_TX 0ECE                           _fabs 07A5                           _atoi 04A0  
                         _main 05C3                   ___ftpack@arg 0020                   ___ftpack@exp 0023  
                         _time 00A8                           fsr0h 0005                           fsr1h 0007  
                         indf0 0000                           fsr0l 0004                           indf1 0001  
                         fsr1l 0006                           btemp 007E                  __CFG_BOREN$ON 0000  
                         start 0072                  __CFG_IESO$OFF 0000         __size_of_empty_RX_BUFF 0025  
       __size_of_InitialiseADC 0016                __end_of_ReadADC 0733                __end_of_PassLED 0F38  
                        ??_ISR 0079                          ??_SCR 0020                   ___fttol@exp1 0050  
                 ___fttol@lval 004C  __size_of_beginHighCurrentTest 0077                    ?i1_Fail_LED 0075  
                        ?_fabs 0040                          ?_atoi 0026                          ?_main 0075  
                __CFG_WDTE$OFF 0000                __end_of___ftneg 0EC4                __end_of___lldiv 05C3  
                        _T1CON 0018                __end_of___fttol 0429                __end_of___lwdiv 06AB  
                        i1l203 0057                          i1l212 0064                          i1l204 0054  
                        i1l214 006D                __end_of___lwmod 0708                          i1l197 002B  
                        i1l198 0029                          _RCREG 0199                          _TMR1H 0017  
                        _TMR1L 0016                          _SPBRG 019B                          _PORTA 000C  
                        _PORTC 000E                          _TRISA 008C                          _TRISC 008E  
                        _TXREG 019A            ___lmul@multiplicand 0024                  __CFG_PWRTE$ON 0000  
                 ___lltoft@exp 003F                 __CFG_FCMEN$OFF 0000             __size_of_SCR_Relay 000E  
           __size_of_TMR1Reset 0005                __end_of_initPIC 0F85                __end_of_dpowers 080A  
                        fabs@d 0040                __end_of_isdigit 0F71             __size_ofi1_PassLED 000E  
             __end_ofi1_Timer1 1000                  ___ftpack@sign 0024                          _portA 0074  
                        _portC 0073                          atoi@a 002B                          atoi@s 002D  
                        _putch 0ECE                          main@i 00CF                          status 0003  
             __end_of_Fail_LED 0F2A                          wtemp0 007E                 __CFG_MCLRE$OFF 0000  
              __initialization 0074                   __end_of_fabs 07C8                   __end_of_atoi 050B  
                 __end_of_main 0600                         ??_fabs 0043                         ??_atoi 0028  
                       ??_main 00CE                  ___fttol@sign1 004B                 __CFG_PLLEN$OFF 0000  
                _empty_RX_BUFF 075D                  _InitialiseADC 0F85                      ??_UART_TX 0022  
                   _Tmr1Val_Ms 00A0                         _ADRESH 009C                         _ADRESL 009B  
                       _ANSELA 018C                         ?_putch 0075                         _ANSELC 018E  
             __end_of___ftpack 0570                         _T1GCON 0019                         _HFIOFR 04D4  
             __end_of___lltoft 075D                         i1l2711 006B                         i1l2679 0024  
                       i1l2699 0050            pi3Connect@handshake 0025             __size_of_InitUSART 0019  
                       _INTCON 000B                         _FVRCON 0117                         u235_25 0FEE  
                       _OSCCON 0099        __size_of_ADC_OPTO_Relay 000E             __size_of_Init_TMR1 000D  
      __size_of_UART_RX_String 000E                         _TMR1ON 00C0                         _SCR_On 00AE  
                    ??_ReadADC 0022            __size_ofi1_Fail_LED 000E                 empty_RX_BUFF@i 0021  
      __size_of_UART_TX_String 0023                      ??_PassLED 0020                     _Timer1Read 0FCB  
                       _Timer1 07E4              __end_of_SCR_Relay 0F62                         ___ftge 0600  
                       ___lmul 06AB              __end_of_TMR1Reset 0EB5                         ___wmul 07C8  
               __CFG_STVREN$ON 0000                      ??___ftneg 0023                      ??___lldiv 0034  
                    ??___fttol 0047              __end_ofi1_PassLED 0F1C                      ??___lwdiv 0024  
                    ??___lwmod 002C                         _cycles 00AA                         _rxFlag 00AC  
                       _rxByte 006B                         _txByte 006A                         _printf 02EA  
                   _ToggleGLED 0EE5                      ??_initPIC 0020                 ?_empty_RX_BUFF 0075  
               ?_InitialiseADC 0075                      ??_isdigit 0020                         putch@c 0020  
                 PassLED@OnOff 0021               ??_verifyACSignal 0051        __end_of__initialization 0088  
                   ___ftge@ff1 0020                     ___ftge@ff2 0023                     ___ftneg@f1 0020  
                   ___fttol@f1 0043                 __pcstackCOMMON 0075       __size_of_InitialisePorts 0017  
                   ___lltoft@c 003A                  __end_of_putch 0ED8                      ?i1_Timer1 0075  
            __end_of_InitUSART 0FCB              __end_of_Init_TMR1 0EE5                      ?_Fail_LED 0075  
                   _pi3Connect 063C   __size_of_setupTestParameters 00CE                        ??_putch 0020  
                   __pbssBANK0 0058                     __pbssBANK1 00A0                 i1PassLED@OnOff 0076  
                  ?_Timer1Read 0020                        ?_Timer1 0020                     __pmaintext 05C3  
                      ?___ftge 0020                     _aveTmr1Val 0058                        ?___lmul 0020  
                      ?___wmul 0020                     __pintentry 0004                 ___lmul@product 0028  
                   ??i1_Timer1 0077                      ?___ftpack 0020                   ??i1_Fail_LED 0075  
                      ?_printf 002E                ??_empty_RX_BUFF 0020                    ?_ToggleGLED 0075  
                    ?___lltoft 003A                ??_InitialiseADC 0020                     ??_Fail_LED 0020  
                      _UART_TX 0EC4   __end_of_beginHighCurrentTest 04A0                 _ADC_OPTO_Relay 0F38  
               _UART_RX_String 0EF2                        _ReadADC 0708                 _UART_TX_String 0782  
                      _PassLED 0F2A             __end_ofi1_Fail_LED 0F0E                __size_of_Timer1 001C  
                      _adcData 00B8                __size_of___ftge 003C                __size_of___lmul 0030  
                  UART_TX@data 0020                        ___ftneg 0EBB                        ___lldiv 0570  
              __size_of___wmul 001C                        ___fttol 03A2                        ___lwdiv 0676  
                      ___lwmod 06DB                     ??___ftpack 0025                     ??___lltoft 003E  
                      __ptext1 008C                        __ptext2 021C                        __ptext3 0429  
                      __ptext4 0FCB                        __ptext5 0EB0                        __ptext6 0F54  
                      __ptext7 0F46                        __ptext8 0F38                        __ptext9 04A0  
              __size_of_printf 00B8                   __size_of_ISR 006E                        _intData 00B4  
                 __size_of_SCR 000E              ??_InitialisePorts 0020                      _T1CONbits 0018  
                      _initPIC 0F71                        _dpowers 0800                        _isdigit 0F62  
                  ?_pi3Connect 0075                        _tmr1Val 00A4                      _IOCAFbits 0393  
                      _rxArray 00BA           UART_TX_String@string 0027                      _IOCAPbits 0391  
          __size_of_Timer1Read 0019                 SCR_Relay@OnOff 0021         __end_of_ADC_OPTO_Relay 0F46  
       __end_of_UART_RX_String 0F00                        clrloop0 0EB6           end_of_initialization 0088  
       __end_of_UART_TX_String 07A5            __size_of_ToggleGLED 000D                ___lldiv@divisor 002C  
              ___lldiv@counter 0039                      _RCSTAbits 019D                        printf@c 003D  
                      printf@f 002E                      _SCR_Relay 0F54                      _TMR1Reset 0EB0  
                    _PORTAbits 000C                      i1_PassLED 0F0E               __CFG_FOSC$INTOSC 0000  
                    _TRISAbits 008C                ?_ADC_OPTO_Relay 0075                ?_UART_RX_String 0075  
              ?_UART_TX_String 0075                      _TXSTAbits 019E            __size_of_pi3Connect 003A  
               __end_of_Timer1 0800            _setupTestParameters 021C                 __end_of___ftge 063C  
               __end_of___lmul 06DB                 __end_of___wmul 07E4                    _BAUDCONbits 019F  
         _beginHighCurrentTest 0429                     ?_SCR_Relay 0075                     ?_TMR1Reset 0075  
              verifyACSignal@i 0055                     ?i1_PassLED 0075              __size_ofi1_Timer1 001C  
               __end_of_printf 03A2                      _InitUSART 0FB2            start_initialization 0074  
                    _Init_TMR1 0ED8                    __end_of_ISR 0072                    __end_of_SCR 0F54  
                _tmr1StartFlag 0066              __size_of_Fail_LED 000E           ?_setupTestParameters 0075  
                  _APFCON0bits 011D                   ??_Timer1Read 0022                       ??_Timer1 0022  
                     ??___ftge 0026                       ??___lmul 0028       verifyACSignal@handshake2 0057  
                     ??___wmul 0024          ?_beginHighCurrentTest 0075                   ??_ToggleGLED 0020  
                     ??_printf 0034              __size_of___ftpack 0065                     ?_InitUSART 0075  
            __size_of___lltoft 002A                      _adcSample 0068                    __pbssCOMMON 0070  
                    ___latbits 0001            ADC_OPTO_Relay@OnOff 0021                     ?_Init_TMR1 0075  
                __pcstackBANK0 0020                  __pcstackBANK1 00CE                       ?_UART_TX 0020  
              UART_TX_String@i 0025          ??_setupTestParameters 003A                   _isdigit$1124 0020  
           __end_of_Timer1Read 0FE4                       ?_ReadADC 0020                       ?_PassLED 0075  
           __end_of_ToggleGLED 0EF2                       SCR@OnOff 0021               ___lwdiv@dividend 0022  
              _InitialisePorts 0F9B        __size_of_verifyACSignal 0190                       ?___ftneg 0020  
                     ?___lldiv 002C                       ?___fttol 0043                       ?___lwdiv 0020  
                     ?___lwmod 0028                    ??_SCR_Relay 0020                    ??_TMR1Reset 0020  
                  ??i1_PassLED 0075              _previousADCsample 00B6                       ?_initPIC 0075  
        __end_of_empty_RX_BUFF 0782          __end_of_InitialiseADC 0F9B                   ??_pi3Connect 0023  
                     ?_isdigit 0075                       _ADC_Test 0070               ___lwdiv@quotient 0026  
               __size_of_putch 000A                 ___wmul@product 0024                      _tmr1Start 0062  
setupTestParameters@handshake3 003C                      clear_ram0 0EB5                      _sampleVal 00B2  
                     _PIE1bits 0091                       _PIR1bits 0011                       _GO_nDONE 04E9  
           __end_of_pi3Connect 0676                      _temp_time 005C         ??_beginHighCurrentTest 0024  
                     i1_Timer1 0FE4                     _ADCON0bits 009D                     _ADCON1bits 009E  
            ___wmul@multiplier 0020                     printf@flag 0039               ??_ADC_OPTO_Relay 0020  
             ??_UART_RX_String 0075                       _Fail_LED 0F1C                     printf@prec 003A  
                  ??_InitUSART 0020                    ??_Init_TMR1 0020               ??_UART_TX_String 0022  
            ___lmul@multiplier 0020               __size_of_UART_TX 000A                       _NegCycle 005E  
      __end_of_InitialisePorts 0FB2               __size_of_ReadADC 002B                       _PosCycle 0060  
             __size_of_PassLED 000E               __size_of___ftneg 0009               __size_of___lldiv 0053  
             __size_of___fttol 0087               __size_of___lwdiv 0035               __size_of___lwmod 002D  
                     ___ftpack 050B                       ___lltoft 0733                     _ANSELAbits 018C  
             __size_of_initPIC 0014               __size_of_isdigit 000F                ___lwdiv@divisor 0020  
              ___lwdiv@counter 0025                       __ptext10 0F62                       __ptext11 07C8  
                     __ptext20 07A5                       __ptext12 06AB                       __ptext21 0EBB  
                     __ptext13 0570                       __ptext30 075D                       __ptext22 0600  
                     __ptext14 0782                       __ptext31 0EC4                       __ptext23 0733  
                     __ptext15 0F2A                       __ptext40 0F0E                       __ptext32 0F1C  
                     __ptext24 050B                       __ptext16 02EA                       __ptext41 0F00  
                     __ptext33 0F71                       __ptext25 03A2                       __ptext17 0ECE  
                     __ptext42 0EF2                       __ptext34 0F9B                       __ptext26 0EE5  
                     __ptext18 06DB                       __ptext35 0F85                       __ptext27 07E4  
                     __ptext19 0676                       __ptext36 0ED8                       __ptext28 0708  
                     __ptext37 0FB2                       __ptext29 063C                       __ptext39 0FE4  
                     _mainTest 00B0                  __size_of_fabs 0023                  __size_of_atoi 006B  
                __size_of_main 003D                  Fail_LED@OnOff 0021                 _verifyACSignal 008C  
                     int$flags 007E                       atoi@sign 002A                      printf@val 003B  
                  _tmr1Samples 0064                     _INTCONbits 000B                       isdigit@c 0021  
                     intlevel1 0000               ___lwmod@dividend 002A               ?_InitialisePorts 0075  
             ___lldiv@dividend 0030              __CFG_CLKOUTEN$OFF 0000         __end_of_verifyACSignal 021C  
                     printf@ap 0038                  __pstringtext1 0800                  __pstringtext2 0000  
                   i1_Fail_LED 0F00                     _OPTION_REG 0095    __end_of_setupTestParameters 02EA  
             ___lldiv@quotient 0035                ___lwmod@divisor 0028                ___lwmod@counter 002D  
              ?_verifyACSignal 0075  
